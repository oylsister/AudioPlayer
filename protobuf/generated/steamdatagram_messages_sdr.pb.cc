// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: steamdatagram_messages_sdr.proto
// Protobuf C++ Version: 6.30.0-rc1

#include "steamdatagram_messages_sdr.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;

inline constexpr CMsgTOSTreatment::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        l4s_detect_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        up_ecn1_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        down_dscp45_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()) {}

template <typename>
PROTOBUF_CONSTEXPR CMsgTOSTreatment::CMsgTOSTreatment(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CMsgTOSTreatment_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CMsgTOSTreatmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgTOSTreatmentDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgTOSTreatmentDefaultTypeInternal() {}
  union {
    CMsgTOSTreatment _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgTOSTreatmentDefaultTypeInternal _CMsgTOSTreatment_default_instance_;

inline constexpr CMsgSteamNetworkingP2PSDRRoutingSummary::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        initial_ping_{0u},
        initial_ping_front_local_{0u},
        initial_ping_front_remote_{0u},
        initial_score_{0u},
        initial_pop_local_{0u},
        initial_pop_remote_{0u},
        negotiation_ms_{0u},
        selected_seconds_{0u},
        best_ping_{0u},
        best_ping_front_local_{0u},
        best_ping_front_remote_{0u},
        best_score_{0u},
        best_pop_local_{0u},
        best_pop_remote_{0u},
        best_time_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR CMsgSteamNetworkingP2PSDRRoutingSummary::CMsgSteamNetworkingP2PSDRRoutingSummary(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CMsgSteamNetworkingP2PSDRRoutingSummary_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CMsgSteamNetworkingP2PSDRRoutingSummaryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamNetworkingP2PSDRRoutingSummaryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamNetworkingP2PSDRRoutingSummaryDefaultTypeInternal() {}
  union {
    CMsgSteamNetworkingP2PSDRRoutingSummary _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamNetworkingP2PSDRRoutingSummaryDefaultTypeInternal _CMsgSteamNetworkingP2PSDRRoutingSummary_default_instance_;

inline constexpr CMsgSteamNetworkingIPAddress::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        v6_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        v4_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR CMsgSteamNetworkingIPAddress::CMsgSteamNetworkingIPAddress(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CMsgSteamNetworkingIPAddress_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CMsgSteamNetworkingIPAddressDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamNetworkingIPAddressDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamNetworkingIPAddressDefaultTypeInternal() {}
  union {
    CMsgSteamNetworkingIPAddress _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamNetworkingIPAddressDefaultTypeInternal _CMsgSteamNetworkingIPAddress_default_instance_;

inline constexpr CMsgSteamDatagramSetSecondaryAddressResult::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        success_{false} {}

template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramSetSecondaryAddressResult::CMsgSteamDatagramSetSecondaryAddressResult(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CMsgSteamDatagramSetSecondaryAddressResult_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CMsgSteamDatagramSetSecondaryAddressResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramSetSecondaryAddressResultDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramSetSecondaryAddressResultDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramSetSecondaryAddressResult _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramSetSecondaryAddressResultDefaultTypeInternal _CMsgSteamDatagramSetSecondaryAddressResult_default_instance_;

inline constexpr CMsgSteamDatagramSetSecondaryAddressRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        client_identity_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        kludge_pad_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        client_main_ip_{0u},
        client_main_port_{0u},
        client_connection_id_{0u},
        request_send_duplication_{false} {}

template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramSetSecondaryAddressRequest::CMsgSteamDatagramSetSecondaryAddressRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CMsgSteamDatagramSetSecondaryAddressRequest_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CMsgSteamDatagramSetSecondaryAddressRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramSetSecondaryAddressRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramSetSecondaryAddressRequestDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramSetSecondaryAddressRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramSetSecondaryAddressRequestDefaultTypeInternal _CMsgSteamDatagramSetSecondaryAddressRequest_default_instance_;

inline constexpr CMsgSteamDatagramRouterPingReply_RouteException::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        data_center_id_{0u},
        flags_{0u},
        penalty_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramRouterPingReply_RouteException::CMsgSteamDatagramRouterPingReply_RouteException(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CMsgSteamDatagramRouterPingReply_RouteException_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CMsgSteamDatagramRouterPingReply_RouteExceptionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramRouterPingReply_RouteExceptionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramRouterPingReply_RouteExceptionDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramRouterPingReply_RouteException _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramRouterPingReply_RouteExceptionDefaultTypeInternal _CMsgSteamDatagramRouterPingReply_RouteException_default_instance_;

inline constexpr CMsgSteamDatagramRouterPingReply_AltAddress::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        ipv4_{0u},
        port_{0u},
        penalty_{0u},
        protocol_{static_cast< ::CMsgSteamDatagramRouterPingReply_AltAddress_Protocol >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramRouterPingReply_AltAddress::CMsgSteamDatagramRouterPingReply_AltAddress(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CMsgSteamDatagramRouterPingReply_AltAddress_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CMsgSteamDatagramRouterPingReply_AltAddressDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramRouterPingReply_AltAddressDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramRouterPingReply_AltAddressDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramRouterPingReply_AltAddress _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramRouterPingReply_AltAddressDefaultTypeInternal _CMsgSteamDatagramRouterPingReply_AltAddress_default_instance_;

inline constexpr CMsgSteamDatagramP2PSessionRequestBody_EncryptedData::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        peer_identity_string_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()) {}

template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramP2PSessionRequestBody_EncryptedData::CMsgSteamDatagramP2PSessionRequestBody_EncryptedData(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CMsgSteamDatagramP2PSessionRequestBody_EncryptedData_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CMsgSteamDatagramP2PSessionRequestBody_EncryptedDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramP2PSessionRequestBody_EncryptedDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramP2PSessionRequestBody_EncryptedDataDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramP2PSessionRequestBody_EncryptedData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramP2PSessionRequestBody_EncryptedDataDefaultTypeInternal _CMsgSteamDatagramP2PSessionRequestBody_EncryptedData_default_instance_;

inline constexpr CMsgSteamDatagramP2PSessionRequestBody::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        peer_identity_string_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        platform_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        build_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        encrypted_data_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        encryption_my_ephemeral_public_key_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        challenge_{::uint64_t{0u}},
        challenge_time_{0u},
        client_connection_id_{0u},
        legacy_peer_steam_id_{::uint64_t{0u}},
        peer_connection_id_{0u},
        protocol_version_{0u},
        network_config_version_{::uint64_t{0u}},
        encryption_your_public_key_lead_byte_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramP2PSessionRequestBody::CMsgSteamDatagramP2PSessionRequestBody(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CMsgSteamDatagramP2PSessionRequestBody_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CMsgSteamDatagramP2PSessionRequestBodyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramP2PSessionRequestBodyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramP2PSessionRequestBodyDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramP2PSessionRequestBody _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramP2PSessionRequestBodyDefaultTypeInternal _CMsgSteamDatagramP2PSessionRequestBody_default_instance_;

inline constexpr CMsgSteamDatagramP2PSessionEstablished::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        relay_routing_token_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        connection_id_{0u},
        seconds_until_shutdown_{0u},
        seq_num_r2c_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramP2PSessionEstablished::CMsgSteamDatagramP2PSessionEstablished(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CMsgSteamDatagramP2PSessionEstablished_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CMsgSteamDatagramP2PSessionEstablishedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramP2PSessionEstablishedDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramP2PSessionEstablishedDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramP2PSessionEstablished _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramP2PSessionEstablishedDefaultTypeInternal _CMsgSteamDatagramP2PSessionEstablished_default_instance_;

inline constexpr CMsgSteamDatagramP2PRoutes_Route::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        my_pop_id_{0u},
        your_pop_id_{0u},
        legacy_score_{0u},
        interior_score_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramP2PRoutes_Route::CMsgSteamDatagramP2PRoutes_Route(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CMsgSteamDatagramP2PRoutes_Route_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CMsgSteamDatagramP2PRoutes_RouteDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramP2PRoutes_RouteDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramP2PRoutes_RouteDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramP2PRoutes_Route _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramP2PRoutes_RouteDefaultTypeInternal _CMsgSteamDatagramP2PRoutes_Route_default_instance_;

inline constexpr CMsgSteamDatagramP2PRoutes_RelayCluster::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        session_relay_routing_token_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        pop_id_{0u},
        ping_ms_{0u},
        score_penalty_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramP2PRoutes_RelayCluster::CMsgSteamDatagramP2PRoutes_RelayCluster(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CMsgSteamDatagramP2PRoutes_RelayCluster_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CMsgSteamDatagramP2PRoutes_RelayClusterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramP2PRoutes_RelayClusterDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramP2PRoutes_RelayClusterDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramP2PRoutes_RelayCluster _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramP2PRoutes_RelayClusterDefaultTypeInternal _CMsgSteamDatagramP2PRoutes_RelayCluster_default_instance_;

inline constexpr CMsgSteamDatagramP2PBadRouteRouterToClient::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        failed_relay_routing_token_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        connection_id_{0u},
        ack_forward_target_revision_{0u},
        kludge_pad_{::uint64_t{0u}} {}

template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramP2PBadRouteRouterToClient::CMsgSteamDatagramP2PBadRouteRouterToClient(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CMsgSteamDatagramP2PBadRouteRouterToClient_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CMsgSteamDatagramP2PBadRouteRouterToClientDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramP2PBadRouteRouterToClientDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramP2PBadRouteRouterToClientDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramP2PBadRouteRouterToClient _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramP2PBadRouteRouterToClientDefaultTypeInternal _CMsgSteamDatagramP2PBadRouteRouterToClient_default_instance_;

inline constexpr CMsgSteamDatagramNoSessionRelayToPeer::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        legacy_relay_session_id_{0u},
        from_relay_session_id_{0u},
        kludge_pad_{::uint64_t{0u}},
        from_connection_id_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramNoSessionRelayToPeer::CMsgSteamDatagramNoSessionRelayToPeer(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CMsgSteamDatagramNoSessionRelayToPeer_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CMsgSteamDatagramNoSessionRelayToPeerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramNoSessionRelayToPeerDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramNoSessionRelayToPeerDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramNoSessionRelayToPeer _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramNoSessionRelayToPeerDefaultTypeInternal _CMsgSteamDatagramNoSessionRelayToPeer_default_instance_;

inline constexpr CMsgSteamDatagramNoSessionRelayToClient::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        your_public_ip_{0u},
        server_time_{0u},
        challenge_{::uint64_t{0u}},
        seconds_until_shutdown_{0u},
        your_public_port_{0u},
        connection_id_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramNoSessionRelayToClient::CMsgSteamDatagramNoSessionRelayToClient(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CMsgSteamDatagramNoSessionRelayToClient_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CMsgSteamDatagramNoSessionRelayToClientDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramNoSessionRelayToClientDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramNoSessionRelayToClientDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramNoSessionRelayToClient _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramNoSessionRelayToClientDefaultTypeInternal _CMsgSteamDatagramNoSessionRelayToClient_default_instance_;

inline constexpr CMsgSteamDatagramGameserverSessionEstablished::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        gameserver_identity_string_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        dummy_legacy_identity_binary_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        connection_id_{0u},
        seconds_until_shutdown_{0u},
        legacy_gameserver_steamid_{::uint64_t{0u}},
        seq_num_r2c_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramGameserverSessionEstablished::CMsgSteamDatagramGameserverSessionEstablished(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CMsgSteamDatagramGameserverSessionEstablished_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CMsgSteamDatagramGameserverSessionEstablishedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramGameserverSessionEstablishedDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramGameserverSessionEstablishedDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramGameserverSessionEstablished _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramGameserverSessionEstablishedDefaultTypeInternal _CMsgSteamDatagramGameserverSessionEstablished_default_instance_;

inline constexpr CMsgSteamDatagramGameserverPingReplyData::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        echo_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        build_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        routing_blob_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        legacy_challenge_{::uint64_t{0u}},
        echo_relay_unix_time_{0u},
        legacy_router_timestamp_{0u},
        data_center_id_{0u},
        appid_{0u},
        protocol_version_{0u},
        my_unix_time_{0u},
        network_config_version_{::uint64_t{0u}} {}

template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramGameserverPingReplyData::CMsgSteamDatagramGameserverPingReplyData(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CMsgSteamDatagramGameserverPingReplyData_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CMsgSteamDatagramGameserverPingReplyDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramGameserverPingReplyDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramGameserverPingReplyDataDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramGameserverPingReplyData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramGameserverPingReplyDataDefaultTypeInternal _CMsgSteamDatagramGameserverPingReplyData_default_instance_;

inline constexpr CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        score_{0u},
        front_ping_{0u},
        back_ping_{0u},
        seconds_until_down_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CMsgSteamDatagramClientSwitchedPrimary_RouterQualityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramClientSwitchedPrimary_RouterQualityDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramClientSwitchedPrimary_RouterQualityDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramClientSwitchedPrimary_RouterQuality _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramClientSwitchedPrimary_RouterQualityDefaultTypeInternal _CMsgSteamDatagramClientSwitchedPrimary_RouterQuality_default_instance_;

inline constexpr CMsgSteamDatagramClientPingSampleRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        connection_id_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramClientPingSampleRequest::CMsgSteamDatagramClientPingSampleRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CMsgSteamDatagramClientPingSampleRequest_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CMsgSteamDatagramClientPingSampleRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramClientPingSampleRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramClientPingSampleRequestDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramClientPingSampleRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramClientPingSampleRequestDefaultTypeInternal _CMsgSteamDatagramClientPingSampleRequest_default_instance_;

inline constexpr CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        front_ping_ms_{0u},
        penalty_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::CMsgSteamDatagramClientPingSampleReply_POP_AltAddress(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CMsgSteamDatagramClientPingSampleReply_POP_AltAddress_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CMsgSteamDatagramClientPingSampleReply_POP_AltAddressDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramClientPingSampleReply_POP_AltAddressDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramClientPingSampleReply_POP_AltAddressDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramClientPingSampleReply_POP_AltAddress _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramClientPingSampleReply_POP_AltAddressDefaultTypeInternal _CMsgSteamDatagramClientPingSampleReply_POP_AltAddress_default_instance_;

inline constexpr CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        data_center_id_{0u},
        best_dc_via_relay_pop_id_{0u},
        best_dc_ping_ms_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CMsgSteamDatagramClientPingSampleReply_LegacyDataCenterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramClientPingSampleReply_LegacyDataCenterDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramClientPingSampleReply_LegacyDataCenterDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramClientPingSampleReply_LegacyDataCenterDefaultTypeInternal _CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter_default_instance_;

inline constexpr CMsgSteamDatagramSignedMessageGeneric::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        signed_data_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        signature_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        dummy_pad_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        cert_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramSignedMessageGeneric::CMsgSteamDatagramSignedMessageGeneric(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CMsgSteamDatagramSignedMessageGeneric_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CMsgSteamDatagramSignedMessageGenericDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramSignedMessageGenericDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramSignedMessageGenericDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramSignedMessageGeneric _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramSignedMessageGenericDefaultTypeInternal _CMsgSteamDatagramSignedMessageGeneric_default_instance_;

inline constexpr CMsgSteamDatagramRouterPingReply::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        latency_datacenter_ids_{},
        latency_ping_ms_{},
        _latency_ping_ms_cached_byte_size_{0},
        route_exceptions_{},
        alt_addresses_{},
        latency_datacenter_ids_p2p_{},
        latency_ping_ms_p2p_{},
        _latency_ping_ms_p2p_cached_byte_size_{0},
        dummy_pad_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        client_timestamp_{0u},
        your_public_ip_{0u},
        challenge_{::uint64_t{0u}},
        server_time_{0u},
        seconds_until_shutdown_{0u},
        client_cookie_{0u},
        scoring_penalty_relay_cluster_{0u},
        your_public_port_{0u},
        flags_{0u},
        recv_tos_{0u},
        echo_sent_tos_{0u},
        sent_tos_{0u},
        echo_request_reply_tos_{0u},
        dummy_varint_{::uint64_t{0u}} {}

template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramRouterPingReply::CMsgSteamDatagramRouterPingReply(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CMsgSteamDatagramRouterPingReply_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CMsgSteamDatagramRouterPingReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramRouterPingReplyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramRouterPingReplyDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramRouterPingReply _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramRouterPingReplyDefaultTypeInternal _CMsgSteamDatagramRouterPingReply_default_instance_;

inline constexpr CMsgSteamDatagramP2PSessionRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        body_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        signature_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        cert_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramP2PSessionRequest::CMsgSteamDatagramP2PSessionRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CMsgSteamDatagramP2PSessionRequest_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CMsgSteamDatagramP2PSessionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramP2PSessionRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramP2PSessionRequestDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramP2PSessionRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramP2PSessionRequestDefaultTypeInternal _CMsgSteamDatagramP2PSessionRequest_default_instance_;

inline constexpr CMsgSteamDatagramP2PRoutingSummary::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        ice_{nullptr},
        sdr_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramP2PRoutingSummary::CMsgSteamDatagramP2PRoutingSummary(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CMsgSteamDatagramP2PRoutingSummary_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CMsgSteamDatagramP2PRoutingSummaryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramP2PRoutingSummaryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramP2PRoutingSummaryDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramP2PRoutingSummary _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramP2PRoutingSummaryDefaultTypeInternal _CMsgSteamDatagramP2PRoutingSummary_default_instance_;

inline constexpr CMsgSteamDatagramP2PRoutes::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        relay_clusters_{},
        routes_{},
        revision_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramP2PRoutes::CMsgSteamDatagramP2PRoutes(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CMsgSteamDatagramP2PRoutes_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CMsgSteamDatagramP2PRoutesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramP2PRoutesDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramP2PRoutesDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramP2PRoutes _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramP2PRoutesDefaultTypeInternal _CMsgSteamDatagramP2PRoutes_default_instance_;

inline constexpr CMsgSteamDatagramGameserverSessionRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        ticket_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        platform_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        build_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        dev_gameserver_identity_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        dev_client_cert_{nullptr},
        challenge_{::uint64_t{0u}},
        challenge_time_{0u},
        client_connection_id_{0u},
        network_config_version_{::uint64_t{0u}},
        protocol_version_{0u},
        server_connection_id_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramGameserverSessionRequest::CMsgSteamDatagramGameserverSessionRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CMsgSteamDatagramGameserverSessionRequest_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CMsgSteamDatagramGameserverSessionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramGameserverSessionRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramGameserverSessionRequestDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramGameserverSessionRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramGameserverSessionRequestDefaultTypeInternal _CMsgSteamDatagramGameserverSessionRequest_default_instance_;

inline constexpr CMsgSteamDatagramGameserverPingRequestEnvelope::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        signed_data_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        signature_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        dummy_pad_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        cert_{nullptr},
        legacy_your_public_ip_{0u},
        legacy_relay_unix_time_{0u},
        legacy_challenge_{::uint64_t{0u}},
        legacy_router_timestamp_{0u},
        legacy_your_public_port_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramGameserverPingRequestEnvelope::CMsgSteamDatagramGameserverPingRequestEnvelope(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CMsgSteamDatagramGameserverPingRequestEnvelope_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CMsgSteamDatagramGameserverPingRequestEnvelopeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramGameserverPingRequestEnvelopeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramGameserverPingRequestEnvelopeDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramGameserverPingRequestEnvelope _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramGameserverPingRequestEnvelopeDefaultTypeInternal _CMsgSteamDatagramGameserverPingRequestEnvelope_default_instance_;

inline constexpr CMsgSteamDatagramGameserverPingRequestBody::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        my_ips_{},
        echo_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        your_public_ip_{nullptr},
        relay_popid_{0u},
        your_public_port_{0u},
        relay_unix_time_{::uint64_t{0u}},
        routing_secret_{::uint64_t{0u}} {}

template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramGameserverPingRequestBody::CMsgSteamDatagramGameserverPingRequestBody(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CMsgSteamDatagramGameserverPingRequestBody_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CMsgSteamDatagramGameserverPingRequestBodyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramGameserverPingRequestBodyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramGameserverPingRequestBodyDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramGameserverPingRequestBody _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramGameserverPingRequestBodyDefaultTypeInternal _CMsgSteamDatagramGameserverPingRequestBody_default_instance_;

inline constexpr CMsgSteamDatagramConnectRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        crypt_{nullptr},
        cert_{nullptr},
        connection_id_{0u},
        gameserver_relay_session_id_{0u},
        legacy_client_steam_id_{::uint64_t{0u}},
        my_timestamp_{::uint64_t{0u}},
        ping_est_ms_{0u},
        virtual_port_{0u},
        routing_secret_{::uint64_t{0u}} {}

template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramConnectRequest::CMsgSteamDatagramConnectRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CMsgSteamDatagramConnectRequest_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CMsgSteamDatagramConnectRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramConnectRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramConnectRequestDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramConnectRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramConnectRequestDefaultTypeInternal _CMsgSteamDatagramConnectRequest_default_instance_;

inline constexpr CMsgSteamDatagramConnectOK::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        crypt_{nullptr},
        cert_{nullptr},
        client_connection_id_{0u},
        gameserver_relay_session_id_{0u},
        your_timestamp_{::uint64_t{0u}},
        delay_time_usec_{0u},
        server_connection_id_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramConnectOK::CMsgSteamDatagramConnectOK(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CMsgSteamDatagramConnectOK_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CMsgSteamDatagramConnectOKDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramConnectOKDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramConnectOKDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramConnectOK _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramConnectOKDefaultTypeInternal _CMsgSteamDatagramConnectOK_default_instance_;

inline constexpr CMsgSteamDatagramClientSwitchedPrimary::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        from_dropped_reason_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        from_quality_now_{nullptr},
        to_quality_now_{nullptr},
        from_quality_then_{nullptr},
        to_quality_then_{nullptr},
        connection_id_{0u},
        from_ip_{0u},
        from_port_{0u},
        from_router_cluster_{0u},
        from_active_time_{0u},
        from_active_packets_recv_{0u},
        gap_ms_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramClientSwitchedPrimary::CMsgSteamDatagramClientSwitchedPrimary(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CMsgSteamDatagramClientSwitchedPrimary_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CMsgSteamDatagramClientSwitchedPrimaryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramClientSwitchedPrimaryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramClientSwitchedPrimaryDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramClientSwitchedPrimary _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramClientSwitchedPrimaryDefaultTypeInternal _CMsgSteamDatagramClientSwitchedPrimary_default_instance_;

inline constexpr CMsgSteamDatagramClientPingSampleReply_POP::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        alt_addresses_{},
        pop_id_{0u},
        default_front_ping_ms_{0u},
        default_e2e_ping_ms_{0u},
        cluster_penalty_{0u},
        default_e2e_score_{0u},
        p2p_via_peer_relay_pop_id_{0u},
        best_dc_ping_ms_{0u},
        best_dc_score_{0u},
        best_dc_via_relay_pop_id_{0u},
        default_dc_ping_ms_{0u},
        default_dc_score_{0u},
        default_dc_via_relay_pop_id_{0u},
        test_dc_ping_ms_{0u},
        test_dc_score_{0u},
        test_dc_via_relay_pop_id_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramClientPingSampleReply_POP::CMsgSteamDatagramClientPingSampleReply_POP(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CMsgSteamDatagramClientPingSampleReply_POP_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CMsgSteamDatagramClientPingSampleReply_POPDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramClientPingSampleReply_POPDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramClientPingSampleReply_POPDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramClientPingSampleReply_POP _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramClientPingSampleReply_POPDefaultTypeInternal _CMsgSteamDatagramClientPingSampleReply_POP_default_instance_;

inline constexpr CMsgSteamDatagramNoConnection::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        from_identity_string_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        quality_relay_{nullptr},
        quality_e2e_{nullptr},
        p2p_routing_summary_{nullptr},
        legacy_from_steam_id_{::uint64_t{0u}},
        legacy_gameserver_relay_session_id_{0u},
        to_connection_id_{0u},
        from_connection_id_{0u},
        to_relay_session_id_{0u},
        routing_secret_{::uint64_t{0u}},
        from_relay_session_id_{0u},
        end_to_end_{false},
        not_primary_session_{false},
        not_primary_transport_{false},
        relay_override_active_{false},
        dummy_pad_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramNoConnection::CMsgSteamDatagramNoConnection(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CMsgSteamDatagramNoConnection_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CMsgSteamDatagramNoConnectionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramNoConnectionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramNoConnectionDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramNoConnection _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramNoConnectionDefaultTypeInternal _CMsgSteamDatagramNoConnection_default_instance_;

inline constexpr CMsgSteamDatagramConnectionStatsServerToRouter::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        ack_relay_{},
        legacy_ack_e2e_{},
        quality_relay_{nullptr},
        quality_e2e_{nullptr},
        seq_num_s2r_{0u},
        seq_num_e2e_{0u},
        relay_session_id_{0u},
        client_connection_id_{0u},
        flags_{0u},
        server_connection_id_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramConnectionStatsServerToRouter::CMsgSteamDatagramConnectionStatsServerToRouter(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CMsgSteamDatagramConnectionStatsServerToRouter_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CMsgSteamDatagramConnectionStatsServerToRouterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramConnectionStatsServerToRouterDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramConnectionStatsServerToRouterDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramConnectionStatsServerToRouter _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramConnectionStatsServerToRouterDefaultTypeInternal _CMsgSteamDatagramConnectionStatsServerToRouter_default_instance_;

inline constexpr CMsgSteamDatagramConnectionStatsRouterToServer::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        ack_relay_{},
        legacy_ack_e2e_{},
        client_identity_string_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        quality_relay_{nullptr},
        quality_e2e_{nullptr},
        seq_num_r2s_{0u},
        seq_num_e2e_{0u},
        legacy_client_steam_id_{::uint64_t{0u}},
        relay_session_id_{0u},
        client_connection_id_{0u},
        flags_{0u},
        server_connection_id_{0u},
        routing_secret_{::uint64_t{0u}} {}

template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramConnectionStatsRouterToServer::CMsgSteamDatagramConnectionStatsRouterToServer(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CMsgSteamDatagramConnectionStatsRouterToServer_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CMsgSteamDatagramConnectionStatsRouterToServerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramConnectionStatsRouterToServerDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramConnectionStatsRouterToServerDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramConnectionStatsRouterToServer _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramConnectionStatsRouterToServerDefaultTypeInternal _CMsgSteamDatagramConnectionStatsRouterToServer_default_instance_;

inline constexpr CMsgSteamDatagramConnectionStatsRouterToClient::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        ack_relay_{},
        legacy_ack_e2e_{},
        quality_relay_{nullptr},
        quality_e2e_{nullptr},
        seconds_until_shutdown_{0u},
        client_connection_id_{0u},
        seq_num_r2c_{0u},
        seq_num_e2e_{0u},
        migrate_request_ip_{0u},
        migrate_request_port_{0u},
        scoring_penalty_relay_cluster_{0u},
        flags_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramConnectionStatsRouterToClient::CMsgSteamDatagramConnectionStatsRouterToClient(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CMsgSteamDatagramConnectionStatsRouterToClient_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CMsgSteamDatagramConnectionStatsRouterToClientDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramConnectionStatsRouterToClientDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramConnectionStatsRouterToClientDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramConnectionStatsRouterToClient _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramConnectionStatsRouterToClientDefaultTypeInternal _CMsgSteamDatagramConnectionStatsRouterToClient_default_instance_;

inline constexpr CMsgSteamDatagramConnectionStatsP2PRouterToClient::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        ack_relay_{},
        legacy_ack_e2e_{},
        routes_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        quality_relay_{nullptr},
        quality_e2e_{nullptr},
        seconds_until_shutdown_{0u},
        migrate_request_ip_{0u},
        migrate_request_port_{0u},
        scoring_penalty_relay_cluster_{0u},
        flags_{0u},
        ack_forward_target_revision_{0u},
        ack_peer_routes_revision_{0u},
        connection_id_{0u},
        seq_num_r2c_{0u},
        seq_num_e2e_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramConnectionStatsP2PRouterToClient::CMsgSteamDatagramConnectionStatsP2PRouterToClient(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CMsgSteamDatagramConnectionStatsP2PRouterToClient_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CMsgSteamDatagramConnectionStatsP2PRouterToClientDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramConnectionStatsP2PRouterToClientDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramConnectionStatsP2PRouterToClientDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramConnectionStatsP2PRouterToClient _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramConnectionStatsP2PRouterToClientDefaultTypeInternal _CMsgSteamDatagramConnectionStatsP2PRouterToClient_default_instance_;

inline constexpr CMsgSteamDatagramConnectionStatsP2PClientToRouter::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        ack_relay_{},
        legacy_ack_e2e_{},
        forward_target_relay_routing_token_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        routes_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        quality_relay_{nullptr},
        quality_e2e_{nullptr},
        p2p_routing_summary_{nullptr},
        flags_{0u},
        forward_target_revision_{0u},
        ack_peer_routes_revision_{0u},
        connection_id_{0u},
        seq_num_c2r_{0u},
        seq_num_e2e_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramConnectionStatsP2PClientToRouter::CMsgSteamDatagramConnectionStatsP2PClientToRouter(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CMsgSteamDatagramConnectionStatsP2PClientToRouter_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CMsgSteamDatagramConnectionStatsP2PClientToRouterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramConnectionStatsP2PClientToRouterDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramConnectionStatsP2PClientToRouterDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramConnectionStatsP2PClientToRouter _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramConnectionStatsP2PClientToRouterDefaultTypeInternal _CMsgSteamDatagramConnectionStatsP2PClientToRouter_default_instance_;

inline constexpr CMsgSteamDatagramConnectionStatsClientToRouter::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        ack_relay_{},
        legacy_ack_e2e_{},
        quality_relay_{nullptr},
        quality_e2e_{nullptr},
        flags_{0u},
        client_connection_id_{0u},
        seq_num_c2r_{0u},
        seq_num_e2e_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramConnectionStatsClientToRouter::CMsgSteamDatagramConnectionStatsClientToRouter(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CMsgSteamDatagramConnectionStatsClientToRouter_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CMsgSteamDatagramConnectionStatsClientToRouterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramConnectionStatsClientToRouterDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramConnectionStatsClientToRouterDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramConnectionStatsClientToRouter _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramConnectionStatsClientToRouterDefaultTypeInternal _CMsgSteamDatagramConnectionStatsClientToRouter_default_instance_;

inline constexpr CMsgSteamDatagramConnectionClosed::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        debug_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        forward_target_relay_routing_token_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        from_identity_string_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        legacy_from_identity_binary_{nullptr},
        quality_relay_{nullptr},
        quality_e2e_{nullptr},
        p2p_routing_summary_{nullptr},
        legacy_from_steam_id_{::uint64_t{0u}},
        legacy_gameserver_relay_session_id_{0u},
        relay_mode_{static_cast< ::CMsgSteamDatagramConnectionClosed_ERelayMode >(0)},
        reason_code_{0u},
        to_connection_id_{0u},
        from_connection_id_{0u},
        to_relay_session_id_{0u},
        from_relay_session_id_{0u},
        forward_target_revision_{0u},
        routing_secret_{::uint64_t{0u}},
        not_primary_session_{false},
        not_primary_transport_{false},
        relay_override_active_{false} {}

template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramConnectionClosed::CMsgSteamDatagramConnectionClosed(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CMsgSteamDatagramConnectionClosed_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CMsgSteamDatagramConnectionClosedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramConnectionClosedDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramConnectionClosedDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramConnectionClosed _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramConnectionClosedDefaultTypeInternal _CMsgSteamDatagramConnectionClosed_default_instance_;

inline constexpr CMsgSteamDatagramClientPingSampleReply::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        pops_{},
        legacy_data_centers_{},
        tos_{nullptr},
        connection_id_{0u},
        relay_override_active_{false} {}

template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramClientPingSampleReply::CMsgSteamDatagramClientPingSampleReply(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CMsgSteamDatagramClientPingSampleReply_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CMsgSteamDatagramClientPingSampleReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramClientPingSampleReplyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramClientPingSampleReplyDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramClientPingSampleReply _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramClientPingSampleReplyDefaultTypeInternal _CMsgSteamDatagramClientPingSampleReply_default_instance_;
static const ::_pb::EnumDescriptor* PROTOBUF_NONNULL
    file_level_enum_descriptors_steamdatagram_5fmessages_5fsdr_2eproto[10];
static constexpr const ::_pb::ServiceDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_service_descriptors_steamdatagram_5fmessages_5fsdr_2eproto = nullptr;
const ::uint32_t
    TableStruct_steamdatagram_5fmessages_5fsdr_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingIPAddress, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingIPAddress, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingIPAddress, _impl_.v4_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingIPAddress, _impl_.v6_),
        1,
        0,
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramSignedMessageGeneric, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramSignedMessageGeneric, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramSignedMessageGeneric, _impl_.cert_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramSignedMessageGeneric, _impl_.signed_data_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramSignedMessageGeneric, _impl_.signature_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramSignedMessageGeneric, _impl_.dummy_pad_),
        3,
        0,
        1,
        2,
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply_RouteException, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply_RouteException, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply_RouteException, _impl_.data_center_id_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply_RouteException, _impl_.flags_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply_RouteException, _impl_.penalty_),
        0,
        1,
        2,
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply_AltAddress, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply_AltAddress, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply_AltAddress, _impl_.ipv4_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply_AltAddress, _impl_.port_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply_AltAddress, _impl_.penalty_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply_AltAddress, _impl_.protocol_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply_AltAddress, _impl_.id_),
        1,
        2,
        3,
        4,
        0,
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply, _impl_.client_timestamp_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply, _impl_.latency_datacenter_ids_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply, _impl_.latency_ping_ms_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply, _impl_.latency_datacenter_ids_p2p_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply, _impl_.latency_ping_ms_p2p_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply, _impl_.your_public_ip_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply, _impl_.your_public_port_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply, _impl_.server_time_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply, _impl_.challenge_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply, _impl_.seconds_until_shutdown_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply, _impl_.client_cookie_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply, _impl_.recv_tos_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply, _impl_.echo_sent_tos_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply, _impl_.sent_tos_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply, _impl_.echo_request_reply_tos_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply, _impl_.scoring_penalty_relay_cluster_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply, _impl_.flags_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply, _impl_.route_exceptions_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply, _impl_.alt_addresses_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply, _impl_.dummy_pad_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramRouterPingReply, _impl_.dummy_varint_),
        1,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        2,
        8,
        4,
        3,
        5,
        6,
        10,
        11,
        12,
        13,
        7,
        9,
        ~0u,
        ~0u,
        0,
        14,
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingRequestBody, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingRequestBody, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingRequestBody, _impl_.relay_popid_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingRequestBody, _impl_.your_public_ip_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingRequestBody, _impl_.your_public_port_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingRequestBody, _impl_.relay_unix_time_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingRequestBody, _impl_.routing_secret_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingRequestBody, _impl_.my_ips_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingRequestBody, _impl_.echo_),
        2,
        1,
        3,
        4,
        5,
        ~0u,
        0,
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingRequestEnvelope, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingRequestEnvelope, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingRequestEnvelope, _impl_.cert_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingRequestEnvelope, _impl_.signed_data_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingRequestEnvelope, _impl_.signature_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingRequestEnvelope, _impl_.legacy_your_public_ip_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingRequestEnvelope, _impl_.legacy_your_public_port_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingRequestEnvelope, _impl_.legacy_relay_unix_time_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingRequestEnvelope, _impl_.legacy_challenge_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingRequestEnvelope, _impl_.legacy_router_timestamp_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingRequestEnvelope, _impl_.dummy_pad_),
        3,
        0,
        1,
        4,
        8,
        5,
        6,
        7,
        2,
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingReplyData, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingReplyData, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingReplyData, _impl_.echo_relay_unix_time_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingReplyData, _impl_.echo_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingReplyData, _impl_.legacy_challenge_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingReplyData, _impl_.legacy_router_timestamp_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingReplyData, _impl_.data_center_id_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingReplyData, _impl_.appid_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingReplyData, _impl_.protocol_version_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingReplyData, _impl_.build_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingReplyData, _impl_.network_config_version_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingReplyData, _impl_.my_unix_time_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverPingReplyData, _impl_.routing_blob_),
        4,
        0,
        3,
        5,
        6,
        7,
        8,
        1,
        10,
        9,
        2,
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoSessionRelayToClient, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoSessionRelayToClient, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoSessionRelayToClient, _impl_.connection_id_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoSessionRelayToClient, _impl_.your_public_ip_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoSessionRelayToClient, _impl_.your_public_port_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoSessionRelayToClient, _impl_.server_time_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoSessionRelayToClient, _impl_.challenge_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoSessionRelayToClient, _impl_.seconds_until_shutdown_),
        5,
        0,
        4,
        1,
        2,
        3,
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoSessionRelayToPeer, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoSessionRelayToPeer, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoSessionRelayToPeer, _impl_.legacy_relay_session_id_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoSessionRelayToPeer, _impl_.from_relay_session_id_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoSessionRelayToPeer, _impl_.from_connection_id_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoSessionRelayToPeer, _impl_.kludge_pad_),
        0,
        1,
        3,
        2,
        PROTOBUF_FIELD_OFFSET(::CMsgTOSTreatment, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CMsgTOSTreatment, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CMsgTOSTreatment, _impl_.l4s_detect_),
        PROTOBUF_FIELD_OFFSET(::CMsgTOSTreatment, _impl_.up_ecn1_),
        PROTOBUF_FIELD_OFFSET(::CMsgTOSTreatment, _impl_.down_dscp45_),
        0,
        1,
        2,
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleRequest, _impl_.connection_id_),
        0,
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_POP_AltAddress, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_POP_AltAddress, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_POP_AltAddress, _impl_.id_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_POP_AltAddress, _impl_.front_ping_ms_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_POP_AltAddress, _impl_.penalty_),
        0,
        1,
        2,
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_POP, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_POP, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_POP, _impl_.pop_id_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_POP, _impl_.default_front_ping_ms_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_POP, _impl_.cluster_penalty_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_POP, _impl_.alt_addresses_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_POP, _impl_.default_e2e_ping_ms_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_POP, _impl_.default_e2e_score_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_POP, _impl_.p2p_via_peer_relay_pop_id_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_POP, _impl_.best_dc_ping_ms_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_POP, _impl_.best_dc_score_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_POP, _impl_.best_dc_via_relay_pop_id_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_POP, _impl_.default_dc_ping_ms_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_POP, _impl_.default_dc_score_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_POP, _impl_.default_dc_via_relay_pop_id_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_POP, _impl_.test_dc_ping_ms_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_POP, _impl_.test_dc_score_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_POP, _impl_.test_dc_via_relay_pop_id_),
        0,
        1,
        3,
        ~0u,
        2,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter, _impl_.data_center_id_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter, _impl_.best_dc_via_relay_pop_id_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter, _impl_.best_dc_ping_ms_),
        0,
        1,
        2,
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply, _impl_.connection_id_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply, _impl_.relay_override_active_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply, _impl_.tos_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply, _impl_.pops_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientPingSampleReply, _impl_.legacy_data_centers_),
        1,
        2,
        0,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, _impl_.score_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, _impl_.front_ping_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, _impl_.back_ping_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, _impl_.seconds_until_down_),
        0,
        1,
        2,
        3,
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary, _impl_.connection_id_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary, _impl_.from_ip_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary, _impl_.from_port_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary, _impl_.from_router_cluster_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary, _impl_.from_active_time_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary, _impl_.from_active_packets_recv_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary, _impl_.from_dropped_reason_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary, _impl_.gap_ms_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary, _impl_.from_quality_now_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary, _impl_.to_quality_now_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary, _impl_.from_quality_then_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramClientSwitchedPrimary, _impl_.to_quality_then_),
        5,
        6,
        7,
        8,
        9,
        10,
        0,
        11,
        1,
        2,
        3,
        4,
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectRequest, _impl_.connection_id_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectRequest, _impl_.my_timestamp_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectRequest, _impl_.ping_est_ms_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectRequest, _impl_.virtual_port_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectRequest, _impl_.gameserver_relay_session_id_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectRequest, _impl_.crypt_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectRequest, _impl_.cert_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectRequest, _impl_.routing_secret_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectRequest, _impl_.legacy_client_steam_id_),
        2,
        5,
        6,
        7,
        3,
        0,
        1,
        8,
        4,
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectOK, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectOK, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectOK, _impl_.client_connection_id_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectOK, _impl_.server_connection_id_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectOK, _impl_.your_timestamp_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectOK, _impl_.delay_time_usec_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectOK, _impl_.gameserver_relay_session_id_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectOK, _impl_.crypt_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectOK, _impl_.cert_),
        2,
        6,
        4,
        5,
        3,
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PSDRRoutingSummary, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.initial_ping_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.initial_ping_front_local_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.initial_ping_front_remote_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.initial_score_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.initial_pop_local_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.initial_pop_remote_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.best_ping_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.best_ping_front_local_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.best_ping_front_remote_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.best_score_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.best_pop_local_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.best_pop_remote_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.best_time_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.negotiation_ms_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.selected_seconds_),
        0,
        1,
        2,
        3,
        4,
        5,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        6,
        7,
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PRoutingSummary, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PRoutingSummary, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PRoutingSummary, _impl_.ice_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PRoutingSummary, _impl_.sdr_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionClosed, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionClosed, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionClosed, _impl_.to_connection_id_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionClosed, _impl_.from_connection_id_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionClosed, _impl_.from_identity_string_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionClosed, _impl_.legacy_from_identity_binary_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionClosed, _impl_.legacy_from_steam_id_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionClosed, _impl_.legacy_gameserver_relay_session_id_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionClosed, _impl_.to_relay_session_id_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionClosed, _impl_.from_relay_session_id_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionClosed, _impl_.forward_target_relay_routing_token_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionClosed, _impl_.forward_target_revision_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionClosed, _impl_.relay_mode_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionClosed, _impl_.debug_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionClosed, _impl_.reason_code_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionClosed, _impl_.routing_secret_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionClosed, _impl_.not_primary_session_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionClosed, _impl_.not_primary_transport_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionClosed, _impl_.relay_override_active_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionClosed, _impl_.quality_relay_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionClosed, _impl_.quality_e2e_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionClosed, _impl_.p2p_routing_summary_),
        11,
        12,
        2,
        3,
        7,
        8,
        13,
        14,
        1,
        15,
        9,
        0,
        10,
        16,
        17,
        18,
        19,
        4,
        5,
        6,
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoConnection, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoConnection, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoConnection, _impl_.to_connection_id_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoConnection, _impl_.from_connection_id_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoConnection, _impl_.legacy_gameserver_relay_session_id_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoConnection, _impl_.to_relay_session_id_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoConnection, _impl_.from_relay_session_id_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoConnection, _impl_.from_identity_string_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoConnection, _impl_.legacy_from_steam_id_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoConnection, _impl_.end_to_end_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoConnection, _impl_.not_primary_session_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoConnection, _impl_.not_primary_transport_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoConnection, _impl_.relay_override_active_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoConnection, _impl_.quality_relay_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoConnection, _impl_.quality_e2e_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoConnection, _impl_.p2p_routing_summary_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoConnection, _impl_.routing_secret_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramNoConnection, _impl_.dummy_pad_),
        6,
        7,
        5,
        8,
        10,
        0,
        4,
        11,
        12,
        13,
        14,
        1,
        2,
        3,
        9,
        15,
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionRequest, _impl_.ticket_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionRequest, _impl_.challenge_time_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionRequest, _impl_.challenge_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionRequest, _impl_.client_connection_id_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionRequest, _impl_.server_connection_id_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionRequest, _impl_.network_config_version_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionRequest, _impl_.protocol_version_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionRequest, _impl_.platform_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionRequest, _impl_.build_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionRequest, _impl_.dev_gameserver_identity_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionRequest, _impl_.dev_client_cert_),
        0,
        6,
        5,
        7,
        10,
        8,
        9,
        1,
        2,
        3,
        4,
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionEstablished, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionEstablished, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionEstablished, _impl_.connection_id_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionEstablished, _impl_.gameserver_identity_string_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionEstablished, _impl_.seconds_until_shutdown_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionEstablished, _impl_.seq_num_r2c_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionEstablished, _impl_.dummy_legacy_identity_binary_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramGameserverSessionEstablished, _impl_.legacy_gameserver_steamid_),
        2,
        0,
        3,
        5,
        1,
        4,
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsClientToRouter, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsClientToRouter, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsClientToRouter, _impl_.quality_relay_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsClientToRouter, _impl_.quality_e2e_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsClientToRouter, _impl_.ack_relay_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsClientToRouter, _impl_.legacy_ack_e2e_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsClientToRouter, _impl_.flags_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsClientToRouter, _impl_.client_connection_id_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsClientToRouter, _impl_.seq_num_c2r_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsClientToRouter, _impl_.seq_num_e2e_),
        0,
        1,
        ~0u,
        ~0u,
        2,
        3,
        4,
        5,
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToClient, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToClient, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.quality_relay_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.quality_e2e_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.seconds_until_shutdown_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.migrate_request_ip_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.migrate_request_port_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.scoring_penalty_relay_cluster_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.ack_relay_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.legacy_ack_e2e_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.flags_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.client_connection_id_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.seq_num_r2c_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.seq_num_e2e_),
        0,
        1,
        2,
        6,
        7,
        8,
        ~0u,
        ~0u,
        9,
        3,
        4,
        5,
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToServer, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToServer, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.quality_relay_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.quality_e2e_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.ack_relay_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.legacy_ack_e2e_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.flags_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.seq_num_r2s_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.seq_num_e2e_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.client_identity_string_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.legacy_client_steam_id_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.relay_session_id_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.client_connection_id_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.server_connection_id_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.routing_secret_),
        1,
        2,
        ~0u,
        ~0u,
        8,
        3,
        4,
        0,
        5,
        6,
        7,
        9,
        10,
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsServerToRouter, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsServerToRouter, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.quality_relay_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.quality_e2e_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.ack_relay_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.legacy_ack_e2e_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.flags_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.seq_num_s2r_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.seq_num_e2e_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.relay_session_id_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.client_connection_id_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.server_connection_id_),
        0,
        1,
        ~0u,
        ~0u,
        6,
        2,
        3,
        4,
        5,
        7,
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionRequestBody_EncryptedData, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionRequestBody_EncryptedData, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionRequestBody_EncryptedData, _impl_.peer_identity_string_),
        0,
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionRequestBody, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionRequestBody, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionRequestBody, _impl_.challenge_time_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionRequestBody, _impl_.challenge_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionRequestBody, _impl_.client_connection_id_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionRequestBody, _impl_.legacy_peer_steam_id_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionRequestBody, _impl_.peer_identity_string_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionRequestBody, _impl_.peer_connection_id_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionRequestBody, _impl_.encrypted_data_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionRequestBody, _impl_.encryption_your_public_key_lead_byte_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionRequestBody, _impl_.encryption_my_ephemeral_public_key_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionRequestBody, _impl_.protocol_version_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionRequestBody, _impl_.network_config_version_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionRequestBody, _impl_.platform_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionRequestBody, _impl_.build_),
        6,
        5,
        7,
        8,
        0,
        9,
        3,
        12,
        4,
        10,
        11,
        1,
        2,
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionRequest, _impl_.cert_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionRequest, _impl_.body_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionRequest, _impl_.signature_),
        2,
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionEstablished, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionEstablished, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionEstablished, _impl_.connection_id_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionEstablished, _impl_.seconds_until_shutdown_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionEstablished, _impl_.relay_routing_token_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PSessionEstablished, _impl_.seq_num_r2c_),
        1,
        2,
        0,
        3,
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PClientToRouter, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.quality_relay_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.quality_e2e_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.p2p_routing_summary_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.ack_relay_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.legacy_ack_e2e_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.flags_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.forward_target_relay_routing_token_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.forward_target_revision_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.routes_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.ack_peer_routes_revision_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.connection_id_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.seq_num_c2r_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.seq_num_e2e_),
        2,
        3,
        4,
        ~0u,
        ~0u,
        5,
        0,
        6,
        1,
        7,
        8,
        9,
        10,
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PRouterToClient, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.quality_relay_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.quality_e2e_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.seconds_until_shutdown_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.migrate_request_ip_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.migrate_request_port_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.scoring_penalty_relay_cluster_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.ack_relay_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.legacy_ack_e2e_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.flags_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.ack_forward_target_revision_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.routes_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.ack_peer_routes_revision_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.connection_id_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.seq_num_r2c_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.seq_num_e2e_),
        1,
        2,
        3,
        4,
        5,
        6,
        ~0u,
        ~0u,
        7,
        8,
        0,
        9,
        10,
        11,
        12,
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PBadRouteRouterToClient, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PBadRouteRouterToClient, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PBadRouteRouterToClient, _impl_.connection_id_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PBadRouteRouterToClient, _impl_.failed_relay_routing_token_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PBadRouteRouterToClient, _impl_.ack_forward_target_revision_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PBadRouteRouterToClient, _impl_.kludge_pad_),
        1,
        0,
        2,
        3,
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PRoutes_RelayCluster, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PRoutes_RelayCluster, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PRoutes_RelayCluster, _impl_.pop_id_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PRoutes_RelayCluster, _impl_.ping_ms_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PRoutes_RelayCluster, _impl_.score_penalty_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PRoutes_RelayCluster, _impl_.session_relay_routing_token_),
        1,
        2,
        3,
        0,
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PRoutes_Route, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PRoutes_Route, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PRoutes_Route, _impl_.my_pop_id_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PRoutes_Route, _impl_.your_pop_id_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PRoutes_Route, _impl_.legacy_score_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PRoutes_Route, _impl_.interior_score_),
        0,
        1,
        2,
        3,
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PRoutes, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PRoutes, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PRoutes, _impl_.relay_clusters_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PRoutes, _impl_.routes_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramP2PRoutes, _impl_.revision_),
        ~0u,
        ~0u,
        0,
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramSetSecondaryAddressRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramSetSecondaryAddressRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramSetSecondaryAddressRequest, _impl_.client_main_ip_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramSetSecondaryAddressRequest, _impl_.client_main_port_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramSetSecondaryAddressRequest, _impl_.client_connection_id_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramSetSecondaryAddressRequest, _impl_.client_identity_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramSetSecondaryAddressRequest, _impl_.request_send_duplication_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramSetSecondaryAddressRequest, _impl_.kludge_pad_),
        2,
        3,
        4,
        0,
        5,
        1,
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramSetSecondaryAddressResult, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramSetSecondaryAddressResult, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramSetSecondaryAddressResult, _impl_.success_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramSetSecondaryAddressResult, _impl_.message_),
        1,
        0,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 10, -1, sizeof(::CMsgSteamNetworkingIPAddress)},
        {12, 24, -1, sizeof(::CMsgSteamDatagramSignedMessageGeneric)},
        {28, 39, -1, sizeof(::CMsgSteamDatagramRouterPingReply_RouteException)},
        {42, 55, -1, sizeof(::CMsgSteamDatagramRouterPingReply_AltAddress)},
        {60, 89, -1, sizeof(::CMsgSteamDatagramRouterPingReply)},
        {110, 125, -1, sizeof(::CMsgSteamDatagramGameserverPingRequestBody)},
        {132, 149, -1, sizeof(::CMsgSteamDatagramGameserverPingRequestEnvelope)},
        {158, 177, -1, sizeof(::CMsgSteamDatagramGameserverPingReplyData)},
        {188, 202, -1, sizeof(::CMsgSteamDatagramNoSessionRelayToClient)},
        {208, 220, -1, sizeof(::CMsgSteamDatagramNoSessionRelayToPeer)},
        {224, 235, -1, sizeof(::CMsgTOSTreatment)},
        {238, 247, -1, sizeof(::CMsgSteamDatagramClientPingSampleRequest)},
        {248, 259, -1, sizeof(::CMsgSteamDatagramClientPingSampleReply_POP_AltAddress)},
        {262, 286, -1, sizeof(::CMsgSteamDatagramClientPingSampleReply_POP)},
        {302, 313, -1, sizeof(::CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter)},
        {316, 329, -1, sizeof(::CMsgSteamDatagramClientPingSampleReply)},
        {334, 346, -1, sizeof(::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality)},
        {350, 370, -1, sizeof(::CMsgSteamDatagramClientSwitchedPrimary)},
        {382, 399, -1, sizeof(::CMsgSteamDatagramConnectRequest)},
        {408, 423, -1, sizeof(::CMsgSteamDatagramConnectOK)},
        {430, 453, -1, sizeof(::CMsgSteamNetworkingP2PSDRRoutingSummary)},
        {468, 478, -1, sizeof(::CMsgSteamDatagramP2PRoutingSummary)},
        {480, 508, -1, sizeof(::CMsgSteamDatagramConnectionClosed)},
        {528, 552, -1, sizeof(::CMsgSteamDatagramNoConnection)},
        {568, 587, -1, sizeof(::CMsgSteamDatagramGameserverSessionRequest)},
        {598, 612, -1, sizeof(::CMsgSteamDatagramGameserverSessionEstablished)},
        {618, 634, -1, sizeof(::CMsgSteamDatagramConnectionStatsClientToRouter)},
        {642, 662, -1, sizeof(::CMsgSteamDatagramConnectionStatsRouterToClient)},
        {674, 695, -1, sizeof(::CMsgSteamDatagramConnectionStatsRouterToServer)},
        {708, 726, -1, sizeof(::CMsgSteamDatagramConnectionStatsServerToRouter)},
        {736, 745, -1, sizeof(::CMsgSteamDatagramP2PSessionRequestBody_EncryptedData)},
        {746, 767, -1, sizeof(::CMsgSteamDatagramP2PSessionRequestBody)},
        {780, 791, -1, sizeof(::CMsgSteamDatagramP2PSessionRequest)},
        {794, 806, -1, sizeof(::CMsgSteamDatagramP2PSessionEstablished)},
        {810, 831, -1, sizeof(::CMsgSteamDatagramConnectionStatsP2PClientToRouter)},
        {844, 867, -1, sizeof(::CMsgSteamDatagramConnectionStatsP2PRouterToClient)},
        {882, 894, -1, sizeof(::CMsgSteamDatagramP2PBadRouteRouterToClient)},
        {898, 910, -1, sizeof(::CMsgSteamDatagramP2PRoutes_RelayCluster)},
        {914, 926, -1, sizeof(::CMsgSteamDatagramP2PRoutes_Route)},
        {930, 941, -1, sizeof(::CMsgSteamDatagramP2PRoutes)},
        {944, 958, -1, sizeof(::CMsgSteamDatagramSetSecondaryAddressRequest)},
        {964, 974, -1, sizeof(::CMsgSteamDatagramSetSecondaryAddressResult)},
};
static const ::_pb::Message* PROTOBUF_NONNULL const file_default_instances[] = {
    &::_CMsgSteamNetworkingIPAddress_default_instance_._instance,
    &::_CMsgSteamDatagramSignedMessageGeneric_default_instance_._instance,
    &::_CMsgSteamDatagramRouterPingReply_RouteException_default_instance_._instance,
    &::_CMsgSteamDatagramRouterPingReply_AltAddress_default_instance_._instance,
    &::_CMsgSteamDatagramRouterPingReply_default_instance_._instance,
    &::_CMsgSteamDatagramGameserverPingRequestBody_default_instance_._instance,
    &::_CMsgSteamDatagramGameserverPingRequestEnvelope_default_instance_._instance,
    &::_CMsgSteamDatagramGameserverPingReplyData_default_instance_._instance,
    &::_CMsgSteamDatagramNoSessionRelayToClient_default_instance_._instance,
    &::_CMsgSteamDatagramNoSessionRelayToPeer_default_instance_._instance,
    &::_CMsgTOSTreatment_default_instance_._instance,
    &::_CMsgSteamDatagramClientPingSampleRequest_default_instance_._instance,
    &::_CMsgSteamDatagramClientPingSampleReply_POP_AltAddress_default_instance_._instance,
    &::_CMsgSteamDatagramClientPingSampleReply_POP_default_instance_._instance,
    &::_CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter_default_instance_._instance,
    &::_CMsgSteamDatagramClientPingSampleReply_default_instance_._instance,
    &::_CMsgSteamDatagramClientSwitchedPrimary_RouterQuality_default_instance_._instance,
    &::_CMsgSteamDatagramClientSwitchedPrimary_default_instance_._instance,
    &::_CMsgSteamDatagramConnectRequest_default_instance_._instance,
    &::_CMsgSteamDatagramConnectOK_default_instance_._instance,
    &::_CMsgSteamNetworkingP2PSDRRoutingSummary_default_instance_._instance,
    &::_CMsgSteamDatagramP2PRoutingSummary_default_instance_._instance,
    &::_CMsgSteamDatagramConnectionClosed_default_instance_._instance,
    &::_CMsgSteamDatagramNoConnection_default_instance_._instance,
    &::_CMsgSteamDatagramGameserverSessionRequest_default_instance_._instance,
    &::_CMsgSteamDatagramGameserverSessionEstablished_default_instance_._instance,
    &::_CMsgSteamDatagramConnectionStatsClientToRouter_default_instance_._instance,
    &::_CMsgSteamDatagramConnectionStatsRouterToClient_default_instance_._instance,
    &::_CMsgSteamDatagramConnectionStatsRouterToServer_default_instance_._instance,
    &::_CMsgSteamDatagramConnectionStatsServerToRouter_default_instance_._instance,
    &::_CMsgSteamDatagramP2PSessionRequestBody_EncryptedData_default_instance_._instance,
    &::_CMsgSteamDatagramP2PSessionRequestBody_default_instance_._instance,
    &::_CMsgSteamDatagramP2PSessionRequest_default_instance_._instance,
    &::_CMsgSteamDatagramP2PSessionEstablished_default_instance_._instance,
    &::_CMsgSteamDatagramConnectionStatsP2PClientToRouter_default_instance_._instance,
    &::_CMsgSteamDatagramConnectionStatsP2PRouterToClient_default_instance_._instance,
    &::_CMsgSteamDatagramP2PBadRouteRouterToClient_default_instance_._instance,
    &::_CMsgSteamDatagramP2PRoutes_RelayCluster_default_instance_._instance,
    &::_CMsgSteamDatagramP2PRoutes_Route_default_instance_._instance,
    &::_CMsgSteamDatagramP2PRoutes_default_instance_._instance,
    &::_CMsgSteamDatagramSetSecondaryAddressRequest_default_instance_._instance,
    &::_CMsgSteamDatagramSetSecondaryAddressResult_default_instance_._instance,
};
const char descriptor_table_protodef_steamdatagram_5fmessages_5fsdr_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n steamdatagram_messages_sdr.proto\032+stea"
    "mnetworkingsockets_messages_certs.proto\032"
    "%steamnetworkingsockets_messages.proto\"6"
    "\n\034CMsgSteamNetworkingIPAddress\022\n\n\002v4\030\001 \001"
    "(\007\022\n\n\002v6\030\002 \001(\014\"\226\001\n%CMsgSteamDatagramSign"
    "edMessageGeneric\0221\n\004cert\030\001 \001(\0132#.CMsgSte"
    "amDatagramCertificateSigned\022\023\n\013signed_da"
    "ta\030\002 \001(\014\022\021\n\tsignature\030\003 \001(\014\022\022\n\tdummy_pad"
    "\030\377\007 \001(\014\"\375\007\n CMsgSteamDatagramRouterPingR"
    "eply\022\030\n\020client_timestamp\030\001 \001(\007\022\"\n\026latenc"
    "y_datacenter_ids\030\002 \003(\007B\002\020\001\022\033\n\017latency_pi"
    "ng_ms\030\003 \003(\rB\002\020\001\022&\n\032latency_datacenter_id"
    "s_p2p\030\016 \003(\007B\002\020\001\022\037\n\023latency_ping_ms_p2p\030\017"
    " \003(\rB\002\020\001\022\026\n\016your_public_ip\030\004 \001(\007\022\030\n\020your"
    "_public_port\030\013 \001(\007\022\023\n\013server_time\030\005 \001(\007\022"
    "\021\n\tchallenge\030\006 \001(\006\022\036\n\026seconds_until_shut"
    "down\030\007 \001(\r\022\025\n\rclient_cookie\030\010 \001(\007\022\020\n\010rec"
    "v_tos\030\020 \001(\r\022\025\n\recho_sent_tos\030\021 \001(\r\022\020\n\010se"
    "nt_tos\030\022 \001(\r\022\036\n\026echo_request_reply_tos\030\023"
    " \001(\r\022%\n\035scoring_penalty_relay_cluster\030\t "
    "\001(\r\022\r\n\005flags\030\014 \001(\r\022J\n\020route_exceptions\030\n"
    " \003(\01320.CMsgSteamDatagramRouterPingReply."
    "RouteException\022C\n\ralt_addresses\030\r \003(\0132,."
    "CMsgSteamDatagramRouterPingReply.AltAddr"
    "ess\022\021\n\tdummy_pad\030c \001(\014\022\024\n\014dummy_varint\030d"
    " \001(\004\032H\n\016RouteException\022\026\n\016data_center_id"
    "\030\001 \001(\007\022\r\n\005flags\030\002 \001(\r\022\017\n\007penalty\030\003 \001(\r\032\300"
    "\001\n\nAltAddress\022\014\n\004ipv4\030\001 \001(\007\022\014\n\004port\030\002 \001("
    "\r\022\017\n\007penalty\030\003 \001(\r\022X\n\010protocol\030\004 \001(\01625.C"
    "MsgSteamDatagramRouterPingReply.AltAddre"
    "ss.Protocol:\017DefaultProtocol\022\n\n\002id\030\005 \001(\t"
    "\"\037\n\010Protocol\022\023\n\017DefaultProtocol\020\000\"L\n\005Fla"
    "gs\022 \n\034FLAG_MAYBE_MORE_DATA_CENTERS\020\001\022!\n\035"
    "FLAG_MAYBE_MORE_ALT_ADDRESSES\020\002\"\200\002\n*CMsg"
    "SteamDatagramGameserverPingRequestBody\022\023"
    "\n\013relay_popid\030\001 \001(\007\0225\n\016your_public_ip\030\002 "
    "\001(\0132\035.CMsgSteamNetworkingIPAddress\022\030\n\020yo"
    "ur_public_port\030\003 \001(\r\022\027\n\017relay_unix_time\030"
    "\004 \001(\004\022\026\n\016routing_secret\030\005 \001(\006\022-\n\006my_ips\030"
    "\006 \003(\0132\035.CMsgSteamNetworkingIPAddress\022\014\n\004"
    "echo\030\010 \001(\014\"\272\002\n.CMsgSteamDatagramGameserv"
    "erPingRequestEnvelope\0221\n\004cert\030\006 \001(\0132#.CM"
    "sgSteamDatagramCertificateSigned\022\023\n\013sign"
    "ed_data\030\007 \001(\014\022\021\n\tsignature\030\010 \001(\014\022\035\n\025lega"
    "cy_your_public_ip\030\001 \001(\007\022\037\n\027legacy_your_p"
    "ublic_port\030\005 \001(\007\022\036\n\026legacy_relay_unix_ti"
    "me\030\002 \001(\007\022\030\n\020legacy_challenge\030\003 \001(\006\022\037\n\027le"
    "gacy_router_timestamp\030\004 \001(\007\022\022\n\tdummy_pad"
    "\030\377\007 \001(\014\"\255\002\n(CMsgSteamDatagramGameserverP"
    "ingReplyData\022\034\n\024echo_relay_unix_time\030\002 \001"
    "(\007\022\014\n\004echo\030\010 \001(\014\022\030\n\020legacy_challenge\030\003 \001"
    "(\006\022\037\n\027legacy_router_timestamp\030\004 \001(\007\022\026\n\016d"
    "ata_center_id\030\005 \001(\007\022\r\n\005appid\030\006 \001(\r\022\030\n\020pr"
    "otocol_version\030\007 \001(\r\022\r\n\005build\030\t \001(\t\022\036\n\026n"
    "etwork_config_version\030\n \001(\004\022\024\n\014my_unix_t"
    "ime\030\013 \001(\007\022\024\n\014routing_blob\030\014 \001(\014\"\272\001\n\'CMsg"
    "SteamDatagramNoSessionRelayToClient\022\025\n\rc"
    "onnection_id\030\007 \001(\007\022\026\n\016your_public_ip\030\002 \001"
    "(\007\022\030\n\020your_public_port\030\006 \001(\007\022\023\n\013server_t"
    "ime\030\003 \001(\007\022\021\n\tchallenge\030\004 \001(\006\022\036\n\026seconds_"
    "until_shutdown\030\005 \001(\r\"\227\001\n%CMsgSteamDatagr"
    "amNoSessionRelayToPeer\022\037\n\027legacy_relay_s"
    "ession_id\030\001 \001(\r\022\035\n\025from_relay_session_id"
    "\030\002 \001(\007\022\032\n\022from_connection_id\030\007 \001(\007\022\022\n\nkl"
    "udge_pad\030c \001(\006\"L\n\020CMsgTOSTreatment\022\022\n\nl4"
    "s_detect\030\001 \001(\t\022\017\n\007up_ecn1\030\002 \001(\t\022\023\n\013down_"
    "dscp45\030\003 \001(\t\"A\n(CMsgSteamDatagramClientP"
    "ingSampleRequest\022\025\n\rconnection_id\030\001 \001(\007\""
    "\262\007\n&CMsgSteamDatagramClientPingSampleRep"
    "ly\022\025\n\rconnection_id\030\001 \001(\007\022\035\n\025relay_overr"
    "ide_active\030\005 \001(\010\022\036\n\003tos\030\006 \001(\0132\021.CMsgTOST"
    "reatment\0229\n\004pops\030\002 \003(\0132+.CMsgSteamDatagr"
    "amClientPingSampleReply.POP\022U\n\023legacy_da"
    "ta_centers\030\003 \003(\01328.CMsgSteamDatagramClie"
    "ntPingSampleReply.LegacyDataCenter\032\270\004\n\003P"
    "OP\022\016\n\006pop_id\030\001 \001(\007\022\035\n\025default_front_ping"
    "_ms\030\002 \001(\r\022\027\n\017cluster_penalty\030\004 \001(\r\022M\n\ral"
    "t_addresses\030\007 \003(\01326.CMsgSteamDatagramCli"
    "entPingSampleReply.POP.AltAddress\022\033\n\023def"
    "ault_e2e_ping_ms\030\003 \001(\r\022\031\n\021default_e2e_sc"
    "ore\030\005 \001(\r\022!\n\031p2p_via_peer_relay_pop_id\030\006"
    " \001(\007\022\027\n\017best_dc_ping_ms\030\t \001(\r\022\025\n\rbest_dc"
    "_score\030\n \001(\r\022 \n\030best_dc_via_relay_pop_id"
    "\030\013 \001(\007\022\032\n\022default_dc_ping_ms\030\014 \001(\r\022\030\n\020de"
    "fault_dc_score\030\r \001(\r\022#\n\033default_dc_via_r"
    "elay_pop_id\030\016 \001(\007\022\027\n\017test_dc_ping_ms\030\017 \001"
    "(\r\022\025\n\rtest_dc_score\030\020 \001(\r\022 \n\030test_dc_via"
    "_relay_pop_id\030\021 \001(\007\032@\n\nAltAddress\022\n\n\002id\030"
    "\001 \001(\t\022\025\n\rfront_ping_ms\030\002 \001(\r\022\017\n\007penalty\030"
    "\003 \001(\r\032e\n\020LegacyDataCenter\022\026\n\016data_center"
    "_id\030\001 \001(\007\022 \n\030best_dc_via_relay_pop_id\030\002 "
    "\001(\007\022\027\n\017best_dc_ping_ms\030\003 \001(\r\"\216\005\n&CMsgSte"
    "amDatagramClientSwitchedPrimary\022\025\n\rconne"
    "ction_id\030\001 \001(\007\022\017\n\007from_ip\030\002 \001(\007\022\021\n\tfrom_"
    "port\030\003 \001(\r\022\033\n\023from_router_cluster\030\004 \001(\007\022"
    "\030\n\020from_active_time\030\005 \001(\r\022 \n\030from_active"
    "_packets_recv\030\006 \001(\r\022\033\n\023from_dropped_reas"
    "on\030\007 \001(\t\022\016\n\006gap_ms\030\010 \001(\r\022O\n\020from_quality"
    "_now\030\t \001(\01325.CMsgSteamDatagramClientSwit"
    "chedPrimary.RouterQuality\022M\n\016to_quality_"
    "now\030\n \001(\01325.CMsgSteamDatagramClientSwitc"
    "hedPrimary.RouterQuality\022P\n\021from_quality"
    "_then\030\013 \001(\01325.CMsgSteamDatagramClientSwi"
    "tchedPrimary.RouterQuality\022N\n\017to_quality"
    "_then\030\014 \001(\01325.CMsgSteamDatagramClientSwi"
    "tchedPrimary.RouterQuality\032a\n\rRouterQual"
    "ity\022\r\n\005score\030\001 \001(\r\022\022\n\nfront_ping\030\002 \001(\r\022\021"
    "\n\tback_ping\030\003 \001(\r\022\032\n\022seconds_until_down\030"
    "\004 \001(\r\"\302\002\n\037CMsgSteamDatagramConnectReques"
    "t\022\025\n\rconnection_id\030\001 \001(\007\022\024\n\014my_timestamp"
    "\030\004 \001(\006\022\023\n\013ping_est_ms\030\005 \001(\r\022\024\n\014virtual_p"
    "ort\030\t \001(\r\022#\n\033gameserver_relay_session_id"
    "\030\002 \001(\r\0227\n\005crypt\030\006 \001(\0132(.CMsgSteamDatagra"
    "mSessionCryptInfoSigned\0221\n\004cert\030\007 \001(\0132#."
    "CMsgSteamDatagramCertificateSigned\022\026\n\016ro"
    "uting_secret\030\n \001(\006\022\036\n\026legacy_client_stea"
    "m_id\030\003 \001(\006\"\232\002\n\032CMsgSteamDatagramConnectO"
    "K\022\034\n\024client_connection_id\030\001 \001(\007\022\034\n\024serve"
    "r_connection_id\030\007 \001(\007\022\026\n\016your_timestamp\030"
    "\003 \001(\006\022\027\n\017delay_time_usec\030\004 \001(\r\022#\n\033gamese"
    "rver_relay_session_id\030\002 \001(\r\0227\n\005crypt\030\005 \001"
    "(\0132(.CMsgSteamDatagramSessionCryptInfoSi"
    "gned\0221\n\004cert\030\006 \001(\0132#.CMsgSteamDatagramCe"
    "rtificateSigned\"\256\003\n\'CMsgSteamNetworkingP"
    "2PSDRRoutingSummary\022\024\n\014initial_ping\030\001 \001("
    "\r\022 \n\030initial_ping_front_local\030\002 \001(\r\022!\n\031i"
    "nitial_ping_front_remote\030\003 \001(\r\022\025\n\rinitia"
    "l_score\030\004 \001(\r\022\031\n\021initial_pop_local\030\005 \001(\007"
    "\022\032\n\022initial_pop_remote\030\006 \001(\007\022\021\n\tbest_pin"
    "g\030\013 \001(\r\022\035\n\025best_ping_front_local\030\014 \001(\r\022\036"
    "\n\026best_ping_front_remote\030\r \001(\r\022\022\n\nbest_s"
    "core\030\016 \001(\r\022\026\n\016best_pop_local\030\017 \001(\007\022\027\n\017be"
    "st_pop_remote\030\020 \001(\007\022\021\n\tbest_time\030\021 \001(\r\022\026"
    "\n\016negotiation_ms\030\007 \001(\r\022\030\n\020selected_secon"
    "ds\030\010 \001(\r\"\217\001\n\"CMsgSteamDatagramP2PRouting"
    "Summary\0222\n\003ice\030\002 \001(\0132%.CMsgSteamNetworki"
    "ngICESessionSummary\0225\n\003sdr\030\003 \001(\0132(.CMsgS"
    "teamNetworkingP2PSDRRoutingSummary\"\351\006\n!C"
    "MsgSteamDatagramConnectionClosed\022\030\n\020to_c"
    "onnection_id\030\007 \001(\007\022\032\n\022from_connection_id"
    "\030\010 \001(\007\022\034\n\024from_identity_string\030\017 \001(\t\022M\n\033"
    "legacy_from_identity_binary\030\r \001(\0132(.CMsg"
    "SteamNetworkingIdentityLegacyBinary\022\034\n\024l"
    "egacy_from_steam_id\030\003 \001(\006\022*\n\"legacy_game"
    "server_relay_session_id\030\002 \001(\r\022\033\n\023to_rela"
    "y_session_id\030\t \001(\007\022\035\n\025from_relay_session"
    "_id\030\n \001(\007\022*\n\"forward_target_relay_routin"
    "g_token\030\013 \001(\014\022\037\n\027forward_target_revision"
    "\030\014 \001(\r\022G\n\nrelay_mode\030\004 \001(\0162-.CMsgSteamDa"
    "tagramConnectionClosed.ERelayMode:\004None\022"
    "\r\n\005debug\030\005 \001(\t\022\023\n\013reason_code\030\006 \001(\r\022\026\n\016r"
    "outing_secret\030\016 \001(\006\022\033\n\023not_primary_sessi"
    "on\030\020 \001(\010\022\035\n\025not_primary_transport\030\023 \001(\010\022"
    "\035\n\025relay_override_active\030\026 \001(\010\022:\n\rqualit"
    "y_relay\030\021 \001(\0132#.CMsgSteamDatagramConnect"
    "ionQuality\0228\n\013quality_e2e\030\022 \001(\0132#.CMsgSt"
    "eamDatagramConnectionQuality\022@\n\023p2p_rout"
    "ing_summary\030\025 \001(\0132#.CMsgSteamDatagramP2P"
    "RoutingSummary\"6\n\nERelayMode\022\010\n\004None\020\000\022\014"
    "\n\010EndToEnd\020\001\022\020\n\014ClosedByPeer\020\002\"\314\004\n\035CMsgS"
    "teamDatagramNoConnection\022\030\n\020to_connectio"
    "n_id\030\005 \001(\007\022\032\n\022from_connection_id\030\006 \001(\007\022*"
    "\n\"legacy_gameserver_relay_session_id\030\002 \001"
    "(\r\022\033\n\023to_relay_session_id\030\t \001(\007\022\035\n\025from_"
    "relay_session_id\030\n \001(\007\022\034\n\024from_identity_"
    "string\030\007 \001(\t\022\034\n\024legacy_from_steam_id\030\003 \001"
    "(\006\022\022\n\nend_to_end\030\004 \001(\010\022\033\n\023not_primary_se"
    "ssion\030\014 \001(\010\022\035\n\025not_primary_transport\030\017 \001"
    "(\010\022\035\n\025relay_override_active\030\021 \001(\010\022:\n\rqua"
    "lity_relay\030\r \001(\0132#.CMsgSteamDatagramConn"
    "ectionQuality\0228\n\013quality_e2e\030\016 \001(\0132#.CMs"
    "gSteamDatagramConnectionQuality\022@\n\023p2p_r"
    "outing_summary\030\020 \001(\0132#.CMsgSteamDatagram"
    "P2PRoutingSummary\022\026\n\016routing_secret\030\013 \001("
    "\006\022\022\n\tdummy_pad\030\377\007 \001(\007\"\334\002\n)CMsgSteamDatag"
    "ramGameserverSessionRequest\022\016\n\006ticket\030\001 "
    "\001(\014\022\026\n\016challenge_time\030\003 \001(\007\022\021\n\tchallenge"
    "\030\004 \001(\006\022\034\n\024client_connection_id\030\005 \001(\007\022\034\n\024"
    "server_connection_id\030\010 \001(\007\022\036\n\026network_co"
    "nfig_version\030\006 \001(\004\022\030\n\020protocol_version\030\007"
    " \001(\r\022\020\n\010platform\030\t \001(\t\022\r\n\005build\030\n \001(\t\022\037\n"
    "\027dev_gameserver_identity\030d \001(\t\022<\n\017dev_cl"
    "ient_cert\030e \001(\0132#.CMsgSteamDatagramCerti"
    "ficateSigned\"\350\001\n-CMsgSteamDatagramGamese"
    "rverSessionEstablished\022\025\n\rconnection_id\030"
    "\001 \001(\007\022\"\n\032gameserver_identity_string\030\002 \001("
    "\t\022\036\n\026seconds_until_shutdown\030\004 \001(\r\022\023\n\013seq"
    "_num_r2c\030\006 \001(\r\022$\n\034dummy_legacy_identity_"
    "binary\030\007 \001(\014\022!\n\031legacy_gameserver_steami"
    "d\030\003 \001(\006\"\255\003\n.CMsgSteamDatagramConnectionS"
    "tatsClientToRouter\022:\n\rquality_relay\030\001 \001("
    "\0132#.CMsgSteamDatagramConnectionQuality\0228"
    "\n\013quality_e2e\030\002 \001(\0132#.CMsgSteamDatagramC"
    "onnectionQuality\022\021\n\tack_relay\030\004 \003(\007\022\026\n\016l"
    "egacy_ack_e2e\030\005 \003(\007\022\r\n\005flags\030\006 \001(\r\022\034\n\024cl"
    "ient_connection_id\030\010 \001(\007\022\023\n\013seq_num_c2r\030"
    "\t \001(\r\022\023\n\013seq_num_e2e\030\n \001(\r\"\202\001\n\005Flags\022\025\n\021"
    "ACK_REQUEST_RELAY\020\001\022\023\n\017ACK_REQUEST_E2E\020\002"
    "\022\031\n\025ACK_REQUEST_IMMEDIATE\020\004\022\027\n\023NOT_PRIMA"
    "RY_SESSION\020\010\022\031\n\025CLIENT_RELAY_OVERRIDE\020 \""
    "\371\003\n.CMsgSteamDatagramConnectionStatsRout"
    "erToClient\022:\n\rquality_relay\030\001 \001(\0132#.CMsg"
    "SteamDatagramConnectionQuality\0228\n\013qualit"
    "y_e2e\030\002 \001(\0132#.CMsgSteamDatagramConnectio"
    "nQuality\022\036\n\026seconds_until_shutdown\030\006 \001(\r"
    "\022\032\n\022migrate_request_ip\030\n \001(\007\022\034\n\024migrate_"
    "request_port\030\013 \001(\r\022%\n\035scoring_penalty_re"
    "lay_cluster\030\014 \001(\r\022\021\n\tack_relay\030\r \003(\007\022\026\n\016"
    "legacy_ack_e2e\030\016 \003(\007\022\r\n\005flags\030\017 \001(\r\022\034\n\024c"
    "lient_connection_id\030\007 \001(\007\022\023\n\013seq_num_r2c"
    "\030\010 \001(\r\022\023\n\013seq_num_e2e\030\t \001(\r\"N\n\005Flags\022\025\n\021"
    "ACK_REQUEST_RELAY\020\001\022\023\n\017ACK_REQUEST_E2E\020\002"
    "\022\031\n\025ACK_REQUEST_IMMEDIATE\020\004\"\210\004\n.CMsgStea"
    "mDatagramConnectionStatsRouterToServer\022:"
    "\n\rquality_relay\030\001 \001(\0132#.CMsgSteamDatagra"
    "mConnectionQuality\0228\n\013quality_e2e\030\002 \001(\0132"
    "#.CMsgSteamDatagramConnectionQuality\022\021\n\t"
    "ack_relay\030\n \003(\007\022\026\n\016legacy_ack_e2e\030\013 \003(\007\022"
    "\r\n\005flags\030\014 \001(\r\022\023\n\013seq_num_r2s\030\005 \001(\r\022\023\n\013s"
    "eq_num_e2e\030\006 \001(\r\022\036\n\026client_identity_stri"
    "ng\030\017 \001(\t\022\036\n\026legacy_client_steam_id\030\007 \001(\006"
    "\022\030\n\020relay_session_id\030\010 \001(\r\022\034\n\024client_con"
    "nection_id\030\t \001(\007\022\034\n\024server_connection_id"
    "\030\r \001(\007\022\026\n\016routing_secret\030\016 \001(\006\"N\n\005Flags\022"
    "\025\n\021ACK_REQUEST_RELAY\020\001\022\023\n\017ACK_REQUEST_E2"
    "E\020\002\022\031\n\025ACK_REQUEST_IMMEDIATE\020\004\"\260\003\n.CMsgS"
    "teamDatagramConnectionStatsServerToRoute"
    "r\022:\n\rquality_relay\030\001 \001(\0132#.CMsgSteamData"
    "gramConnectionQuality\0228\n\013quality_e2e\030\002 \001"
    "(\0132#.CMsgSteamDatagramConnectionQuality\022"
    "\021\n\tack_relay\030\010 \003(\007\022\026\n\016legacy_ack_e2e\030\t \003"
    "(\007\022\r\n\005flags\030\n \001(\r\022\023\n\013seq_num_s2r\030\003 \001(\r\022\023"
    "\n\013seq_num_e2e\030\004 \001(\r\022\030\n\020relay_session_id\030"
    "\006 \001(\r\022\034\n\024client_connection_id\030\007 \001(\007\022\034\n\024s"
    "erver_connection_id\030\013 \001(\007\"N\n\005Flags\022\025\n\021AC"
    "K_REQUEST_RELAY\020\001\022\023\n\017ACK_REQUEST_E2E\020\002\022\031"
    "\n\025ACK_REQUEST_IMMEDIATE\020\004\"\305\003\n&CMsgSteamD"
    "atagramP2PSessionRequestBody\022\026\n\016challeng"
    "e_time\030\001 \001(\007\022\021\n\tchallenge\030\002 \001(\006\022\034\n\024clien"
    "t_connection_id\030\003 \001(\007\022\034\n\024legacy_peer_ste"
    "am_id\030\004 \001(\006\022\034\n\024peer_identity_string\030\013 \001("
    "\t\022\032\n\022peer_connection_id\030\005 \001(\007\022\026\n\016encrypt"
    "ed_data\030\016 \001(\014\022,\n$encryption_your_public_"
    "key_lead_byte\030\017 \001(\r\022*\n\"encryption_my_eph"
    "emeral_public_key\030\020 \001(\014\022\030\n\020protocol_vers"
    "ion\030\010 \001(\r\022\036\n\026network_config_version\030\t \001("
    "\004\022\020\n\010platform\030\014 \001(\t\022\r\n\005build\030\r \001(\t\032-\n\rEn"
    "cryptedData\022\034\n\024peer_identity_string\030\001 \001("
    "\t\"x\n\"CMsgSteamDatagramP2PSessionRequest\022"
    "1\n\004cert\030\001 \001(\0132#.CMsgSteamDatagramCertifi"
    "cateSigned\022\014\n\004body\030\002 \001(\014\022\021\n\tsignature\030\003 "
    "\001(\014\"\221\001\n&CMsgSteamDatagramP2PSessionEstab"
    "lished\022\025\n\rconnection_id\030\001 \001(\007\022\036\n\026seconds"
    "_until_shutdown\030\003 \001(\r\022\033\n\023relay_routing_t"
    "oken\030\004 \001(\014\022\023\n\013seq_num_r2c\030\005 \001(\r\"\211\005\n1CMsg"
    "SteamDatagramConnectionStatsP2PClientToR"
    "outer\022:\n\rquality_relay\030\001 \001(\0132#.CMsgSteam"
    "DatagramConnectionQuality\0228\n\013quality_e2e"
    "\030\002 \001(\0132#.CMsgSteamDatagramConnectionQual"
    "ity\022@\n\023p2p_routing_summary\030\016 \001(\0132#.CMsgS"
    "teamDatagramP2PRoutingSummary\022\021\n\tack_rel"
    "ay\030\003 \003(\007\022\026\n\016legacy_ack_e2e\030\004 \003(\007\022\r\n\005flag"
    "s\030\005 \001(\r\022*\n\"forward_target_relay_routing_"
    "token\030\006 \001(\014\022\037\n\027forward_target_revision\030\007"
    " \001(\r\022\016\n\006routes\030\010 \001(\014\022 \n\030ack_peer_routes_"
    "revision\030\t \001(\r\022\025\n\rconnection_id\030\n \001(\007\022\023\n"
    "\013seq_num_c2r\030\013 \001(\r\022\023\n\013seq_num_e2e\030\014 \001(\r\""
    "\241\001\n\005Flags\022\025\n\021ACK_REQUEST_RELAY\020\001\022\023\n\017ACK_"
    "REQUEST_E2E\020\002\022\031\n\025ACK_REQUEST_IMMEDIATE\020\004"
    "\022\027\n\023NOT_PRIMARY_SESSION\020\010\022\035\n\031NOT_PRIMARY"
    "_TRANSPORT_E2E\020\020\022\031\n\025CLIENT_RELAY_OVERRID"
    "E\020 \"\353\004\n1CMsgSteamDatagramConnectionStats"
    "P2PRouterToClient\022:\n\rquality_relay\030\001 \001(\013"
    "2#.CMsgSteamDatagramConnectionQuality\0228\n"
    "\013quality_e2e\030\002 \001(\0132#.CMsgSteamDatagramCo"
    "nnectionQuality\022\036\n\026seconds_until_shutdow"
    "n\030\003 \001(\r\022\032\n\022migrate_request_ip\030\004 \001(\007\022\034\n\024m"
    "igrate_request_port\030\005 \001(\r\022%\n\035scoring_pen"
    "alty_relay_cluster\030\006 \001(\r\022\021\n\tack_relay\030\007 "
    "\003(\007\022\026\n\016legacy_ack_e2e\030\010 \003(\007\022\r\n\005flags\030\t \001"
    "(\r\022#\n\033ack_forward_target_revision\030\n \001(\r\022"
    "\016\n\006routes\030\013 \001(\014\022 \n\030ack_peer_routes_revis"
    "ion\030\014 \001(\r\022\025\n\rconnection_id\030\r \001(\007\022\023\n\013seq_"
    "num_r2c\030\016 \001(\r\022\023\n\013seq_num_e2e\030\017 \001(\r\"m\n\005Fl"
    "ags\022\025\n\021ACK_REQUEST_RELAY\020\001\022\023\n\017ACK_REQUES"
    "T_E2E\020\002\022\031\n\025ACK_REQUEST_IMMEDIATE\020\004\022\035\n\031NO"
    "T_PRIMARY_TRANSPORT_E2E\020\020\"\240\001\n*CMsgSteamD"
    "atagramP2PBadRouteRouterToClient\022\025\n\rconn"
    "ection_id\030\001 \001(\007\022\"\n\032failed_relay_routing_"
    "token\030\002 \001(\014\022#\n\033ack_forward_target_revisi"
    "on\030\003 \001(\r\022\022\n\nkludge_pad\030c \001(\006\"\357\002\n\032CMsgSte"
    "amDatagramP2PRoutes\022@\n\016relay_clusters\030\001 "
    "\003(\0132(.CMsgSteamDatagramP2PRoutes.RelayCl"
    "uster\0221\n\006routes\030\002 \003(\0132!.CMsgSteamDatagra"
    "mP2PRoutes.Route\022\020\n\010revision\030\003 \001(\r\032k\n\014Re"
    "layCluster\022\016\n\006pop_id\030\001 \001(\007\022\017\n\007ping_ms\030\002 "
    "\001(\r\022\025\n\rscore_penalty\030\003 \001(\r\022#\n\033session_re"
    "lay_routing_token\030\004 \001(\014\032]\n\005Route\022\021\n\tmy_p"
    "op_id\030\001 \001(\007\022\023\n\013your_pop_id\030\002 \001(\007\022\024\n\014lega"
    "cy_score\030\003 \001(\r\022\026\n\016interior_score\030\004 \001(\r\"\314"
    "\001\n+CMsgSteamDatagramSetSecondaryAddressR"
    "equest\022\026\n\016client_main_ip\030\001 \001(\007\022\030\n\020client"
    "_main_port\030\002 \001(\007\022\034\n\024client_connection_id"
    "\030\003 \001(\007\022\027\n\017client_identity\030\004 \001(\t\022 \n\030reque"
    "st_send_duplication\030\005 \001(\010\022\022\n\nkludge_pad\030"
    "c \001(\014\"N\n*CMsgSteamDatagramSetSecondaryAd"
    "dressResult\022\017\n\007success\030\001 \001(\010\022\017\n\007message\030"
    "\002 \001(\t*\340\013\n\023ESteamDatagramMsgID\022\037\n\033k_EStea"
    "mDatagramMsg_Invalid\020\000\022)\n%k_ESteamDatagr"
    "amMsg_RouterPingRequest\020\001\022\'\n#k_ESteamDat"
    "agramMsg_RouterPingReply\020\002\022-\n)k_ESteamDa"
    "tagramMsg_GameserverPingRequest\020\003\0220\n,k_E"
    "SteamDatagramMsg_GameserverSessionReques"
    "t\020\005\0224\n0k_ESteamDatagramMsg_GameserverSes"
    "sionEstablished\020\006\022!\n\035k_ESteamDatagramMsg"
    "_NoSession\020\007\022\"\n\036k_ESteamDatagramMsg_Diag"
    "nostic\020\010\022*\n&k_ESteamDatagramMsg_DataClie"
    "ntToRouter\020\t\022*\n&k_ESteamDatagramMsg_Data"
    "RouterToServer\020\n\022*\n&k_ESteamDatagramMsg_"
    "DataServerToRouter\020\013\022*\n&k_ESteamDatagram"
    "Msg_DataRouterToClient\020\014\022\035\n\031k_ESteamData"
    "gramMsg_Stats\020\r\022/\n+k_ESteamDatagramMsg_C"
    "lientPingSampleRequest\020\016\022-\n)k_ESteamData"
    "gramMsg_ClientPingSampleReply\020\017\0225\n1k_ESt"
    "eamDatagramMsg_ClientToRouterSwitchedPri"
    "mary\020\020\022#\n\037k_ESteamDatagramMsg_RelayHealt"
    "h\020\021\022&\n\"k_ESteamDatagramMsg_ConnectReques"
    "t\020\022\022!\n\035k_ESteamDatagramMsg_ConnectOK\020\023\022("
    "\n$k_ESteamDatagramMsg_ConnectionClosed\020\024"
    "\022$\n k_ESteamDatagramMsg_NoConnection\020\025\022,"
    "\n(k_ESteamDatagramMsg_TicketDecryptReque"
    "st\020\026\022*\n&k_ESteamDatagramMsg_TicketDecryp"
    "tReply\020\027\022)\n%k_ESteamDatagramMsg_P2PSessi"
    "onRequest\020\030\022-\n)k_ESteamDatagramMsg_P2PSe"
    "ssionEstablished\020\031\022&\n\"k_ESteamDatagramMs"
    "g_P2PStatsClient\020\032\022%\n!k_ESteamDatagramMs"
    "g_P2PStatsRelay\020\033\022#\n\037k_ESteamDatagramMsg"
    "_P2PBadRoute\020\034\022+\n\'k_ESteamDatagramMsg_Ga"
    "meserverPingReply\020\035\0224\n0k_ESteamDatagramM"
    "sg_LegacyGameserverRegistration\020\036\0222\n.k_E"
    "SteamDatagramMsg_SetSecondaryAddressRequ"
    "est\020\037\0221\n-k_ESteamDatagramMsg_SetSecondar"
    "yAddressResult\020 \022/\n+k_ESteamDatagramMsg_"
    "RelayToRelayPingRequest\020!\022-\n)k_ESteamDat"
    "agramMsg_RelayToRelayPingReply\020\"B\005H\001\200\001\000"
};
static const ::_pbi::DescriptorTable* PROTOBUF_NONNULL const
    descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_deps[2] = {
        &::descriptor_table_steamnetworkingsockets_5fmessages_2eproto,
        &::descriptor_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto,
};
static ::absl::once_flag descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto = {
    false,
    false,
    13799,
    descriptor_table_protodef_steamdatagram_5fmessages_5fsdr_2eproto,
    "steamdatagram_messages_sdr.proto",
    &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_once,
    descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto_deps,
    2,
    42,
    schemas,
    file_default_instances,
    TableStruct_steamdatagram_5fmessages_5fsdr_2eproto::offsets,
    file_level_enum_descriptors_steamdatagram_5fmessages_5fsdr_2eproto,
    file_level_service_descriptors_steamdatagram_5fmessages_5fsdr_2eproto,
};
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL CMsgSteamDatagramRouterPingReply_AltAddress_Protocol_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return file_level_enum_descriptors_steamdatagram_5fmessages_5fsdr_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t CMsgSteamDatagramRouterPingReply_AltAddress_Protocol_internal_data_[] = {
    65536u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL CMsgSteamDatagramRouterPingReply_Flags_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return file_level_enum_descriptors_steamdatagram_5fmessages_5fsdr_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t CMsgSteamDatagramRouterPingReply_Flags_internal_data_[] = {
    131073u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL CMsgSteamDatagramConnectionClosed_ERelayMode_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return file_level_enum_descriptors_steamdatagram_5fmessages_5fsdr_2eproto[2];
}
PROTOBUF_CONSTINIT const uint32_t CMsgSteamDatagramConnectionClosed_ERelayMode_internal_data_[] = {
    196608u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL CMsgSteamDatagramConnectionStatsClientToRouter_Flags_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return file_level_enum_descriptors_steamdatagram_5fmessages_5fsdr_2eproto[3];
}
PROTOBUF_CONSTINIT const uint32_t CMsgSteamDatagramConnectionStatsClientToRouter_Flags_internal_data_[] = {
    131073u, 32u, 536870946u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL CMsgSteamDatagramConnectionStatsRouterToClient_Flags_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return file_level_enum_descriptors_steamdatagram_5fmessages_5fsdr_2eproto[4];
}
PROTOBUF_CONSTINIT const uint32_t CMsgSteamDatagramConnectionStatsRouterToClient_Flags_internal_data_[] = {
    131073u, 32u, 2u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL CMsgSteamDatagramConnectionStatsRouterToServer_Flags_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return file_level_enum_descriptors_steamdatagram_5fmessages_5fsdr_2eproto[5];
}
PROTOBUF_CONSTINIT const uint32_t CMsgSteamDatagramConnectionStatsRouterToServer_Flags_internal_data_[] = {
    131073u, 32u, 2u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL CMsgSteamDatagramConnectionStatsServerToRouter_Flags_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return file_level_enum_descriptors_steamdatagram_5fmessages_5fsdr_2eproto[6];
}
PROTOBUF_CONSTINIT const uint32_t CMsgSteamDatagramConnectionStatsServerToRouter_Flags_internal_data_[] = {
    131073u, 32u, 2u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return file_level_enum_descriptors_steamdatagram_5fmessages_5fsdr_2eproto[7];
}
PROTOBUF_CONSTINIT const uint32_t CMsgSteamDatagramConnectionStatsP2PClientToRouter_Flags_internal_data_[] = {
    131073u, 32u, 536879138u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return file_level_enum_descriptors_steamdatagram_5fmessages_5fsdr_2eproto[8];
}
PROTOBUF_CONSTINIT const uint32_t CMsgSteamDatagramConnectionStatsP2PRouterToClient_Flags_internal_data_[] = {
    131073u, 32u, 8194u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL ESteamDatagramMsgID_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto);
  return file_level_enum_descriptors_steamdatagram_5fmessages_5fsdr_2eproto[9];
}
PROTOBUF_CONSTINIT const uint32_t ESteamDatagramMsgID_internal_data_[] = {
    262144u, 32u, 2147483646u, };
// ===================================================================

class CMsgSteamNetworkingIPAddress::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CMsgSteamNetworkingIPAddress>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingIPAddress, _impl_._has_bits_);
};

CMsgSteamNetworkingIPAddress::CMsgSteamNetworkingIPAddress(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamNetworkingIPAddress_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamNetworkingIPAddress)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamNetworkingIPAddress::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::CMsgSteamNetworkingIPAddress& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        v6_(arena, from.v6_) {}

CMsgSteamNetworkingIPAddress::CMsgSteamNetworkingIPAddress(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const CMsgSteamNetworkingIPAddress& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamNetworkingIPAddress_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CMsgSteamNetworkingIPAddress* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.v4_ = from._impl_.v4_;

  // @@protoc_insertion_point(copy_constructor:CMsgSteamNetworkingIPAddress)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamNetworkingIPAddress::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        v6_(arena) {}

inline void CMsgSteamNetworkingIPAddress::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.v4_ = {};
}
CMsgSteamNetworkingIPAddress::~CMsgSteamNetworkingIPAddress() {
  // @@protoc_insertion_point(destructor:CMsgSteamNetworkingIPAddress)
  SharedDtor(*this);
}
inline void CMsgSteamNetworkingIPAddress::SharedDtor(MessageLite& self) {
  CMsgSteamNetworkingIPAddress& this_ = static_cast<CMsgSteamNetworkingIPAddress&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.v6_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CMsgSteamNetworkingIPAddress::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CMsgSteamNetworkingIPAddress(arena);
}
constexpr auto CMsgSteamNetworkingIPAddress::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(CMsgSteamNetworkingIPAddress),
                                            alignof(CMsgSteamNetworkingIPAddress));
}
constexpr auto CMsgSteamNetworkingIPAddress::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CMsgSteamNetworkingIPAddress_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CMsgSteamNetworkingIPAddress::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CMsgSteamNetworkingIPAddress>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CMsgSteamNetworkingIPAddress::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CMsgSteamNetworkingIPAddress>(), &CMsgSteamNetworkingIPAddress::ByteSizeLong,
              &CMsgSteamNetworkingIPAddress::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingIPAddress, _impl_._cached_size_),
          false,
      },
      &CMsgSteamNetworkingIPAddress::kDescriptorMethods,
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        CMsgSteamNetworkingIPAddress_class_data_ =
            CMsgSteamNetworkingIPAddress::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL CMsgSteamNetworkingIPAddress::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CMsgSteamNetworkingIPAddress_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CMsgSteamNetworkingIPAddress_class_data_.tc_table);
  return CMsgSteamNetworkingIPAddress_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2>
CMsgSteamNetworkingIPAddress::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingIPAddress, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    CMsgSteamNetworkingIPAddress_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CMsgSteamNetworkingIPAddress>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional bytes v6 = 2;
    {::_pbi::TcParser::FastBS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingIPAddress, _impl_.v6_)}},
    // optional fixed32 v4 = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingIPAddress, _impl_.v4_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional fixed32 v4 = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingIPAddress, _impl_.v4_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional bytes v6 = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingIPAddress, _impl_.v6_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
  }},
};
PROTOBUF_NOINLINE void CMsgSteamNetworkingIPAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamNetworkingIPAddress)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _impl_.v6_.ClearNonDefaultToEmpty();
  }
  _impl_.v4_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CMsgSteamNetworkingIPAddress::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CMsgSteamNetworkingIPAddress& this_ = static_cast<const CMsgSteamNetworkingIPAddress&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CMsgSteamNetworkingIPAddress::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CMsgSteamNetworkingIPAddress& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamNetworkingIPAddress)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional fixed32 v4 = 1;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        1, this_._internal_v4(), target);
  }

  // optional bytes v6 = 2;
  if ((cached_has_bits & 0x00000001u) != 0) {
    const std::string& _s = this_._internal_v6();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamNetworkingIPAddress)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CMsgSteamNetworkingIPAddress::ByteSizeLong(const MessageLite& base) {
  const CMsgSteamNetworkingIPAddress& this_ = static_cast<const CMsgSteamNetworkingIPAddress&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t CMsgSteamNetworkingIPAddress::ByteSizeLong() const {
  const CMsgSteamNetworkingIPAddress& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:CMsgSteamNetworkingIPAddress)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += static_cast<bool>(0x00000002u & cached_has_bits) * 5;
   {
    // optional bytes v6 = 2;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this_._internal_v6());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void CMsgSteamNetworkingIPAddress::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CMsgSteamNetworkingIPAddress*>(&to_msg);
  auto& from = static_cast<const CMsgSteamNetworkingIPAddress&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamNetworkingIPAddress)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_internal_set_v6(from._internal_v6());
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_impl_.v4_ = from._impl_.v4_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamNetworkingIPAddress::CopyFrom(const CMsgSteamNetworkingIPAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamNetworkingIPAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CMsgSteamNetworkingIPAddress::InternalSwap(CMsgSteamNetworkingIPAddress* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.v6_, &other->_impl_.v6_, arena);
  swap(_impl_.v4_, other->_impl_.v4_);
}

::google::protobuf::Metadata CMsgSteamNetworkingIPAddress::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CMsgSteamDatagramSignedMessageGeneric::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CMsgSteamDatagramSignedMessageGeneric>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramSignedMessageGeneric, _impl_._has_bits_);
};

void CMsgSteamDatagramSignedMessageGeneric::clear_cert() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.cert_ != nullptr) _impl_.cert_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
CMsgSteamDatagramSignedMessageGeneric::CMsgSteamDatagramSignedMessageGeneric(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramSignedMessageGeneric_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramSignedMessageGeneric)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramSignedMessageGeneric::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::CMsgSteamDatagramSignedMessageGeneric& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        signed_data_(arena, from.signed_data_),
        signature_(arena, from.signature_),
        dummy_pad_(arena, from.dummy_pad_) {}

CMsgSteamDatagramSignedMessageGeneric::CMsgSteamDatagramSignedMessageGeneric(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const CMsgSteamDatagramSignedMessageGeneric& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramSignedMessageGeneric_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CMsgSteamDatagramSignedMessageGeneric* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.cert_ = ((cached_has_bits & 0x00000008u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.cert_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramSignedMessageGeneric)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramSignedMessageGeneric::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        signed_data_(arena),
        signature_(arena),
        dummy_pad_(arena) {}

inline void CMsgSteamDatagramSignedMessageGeneric::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.cert_ = {};
}
CMsgSteamDatagramSignedMessageGeneric::~CMsgSteamDatagramSignedMessageGeneric() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramSignedMessageGeneric)
  SharedDtor(*this);
}
inline void CMsgSteamDatagramSignedMessageGeneric::SharedDtor(MessageLite& self) {
  CMsgSteamDatagramSignedMessageGeneric& this_ = static_cast<CMsgSteamDatagramSignedMessageGeneric&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.signed_data_.Destroy();
  this_._impl_.signature_.Destroy();
  this_._impl_.dummy_pad_.Destroy();
  delete this_._impl_.cert_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CMsgSteamDatagramSignedMessageGeneric::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CMsgSteamDatagramSignedMessageGeneric(arena);
}
constexpr auto CMsgSteamDatagramSignedMessageGeneric::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(CMsgSteamDatagramSignedMessageGeneric),
                                            alignof(CMsgSteamDatagramSignedMessageGeneric));
}
constexpr auto CMsgSteamDatagramSignedMessageGeneric::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CMsgSteamDatagramSignedMessageGeneric_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CMsgSteamDatagramSignedMessageGeneric::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CMsgSteamDatagramSignedMessageGeneric>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CMsgSteamDatagramSignedMessageGeneric::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CMsgSteamDatagramSignedMessageGeneric>(), &CMsgSteamDatagramSignedMessageGeneric::ByteSizeLong,
              &CMsgSteamDatagramSignedMessageGeneric::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramSignedMessageGeneric, _impl_._cached_size_),
          false,
      },
      &CMsgSteamDatagramSignedMessageGeneric::kDescriptorMethods,
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        CMsgSteamDatagramSignedMessageGeneric_class_data_ =
            CMsgSteamDatagramSignedMessageGeneric::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL CMsgSteamDatagramSignedMessageGeneric::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CMsgSteamDatagramSignedMessageGeneric_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CMsgSteamDatagramSignedMessageGeneric_class_data_.tc_table);
  return CMsgSteamDatagramSignedMessageGeneric_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 4, 1, 0, 7>
CMsgSteamDatagramSignedMessageGeneric::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramSignedMessageGeneric, _impl_._has_bits_),
    0, // no _extensions_
    1023, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    CMsgSteamDatagramSignedMessageGeneric_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CMsgSteamDatagramSignedMessageGeneric>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional .CMsgSteamDatagramCertificateSigned cert = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 3, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramSignedMessageGeneric, _impl_.cert_)}},
    // optional bytes signed_data = 2;
    {::_pbi::TcParser::FastBS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramSignedMessageGeneric, _impl_.signed_data_)}},
    // optional bytes signature = 3;
    {::_pbi::TcParser::FastBS1,
     {26, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramSignedMessageGeneric, _impl_.signature_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional bytes dummy_pad = 1023;
    {::_pbi::TcParser::FastBS2,
     {16378, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramSignedMessageGeneric, _impl_.dummy_pad_)}},
  }}, {{
    1023, 0, 1,
    65534, 3,
    65535, 65535
  }}, {{
    // optional .CMsgSteamDatagramCertificateSigned cert = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramSignedMessageGeneric, _impl_.cert_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional bytes signed_data = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramSignedMessageGeneric, _impl_.signed_data_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional bytes signature = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramSignedMessageGeneric, _impl_.signature_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional bytes dummy_pad = 1023;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramSignedMessageGeneric, _impl_.dummy_pad_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::CMsgSteamDatagramCertificateSigned>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void CMsgSteamDatagramSignedMessageGeneric::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramSignedMessageGeneric)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.signed_data_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.signature_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _impl_.dummy_pad_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      ABSL_DCHECK(_impl_.cert_ != nullptr);
      _impl_.cert_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramSignedMessageGeneric::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CMsgSteamDatagramSignedMessageGeneric& this_ = static_cast<const CMsgSteamDatagramSignedMessageGeneric&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramSignedMessageGeneric::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CMsgSteamDatagramSignedMessageGeneric& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramSignedMessageGeneric)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional .CMsgSteamDatagramCertificateSigned cert = 1;
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.cert_, this_._impl_.cert_->GetCachedSize(), target,
        stream);
  }

  // optional bytes signed_data = 2;
  if ((cached_has_bits & 0x00000001u) != 0) {
    const std::string& _s = this_._internal_signed_data();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  // optional bytes signature = 3;
  if ((cached_has_bits & 0x00000002u) != 0) {
    const std::string& _s = this_._internal_signature();
    target = stream->WriteBytesMaybeAliased(3, _s, target);
  }

  // optional bytes dummy_pad = 1023;
  if ((cached_has_bits & 0x00000004u) != 0) {
    const std::string& _s = this_._internal_dummy_pad();
    target = stream->WriteBytesMaybeAliased(1023, _s, target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramSignedMessageGeneric)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CMsgSteamDatagramSignedMessageGeneric::ByteSizeLong(const MessageLite& base) {
  const CMsgSteamDatagramSignedMessageGeneric& this_ = static_cast<const CMsgSteamDatagramSignedMessageGeneric&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t CMsgSteamDatagramSignedMessageGeneric::ByteSizeLong() const {
  const CMsgSteamDatagramSignedMessageGeneric& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramSignedMessageGeneric)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    // optional bytes signed_data = 2;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this_._internal_signed_data());
    }
    // optional bytes signature = 3;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this_._internal_signature());
    }
    // optional bytes dummy_pad = 1023;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this_._internal_dummy_pad());
    }
    // optional .CMsgSteamDatagramCertificateSigned cert = 1;
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.cert_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void CMsgSteamDatagramSignedMessageGeneric::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramSignedMessageGeneric*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramSignedMessageGeneric&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramSignedMessageGeneric)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_internal_set_signed_data(from._internal_signed_data());
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_internal_set_signature(from._internal_signature());
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_internal_set_dummy_pad(from._internal_dummy_pad());
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      ABSL_DCHECK(from._impl_.cert_ != nullptr);
      if (_this->_impl_.cert_ == nullptr) {
        _this->_impl_.cert_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.cert_);
      } else {
        _this->_impl_.cert_->MergeFrom(*from._impl_.cert_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramSignedMessageGeneric::CopyFrom(const CMsgSteamDatagramSignedMessageGeneric& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramSignedMessageGeneric)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CMsgSteamDatagramSignedMessageGeneric::InternalSwap(CMsgSteamDatagramSignedMessageGeneric* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.signed_data_, &other->_impl_.signed_data_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.signature_, &other->_impl_.signature_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.dummy_pad_, &other->_impl_.dummy_pad_, arena);
  swap(_impl_.cert_, other->_impl_.cert_);
}

::google::protobuf::Metadata CMsgSteamDatagramSignedMessageGeneric::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CMsgSteamDatagramRouterPingReply_RouteException::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CMsgSteamDatagramRouterPingReply_RouteException>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply_RouteException, _impl_._has_bits_);
};

CMsgSteamDatagramRouterPingReply_RouteException::CMsgSteamDatagramRouterPingReply_RouteException(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramRouterPingReply_RouteException_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramRouterPingReply.RouteException)
}
CMsgSteamDatagramRouterPingReply_RouteException::CMsgSteamDatagramRouterPingReply_RouteException(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const CMsgSteamDatagramRouterPingReply_RouteException& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramRouterPingReply_RouteException_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramRouterPingReply_RouteException::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void CMsgSteamDatagramRouterPingReply_RouteException::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, data_center_id_),
           0,
           offsetof(Impl_, penalty_) -
               offsetof(Impl_, data_center_id_) +
               sizeof(Impl_::penalty_));
}
CMsgSteamDatagramRouterPingReply_RouteException::~CMsgSteamDatagramRouterPingReply_RouteException() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramRouterPingReply.RouteException)
  SharedDtor(*this);
}
inline void CMsgSteamDatagramRouterPingReply_RouteException::SharedDtor(MessageLite& self) {
  CMsgSteamDatagramRouterPingReply_RouteException& this_ = static_cast<CMsgSteamDatagramRouterPingReply_RouteException&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CMsgSteamDatagramRouterPingReply_RouteException::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CMsgSteamDatagramRouterPingReply_RouteException(arena);
}
constexpr auto CMsgSteamDatagramRouterPingReply_RouteException::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(CMsgSteamDatagramRouterPingReply_RouteException),
                                            alignof(CMsgSteamDatagramRouterPingReply_RouteException));
}
constexpr auto CMsgSteamDatagramRouterPingReply_RouteException::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CMsgSteamDatagramRouterPingReply_RouteException_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CMsgSteamDatagramRouterPingReply_RouteException::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CMsgSteamDatagramRouterPingReply_RouteException>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CMsgSteamDatagramRouterPingReply_RouteException::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CMsgSteamDatagramRouterPingReply_RouteException>(), &CMsgSteamDatagramRouterPingReply_RouteException::ByteSizeLong,
              &CMsgSteamDatagramRouterPingReply_RouteException::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply_RouteException, _impl_._cached_size_),
          false,
      },
      &CMsgSteamDatagramRouterPingReply_RouteException::kDescriptorMethods,
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        CMsgSteamDatagramRouterPingReply_RouteException_class_data_ =
            CMsgSteamDatagramRouterPingReply_RouteException::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL CMsgSteamDatagramRouterPingReply_RouteException::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CMsgSteamDatagramRouterPingReply_RouteException_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CMsgSteamDatagramRouterPingReply_RouteException_class_data_.tc_table);
  return CMsgSteamDatagramRouterPingReply_RouteException_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2>
CMsgSteamDatagramRouterPingReply_RouteException::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply_RouteException, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    CMsgSteamDatagramRouterPingReply_RouteException_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CMsgSteamDatagramRouterPingReply_RouteException>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional fixed32 data_center_id = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply_RouteException, _impl_.data_center_id_)}},
    // optional uint32 flags = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramRouterPingReply_RouteException, _impl_.flags_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply_RouteException, _impl_.flags_)}},
    // optional uint32 penalty = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramRouterPingReply_RouteException, _impl_.penalty_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply_RouteException, _impl_.penalty_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional fixed32 data_center_id = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply_RouteException, _impl_.data_center_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional uint32 flags = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply_RouteException, _impl_.flags_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 penalty = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply_RouteException, _impl_.penalty_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};
PROTOBUF_NOINLINE void CMsgSteamDatagramRouterPingReply_RouteException::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramRouterPingReply.RouteException)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    ::memset(&_impl_.data_center_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.penalty_) -
        reinterpret_cast<char*>(&_impl_.data_center_id_)) + sizeof(_impl_.penalty_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramRouterPingReply_RouteException::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CMsgSteamDatagramRouterPingReply_RouteException& this_ = static_cast<const CMsgSteamDatagramRouterPingReply_RouteException&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramRouterPingReply_RouteException::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CMsgSteamDatagramRouterPingReply_RouteException& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramRouterPingReply.RouteException)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional fixed32 data_center_id = 1;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        1, this_._internal_data_center_id(), target);
  }

  // optional uint32 flags = 2;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this_._internal_flags(), target);
  }

  // optional uint32 penalty = 3;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this_._internal_penalty(), target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramRouterPingReply.RouteException)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CMsgSteamDatagramRouterPingReply_RouteException::ByteSizeLong(const MessageLite& base) {
  const CMsgSteamDatagramRouterPingReply_RouteException& this_ = static_cast<const CMsgSteamDatagramRouterPingReply_RouteException&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t CMsgSteamDatagramRouterPingReply_RouteException::ByteSizeLong() const {
  const CMsgSteamDatagramRouterPingReply_RouteException& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramRouterPingReply.RouteException)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += static_cast<bool>(0x00000001u & cached_has_bits) * 5;
  if ((cached_has_bits & 0x00000006u) != 0) {
    // optional uint32 flags = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_flags());
    }
    // optional uint32 penalty = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_penalty());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void CMsgSteamDatagramRouterPingReply_RouteException::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramRouterPingReply_RouteException*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramRouterPingReply_RouteException&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramRouterPingReply.RouteException)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_impl_.data_center_id_ = from._impl_.data_center_id_;
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_impl_.flags_ = from._impl_.flags_;
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_impl_.penalty_ = from._impl_.penalty_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramRouterPingReply_RouteException::CopyFrom(const CMsgSteamDatagramRouterPingReply_RouteException& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramRouterPingReply.RouteException)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CMsgSteamDatagramRouterPingReply_RouteException::InternalSwap(CMsgSteamDatagramRouterPingReply_RouteException* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply_RouteException, _impl_.penalty_)
      + sizeof(CMsgSteamDatagramRouterPingReply_RouteException::_impl_.penalty_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply_RouteException, _impl_.data_center_id_)>(
          reinterpret_cast<char*>(&_impl_.data_center_id_),
          reinterpret_cast<char*>(&other->_impl_.data_center_id_));
}

::google::protobuf::Metadata CMsgSteamDatagramRouterPingReply_RouteException::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CMsgSteamDatagramRouterPingReply_AltAddress::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CMsgSteamDatagramRouterPingReply_AltAddress>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply_AltAddress, _impl_._has_bits_);
};

CMsgSteamDatagramRouterPingReply_AltAddress::CMsgSteamDatagramRouterPingReply_AltAddress(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramRouterPingReply_AltAddress_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramRouterPingReply.AltAddress)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramRouterPingReply_AltAddress::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::CMsgSteamDatagramRouterPingReply_AltAddress& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        id_(arena, from.id_) {}

CMsgSteamDatagramRouterPingReply_AltAddress::CMsgSteamDatagramRouterPingReply_AltAddress(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const CMsgSteamDatagramRouterPingReply_AltAddress& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramRouterPingReply_AltAddress_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CMsgSteamDatagramRouterPingReply_AltAddress* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, ipv4_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, ipv4_),
           offsetof(Impl_, protocol_) -
               offsetof(Impl_, ipv4_) +
               sizeof(Impl_::protocol_));

  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramRouterPingReply.AltAddress)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramRouterPingReply_AltAddress::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        id_(arena) {}

inline void CMsgSteamDatagramRouterPingReply_AltAddress::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, ipv4_),
           0,
           offsetof(Impl_, protocol_) -
               offsetof(Impl_, ipv4_) +
               sizeof(Impl_::protocol_));
}
CMsgSteamDatagramRouterPingReply_AltAddress::~CMsgSteamDatagramRouterPingReply_AltAddress() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramRouterPingReply.AltAddress)
  SharedDtor(*this);
}
inline void CMsgSteamDatagramRouterPingReply_AltAddress::SharedDtor(MessageLite& self) {
  CMsgSteamDatagramRouterPingReply_AltAddress& this_ = static_cast<CMsgSteamDatagramRouterPingReply_AltAddress&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.id_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CMsgSteamDatagramRouterPingReply_AltAddress::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CMsgSteamDatagramRouterPingReply_AltAddress(arena);
}
constexpr auto CMsgSteamDatagramRouterPingReply_AltAddress::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(CMsgSteamDatagramRouterPingReply_AltAddress),
                                            alignof(CMsgSteamDatagramRouterPingReply_AltAddress));
}
constexpr auto CMsgSteamDatagramRouterPingReply_AltAddress::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CMsgSteamDatagramRouterPingReply_AltAddress_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CMsgSteamDatagramRouterPingReply_AltAddress::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CMsgSteamDatagramRouterPingReply_AltAddress>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CMsgSteamDatagramRouterPingReply_AltAddress::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CMsgSteamDatagramRouterPingReply_AltAddress>(), &CMsgSteamDatagramRouterPingReply_AltAddress::ByteSizeLong,
              &CMsgSteamDatagramRouterPingReply_AltAddress::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply_AltAddress, _impl_._cached_size_),
          false,
      },
      &CMsgSteamDatagramRouterPingReply_AltAddress::kDescriptorMethods,
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        CMsgSteamDatagramRouterPingReply_AltAddress_class_data_ =
            CMsgSteamDatagramRouterPingReply_AltAddress::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL CMsgSteamDatagramRouterPingReply_AltAddress::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CMsgSteamDatagramRouterPingReply_AltAddress_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CMsgSteamDatagramRouterPingReply_AltAddress_class_data_.tc_table);
  return CMsgSteamDatagramRouterPingReply_AltAddress_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 1, 54, 2>
CMsgSteamDatagramRouterPingReply_AltAddress::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply_AltAddress, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    CMsgSteamDatagramRouterPingReply_AltAddress_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CMsgSteamDatagramRouterPingReply_AltAddress>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional fixed32 ipv4 = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply_AltAddress, _impl_.ipv4_)}},
    // optional uint32 port = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramRouterPingReply_AltAddress, _impl_.port_), 2>(),
     {16, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply_AltAddress, _impl_.port_)}},
    // optional uint32 penalty = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramRouterPingReply_AltAddress, _impl_.penalty_), 3>(),
     {24, 3, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply_AltAddress, _impl_.penalty_)}},
    // optional .CMsgSteamDatagramRouterPingReply.AltAddress.Protocol protocol = 4 [default = DefaultProtocol];
    {::_pbi::TcParser::FastEr0S1,
     {32, 4, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply_AltAddress, _impl_.protocol_)}},
    // optional string id = 5;
    {::_pbi::TcParser::FastSS1,
     {42, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply_AltAddress, _impl_.id_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional fixed32 ipv4 = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply_AltAddress, _impl_.ipv4_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional uint32 port = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply_AltAddress, _impl_.port_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 penalty = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply_AltAddress, _impl_.penalty_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional .CMsgSteamDatagramRouterPingReply.AltAddress.Protocol protocol = 4 [default = DefaultProtocol];
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply_AltAddress, _impl_.protocol_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional string id = 5;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply_AltAddress, _impl_.id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
  }},
  {{
      {0, 1},
  }},
  {{
    "\53\0\0\0\0\2\0\0"
    "CMsgSteamDatagramRouterPingReply.AltAddress"
    "id"
  }},
};
PROTOBUF_NOINLINE void CMsgSteamDatagramRouterPingReply_AltAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramRouterPingReply.AltAddress)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _impl_.id_.ClearNonDefaultToEmpty();
  }
  if ((cached_has_bits & 0x0000001eu) != 0) {
    ::memset(&_impl_.ipv4_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.protocol_) -
        reinterpret_cast<char*>(&_impl_.ipv4_)) + sizeof(_impl_.protocol_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramRouterPingReply_AltAddress::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CMsgSteamDatagramRouterPingReply_AltAddress& this_ = static_cast<const CMsgSteamDatagramRouterPingReply_AltAddress&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramRouterPingReply_AltAddress::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CMsgSteamDatagramRouterPingReply_AltAddress& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramRouterPingReply.AltAddress)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional fixed32 ipv4 = 1;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        1, this_._internal_ipv4(), target);
  }

  // optional uint32 port = 2;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this_._internal_port(), target);
  }

  // optional uint32 penalty = 3;
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this_._internal_penalty(), target);
  }

  // optional .CMsgSteamDatagramRouterPingReply.AltAddress.Protocol protocol = 4 [default = DefaultProtocol];
  if ((cached_has_bits & 0x00000010u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this_._internal_protocol(), target);
  }

  // optional string id = 5;
  if ((cached_has_bits & 0x00000001u) != 0) {
    const std::string& _s = this_._internal_id();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CMsgSteamDatagramRouterPingReply.AltAddress.id");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramRouterPingReply.AltAddress)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CMsgSteamDatagramRouterPingReply_AltAddress::ByteSizeLong(const MessageLite& base) {
  const CMsgSteamDatagramRouterPingReply_AltAddress& this_ = static_cast<const CMsgSteamDatagramRouterPingReply_AltAddress&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t CMsgSteamDatagramRouterPingReply_AltAddress::ByteSizeLong() const {
  const CMsgSteamDatagramRouterPingReply_AltAddress& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramRouterPingReply.AltAddress)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += static_cast<bool>(0x00000002u & cached_has_bits) * 5;
  if ((cached_has_bits & 0x0000001du) != 0) {
    // optional string id = 5;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_id());
    }
    // optional uint32 port = 2;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_port());
    }
    // optional uint32 penalty = 3;
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_penalty());
    }
    // optional .CMsgSteamDatagramRouterPingReply.AltAddress.Protocol protocol = 4 [default = DefaultProtocol];
    if ((cached_has_bits & 0x00000010u) != 0) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this_._internal_protocol());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void CMsgSteamDatagramRouterPingReply_AltAddress::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramRouterPingReply_AltAddress*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramRouterPingReply_AltAddress&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramRouterPingReply.AltAddress)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_internal_set_id(from._internal_id());
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_impl_.ipv4_ = from._impl_.ipv4_;
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_impl_.port_ = from._impl_.port_;
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _this->_impl_.penalty_ = from._impl_.penalty_;
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _this->_impl_.protocol_ = from._impl_.protocol_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramRouterPingReply_AltAddress::CopyFrom(const CMsgSteamDatagramRouterPingReply_AltAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramRouterPingReply.AltAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CMsgSteamDatagramRouterPingReply_AltAddress::InternalSwap(CMsgSteamDatagramRouterPingReply_AltAddress* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, &other->_impl_.id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply_AltAddress, _impl_.protocol_)
      + sizeof(CMsgSteamDatagramRouterPingReply_AltAddress::_impl_.protocol_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply_AltAddress, _impl_.ipv4_)>(
          reinterpret_cast<char*>(&_impl_.ipv4_),
          reinterpret_cast<char*>(&other->_impl_.ipv4_));
}

::google::protobuf::Metadata CMsgSteamDatagramRouterPingReply_AltAddress::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CMsgSteamDatagramRouterPingReply::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CMsgSteamDatagramRouterPingReply>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_._has_bits_);
};

CMsgSteamDatagramRouterPingReply::CMsgSteamDatagramRouterPingReply(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramRouterPingReply_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramRouterPingReply)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramRouterPingReply::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::CMsgSteamDatagramRouterPingReply& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        latency_datacenter_ids_{visibility, arena, from.latency_datacenter_ids_},
        latency_ping_ms_{visibility, arena, from.latency_ping_ms_},
        _latency_ping_ms_cached_byte_size_{0},
        route_exceptions_{visibility, arena, from.route_exceptions_},
        alt_addresses_{visibility, arena, from.alt_addresses_},
        latency_datacenter_ids_p2p_{visibility, arena, from.latency_datacenter_ids_p2p_},
        latency_ping_ms_p2p_{visibility, arena, from.latency_ping_ms_p2p_},
        _latency_ping_ms_p2p_cached_byte_size_{0},
        dummy_pad_(arena, from.dummy_pad_) {}

CMsgSteamDatagramRouterPingReply::CMsgSteamDatagramRouterPingReply(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const CMsgSteamDatagramRouterPingReply& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramRouterPingReply_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CMsgSteamDatagramRouterPingReply* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, client_timestamp_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, client_timestamp_),
           offsetof(Impl_, dummy_varint_) -
               offsetof(Impl_, client_timestamp_) +
               sizeof(Impl_::dummy_varint_));

  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramRouterPingReply)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramRouterPingReply::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        latency_datacenter_ids_{visibility, arena},
        latency_ping_ms_{visibility, arena},
        _latency_ping_ms_cached_byte_size_{0},
        route_exceptions_{visibility, arena},
        alt_addresses_{visibility, arena},
        latency_datacenter_ids_p2p_{visibility, arena},
        latency_ping_ms_p2p_{visibility, arena},
        _latency_ping_ms_p2p_cached_byte_size_{0},
        dummy_pad_(arena) {}

inline void CMsgSteamDatagramRouterPingReply::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, client_timestamp_),
           0,
           offsetof(Impl_, dummy_varint_) -
               offsetof(Impl_, client_timestamp_) +
               sizeof(Impl_::dummy_varint_));
}
CMsgSteamDatagramRouterPingReply::~CMsgSteamDatagramRouterPingReply() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramRouterPingReply)
  SharedDtor(*this);
}
inline void CMsgSteamDatagramRouterPingReply::SharedDtor(MessageLite& self) {
  CMsgSteamDatagramRouterPingReply& this_ = static_cast<CMsgSteamDatagramRouterPingReply&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.dummy_pad_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CMsgSteamDatagramRouterPingReply::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CMsgSteamDatagramRouterPingReply(arena);
}
constexpr auto CMsgSteamDatagramRouterPingReply::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.latency_datacenter_ids_) +
          decltype(CMsgSteamDatagramRouterPingReply::_impl_.latency_datacenter_ids_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.latency_ping_ms_) +
          decltype(CMsgSteamDatagramRouterPingReply::_impl_.latency_ping_ms_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.latency_datacenter_ids_p2p_) +
          decltype(CMsgSteamDatagramRouterPingReply::_impl_.latency_datacenter_ids_p2p_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.latency_ping_ms_p2p_) +
          decltype(CMsgSteamDatagramRouterPingReply::_impl_.latency_ping_ms_p2p_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.route_exceptions_) +
          decltype(CMsgSteamDatagramRouterPingReply::_impl_.route_exceptions_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.alt_addresses_) +
          decltype(CMsgSteamDatagramRouterPingReply::_impl_.alt_addresses_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(CMsgSteamDatagramRouterPingReply), alignof(CMsgSteamDatagramRouterPingReply), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&CMsgSteamDatagramRouterPingReply::PlacementNew_,
                                 sizeof(CMsgSteamDatagramRouterPingReply),
                                 alignof(CMsgSteamDatagramRouterPingReply));
  }
}
constexpr auto CMsgSteamDatagramRouterPingReply::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CMsgSteamDatagramRouterPingReply_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CMsgSteamDatagramRouterPingReply::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CMsgSteamDatagramRouterPingReply>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CMsgSteamDatagramRouterPingReply::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CMsgSteamDatagramRouterPingReply>(), &CMsgSteamDatagramRouterPingReply::ByteSizeLong,
              &CMsgSteamDatagramRouterPingReply::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_._cached_size_),
          false,
      },
      &CMsgSteamDatagramRouterPingReply::kDescriptorMethods,
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        CMsgSteamDatagramRouterPingReply_class_data_ =
            CMsgSteamDatagramRouterPingReply::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL CMsgSteamDatagramRouterPingReply::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CMsgSteamDatagramRouterPingReply_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CMsgSteamDatagramRouterPingReply_class_data_.tc_table);
  return CMsgSteamDatagramRouterPingReply_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 21, 2, 0, 7>
CMsgSteamDatagramRouterPingReply::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_._has_bits_),
    0, // no _extensions_
    100, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294443008,  // skipmap
    offsetof(decltype(_table_), field_entries),
    21,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    CMsgSteamDatagramRouterPingReply_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CMsgSteamDatagramRouterPingReply>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional fixed32 client_timestamp = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.client_timestamp_)}},
    // repeated fixed32 latency_datacenter_ids = 2 [packed = true];
    {::_pbi::TcParser::FastF32P1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.latency_datacenter_ids_)}},
    // repeated uint32 latency_ping_ms = 3 [packed = true];
    {::_pbi::TcParser::FastV32P1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.latency_ping_ms_)}},
    // optional fixed32 your_public_ip = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.your_public_ip_)}},
    // optional fixed32 server_time = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 4, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.server_time_)}},
    // optional fixed64 challenge = 6;
    {::_pbi::TcParser::FastF64S1,
     {49, 3, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.challenge_)}},
    // optional uint32 seconds_until_shutdown = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramRouterPingReply, _impl_.seconds_until_shutdown_), 5>(),
     {56, 5, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.seconds_until_shutdown_)}},
    // optional fixed32 client_cookie = 8;
    {::_pbi::TcParser::FastF32S1,
     {69, 6, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.client_cookie_)}},
    // optional uint32 scoring_penalty_relay_cluster = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramRouterPingReply, _impl_.scoring_penalty_relay_cluster_), 7>(),
     {72, 7, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.scoring_penalty_relay_cluster_)}},
    // repeated .CMsgSteamDatagramRouterPingReply.RouteException route_exceptions = 10;
    {::_pbi::TcParser::FastMtR1,
     {82, 63, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.route_exceptions_)}},
    // optional fixed32 your_public_port = 11;
    {::_pbi::TcParser::FastF32S1,
     {93, 8, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.your_public_port_)}},
    // optional uint32 flags = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramRouterPingReply, _impl_.flags_), 9>(),
     {96, 9, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.flags_)}},
    // repeated .CMsgSteamDatagramRouterPingReply.AltAddress alt_addresses = 13;
    {::_pbi::TcParser::FastMtR1,
     {106, 63, 1, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.alt_addresses_)}},
    // repeated fixed32 latency_datacenter_ids_p2p = 14 [packed = true];
    {::_pbi::TcParser::FastF32P1,
     {114, 63, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.latency_datacenter_ids_p2p_)}},
    // repeated uint32 latency_ping_ms_p2p = 15 [packed = true];
    {::_pbi::TcParser::FastV32P1,
     {122, 63, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.latency_ping_ms_p2p_)}},
    // optional uint32 recv_tos = 16;
    {::_pbi::TcParser::FastV32S2,
     {384, 10, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.recv_tos_)}},
    // optional uint32 echo_sent_tos = 17;
    {::_pbi::TcParser::FastV32S2,
     {392, 11, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.echo_sent_tos_)}},
    // optional uint32 sent_tos = 18;
    {::_pbi::TcParser::FastV32S2,
     {400, 12, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.sent_tos_)}},
    // optional uint32 echo_request_reply_tos = 19;
    {::_pbi::TcParser::FastV32S2,
     {408, 13, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.echo_request_reply_tos_)}},
    // optional uint64 dummy_varint = 100;
    {::_pbi::TcParser::FastV64S2,
     {1696, 14, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.dummy_varint_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    99, 0, 1,
    65532, 19,
    65535, 65535
  }}, {{
    // optional fixed32 client_timestamp = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.client_timestamp_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // repeated fixed32 latency_datacenter_ids = 2 [packed = true];
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.latency_datacenter_ids_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFixed32)},
    // repeated uint32 latency_ping_ms = 3 [packed = true];
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.latency_ping_ms_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedUInt32)},
    // optional fixed32 your_public_ip = 4;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.your_public_ip_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional fixed32 server_time = 5;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.server_time_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional fixed64 challenge = 6;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.challenge_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
    // optional uint32 seconds_until_shutdown = 7;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.seconds_until_shutdown_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional fixed32 client_cookie = 8;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.client_cookie_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional uint32 scoring_penalty_relay_cluster = 9;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.scoring_penalty_relay_cluster_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // repeated .CMsgSteamDatagramRouterPingReply.RouteException route_exceptions = 10;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.route_exceptions_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional fixed32 your_public_port = 11;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.your_public_port_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional uint32 flags = 12;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.flags_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // repeated .CMsgSteamDatagramRouterPingReply.AltAddress alt_addresses = 13;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.alt_addresses_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated fixed32 latency_datacenter_ids_p2p = 14 [packed = true];
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.latency_datacenter_ids_p2p_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedFixed32)},
    // repeated uint32 latency_ping_ms_p2p = 15 [packed = true];
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.latency_ping_ms_p2p_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedUInt32)},
    // optional uint32 recv_tos = 16;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.recv_tos_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 echo_sent_tos = 17;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.echo_sent_tos_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 sent_tos = 18;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.sent_tos_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 echo_request_reply_tos = 19;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.echo_request_reply_tos_), _Internal::kHasBitsOffset + 13, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional bytes dummy_pad = 99;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.dummy_pad_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional uint64 dummy_varint = 100;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.dummy_varint_), _Internal::kHasBitsOffset + 14, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::CMsgSteamDatagramRouterPingReply_RouteException>()},
      {::_pbi::TcParser::GetTable<::CMsgSteamDatagramRouterPingReply_AltAddress>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void CMsgSteamDatagramRouterPingReply::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramRouterPingReply)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.latency_datacenter_ids_.Clear();
  _impl_.latency_ping_ms_.Clear();
  _impl_.route_exceptions_.Clear();
  _impl_.alt_addresses_.Clear();
  _impl_.latency_datacenter_ids_p2p_.Clear();
  _impl_.latency_ping_ms_p2p_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _impl_.dummy_pad_.ClearNonDefaultToEmpty();
  }
  if ((cached_has_bits & 0x000000feu) != 0) {
    ::memset(&_impl_.client_timestamp_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.scoring_penalty_relay_cluster_) -
        reinterpret_cast<char*>(&_impl_.client_timestamp_)) + sizeof(_impl_.scoring_penalty_relay_cluster_));
  }
  if ((cached_has_bits & 0x00007f00u) != 0) {
    ::memset(&_impl_.your_public_port_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.dummy_varint_) -
        reinterpret_cast<char*>(&_impl_.your_public_port_)) + sizeof(_impl_.dummy_varint_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramRouterPingReply::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CMsgSteamDatagramRouterPingReply& this_ = static_cast<const CMsgSteamDatagramRouterPingReply&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramRouterPingReply::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CMsgSteamDatagramRouterPingReply& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramRouterPingReply)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional fixed32 client_timestamp = 1;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        1, this_._internal_client_timestamp(), target);
  }

  // repeated fixed32 latency_datacenter_ids = 2 [packed = true];
  if (this_._internal_latency_datacenter_ids_size() > 0) {
    target = stream->WriteFixedPacked(2, this_._internal_latency_datacenter_ids(), target);
  }

  // repeated uint32 latency_ping_ms = 3 [packed = true];
  {
    int byte_size = this_._impl_._latency_ping_ms_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          3, this_._internal_latency_ping_ms(), byte_size, target);
    }
  }

  // optional fixed32 your_public_ip = 4;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        4, this_._internal_your_public_ip(), target);
  }

  // optional fixed32 server_time = 5;
  if ((cached_has_bits & 0x00000010u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        5, this_._internal_server_time(), target);
  }

  // optional fixed64 challenge = 6;
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        6, this_._internal_challenge(), target);
  }

  // optional uint32 seconds_until_shutdown = 7;
  if ((cached_has_bits & 0x00000020u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        7, this_._internal_seconds_until_shutdown(), target);
  }

  // optional fixed32 client_cookie = 8;
  if ((cached_has_bits & 0x00000040u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        8, this_._internal_client_cookie(), target);
  }

  // optional uint32 scoring_penalty_relay_cluster = 9;
  if ((cached_has_bits & 0x00000080u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        9, this_._internal_scoring_penalty_relay_cluster(), target);
  }

  // repeated .CMsgSteamDatagramRouterPingReply.RouteException route_exceptions = 10;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_route_exceptions_size());
       i < n; i++) {
    const auto& repfield = this_._internal_route_exceptions().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            10, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // optional fixed32 your_public_port = 11;
  if ((cached_has_bits & 0x00000100u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        11, this_._internal_your_public_port(), target);
  }

  // optional uint32 flags = 12;
  if ((cached_has_bits & 0x00000200u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        12, this_._internal_flags(), target);
  }

  // repeated .CMsgSteamDatagramRouterPingReply.AltAddress alt_addresses = 13;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_alt_addresses_size());
       i < n; i++) {
    const auto& repfield = this_._internal_alt_addresses().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            13, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated fixed32 latency_datacenter_ids_p2p = 14 [packed = true];
  if (this_._internal_latency_datacenter_ids_p2p_size() > 0) {
    target = stream->WriteFixedPacked(14, this_._internal_latency_datacenter_ids_p2p(), target);
  }

  // repeated uint32 latency_ping_ms_p2p = 15 [packed = true];
  {
    int byte_size = this_._impl_._latency_ping_ms_p2p_cached_byte_size_.Get();
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          15, this_._internal_latency_ping_ms_p2p(), byte_size, target);
    }
  }

  // optional uint32 recv_tos = 16;
  if ((cached_has_bits & 0x00000400u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        16, this_._internal_recv_tos(), target);
  }

  // optional uint32 echo_sent_tos = 17;
  if ((cached_has_bits & 0x00000800u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        17, this_._internal_echo_sent_tos(), target);
  }

  // optional uint32 sent_tos = 18;
  if ((cached_has_bits & 0x00001000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        18, this_._internal_sent_tos(), target);
  }

  // optional uint32 echo_request_reply_tos = 19;
  if ((cached_has_bits & 0x00002000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        19, this_._internal_echo_request_reply_tos(), target);
  }

  // optional bytes dummy_pad = 99;
  if ((cached_has_bits & 0x00000001u) != 0) {
    const std::string& _s = this_._internal_dummy_pad();
    target = stream->WriteBytesMaybeAliased(99, _s, target);
  }

  // optional uint64 dummy_varint = 100;
  if ((cached_has_bits & 0x00004000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        100, this_._internal_dummy_varint(), target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramRouterPingReply)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CMsgSteamDatagramRouterPingReply::ByteSizeLong(const MessageLite& base) {
  const CMsgSteamDatagramRouterPingReply& this_ = static_cast<const CMsgSteamDatagramRouterPingReply&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t CMsgSteamDatagramRouterPingReply::ByteSizeLong() const {
  const CMsgSteamDatagramRouterPingReply& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramRouterPingReply)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated fixed32 latency_datacenter_ids = 2 [packed = true];
    {
      std::size_t data_size = std::size_t{4} *
          ::_pbi::FromIntSize(this_._internal_latency_datacenter_ids_size());
      std::size_t tag_size = data_size == 0
          ? 0
          : 1 + ::_pbi::WireFormatLite::Int32Size(
                              static_cast<::int32_t>(data_size));
      total_size += tag_size + data_size;
    }
    // repeated uint32 latency_ping_ms = 3 [packed = true];
    {
      total_size +=
          ::_pbi::WireFormatLite::UInt32SizeWithPackedTagSize(
              this_._internal_latency_ping_ms(), 1,
              this_._impl_._latency_ping_ms_cached_byte_size_);
    }
    // repeated .CMsgSteamDatagramRouterPingReply.RouteException route_exceptions = 10;
    {
      total_size += 1UL * this_._internal_route_exceptions_size();
      for (const auto& msg : this_._internal_route_exceptions()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
    // repeated .CMsgSteamDatagramRouterPingReply.AltAddress alt_addresses = 13;
    {
      total_size += 1UL * this_._internal_alt_addresses_size();
      for (const auto& msg : this_._internal_alt_addresses()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
    // repeated fixed32 latency_datacenter_ids_p2p = 14 [packed = true];
    {
      std::size_t data_size = std::size_t{4} *
          ::_pbi::FromIntSize(this_._internal_latency_datacenter_ids_p2p_size());
      std::size_t tag_size = data_size == 0
          ? 0
          : 1 + ::_pbi::WireFormatLite::Int32Size(
                              static_cast<::int32_t>(data_size));
      total_size += tag_size + data_size;
    }
    // repeated uint32 latency_ping_ms_p2p = 15 [packed = true];
    {
      total_size +=
          ::_pbi::WireFormatLite::UInt32SizeWithPackedTagSize(
              this_._internal_latency_ping_ms_p2p(), 1,
              this_._impl_._latency_ping_ms_p2p_cached_byte_size_);
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += static_cast<bool>(0x00000008u & cached_has_bits) * 9;
  total_size += ::absl::popcount(0x00000156u & cached_has_bits) * 5;
  if ((cached_has_bits & 0x000000a1u) != 0) {
    // optional bytes dummy_pad = 99;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this_._internal_dummy_pad());
    }
    // optional uint32 seconds_until_shutdown = 7;
    if ((cached_has_bits & 0x00000020u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_seconds_until_shutdown());
    }
    // optional uint32 scoring_penalty_relay_cluster = 9;
    if ((cached_has_bits & 0x00000080u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_scoring_penalty_relay_cluster());
    }
  }
  if ((cached_has_bits & 0x00007e00u) != 0) {
    // optional uint32 flags = 12;
    if ((cached_has_bits & 0x00000200u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_flags());
    }
    // optional uint32 recv_tos = 16;
    if ((cached_has_bits & 0x00000400u) != 0) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this_._internal_recv_tos());
    }
    // optional uint32 echo_sent_tos = 17;
    if ((cached_has_bits & 0x00000800u) != 0) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this_._internal_echo_sent_tos());
    }
    // optional uint32 sent_tos = 18;
    if ((cached_has_bits & 0x00001000u) != 0) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this_._internal_sent_tos());
    }
    // optional uint32 echo_request_reply_tos = 19;
    if ((cached_has_bits & 0x00002000u) != 0) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this_._internal_echo_request_reply_tos());
    }
    // optional uint64 dummy_varint = 100;
    if ((cached_has_bits & 0x00004000u) != 0) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt64Size(
                                      this_._internal_dummy_varint());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void CMsgSteamDatagramRouterPingReply::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramRouterPingReply*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramRouterPingReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramRouterPingReply)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_latency_datacenter_ids()->MergeFrom(from._internal_latency_datacenter_ids());
  _this->_internal_mutable_latency_ping_ms()->MergeFrom(from._internal_latency_ping_ms());
  _this->_internal_mutable_route_exceptions()->MergeFrom(
      from._internal_route_exceptions());
  _this->_internal_mutable_alt_addresses()->MergeFrom(
      from._internal_alt_addresses());
  _this->_internal_mutable_latency_datacenter_ids_p2p()->MergeFrom(from._internal_latency_datacenter_ids_p2p());
  _this->_internal_mutable_latency_ping_ms_p2p()->MergeFrom(from._internal_latency_ping_ms_p2p());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_internal_set_dummy_pad(from._internal_dummy_pad());
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_impl_.client_timestamp_ = from._impl_.client_timestamp_;
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_impl_.your_public_ip_ = from._impl_.your_public_ip_;
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _this->_impl_.challenge_ = from._impl_.challenge_;
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _this->_impl_.server_time_ = from._impl_.server_time_;
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      _this->_impl_.seconds_until_shutdown_ = from._impl_.seconds_until_shutdown_;
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      _this->_impl_.client_cookie_ = from._impl_.client_cookie_;
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      _this->_impl_.scoring_penalty_relay_cluster_ = from._impl_.scoring_penalty_relay_cluster_;
    }
  }
  if ((cached_has_bits & 0x00007f00u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      _this->_impl_.your_public_port_ = from._impl_.your_public_port_;
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      _this->_impl_.flags_ = from._impl_.flags_;
    }
    if ((cached_has_bits & 0x00000400u) != 0) {
      _this->_impl_.recv_tos_ = from._impl_.recv_tos_;
    }
    if ((cached_has_bits & 0x00000800u) != 0) {
      _this->_impl_.echo_sent_tos_ = from._impl_.echo_sent_tos_;
    }
    if ((cached_has_bits & 0x00001000u) != 0) {
      _this->_impl_.sent_tos_ = from._impl_.sent_tos_;
    }
    if ((cached_has_bits & 0x00002000u) != 0) {
      _this->_impl_.echo_request_reply_tos_ = from._impl_.echo_request_reply_tos_;
    }
    if ((cached_has_bits & 0x00004000u) != 0) {
      _this->_impl_.dummy_varint_ = from._impl_.dummy_varint_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramRouterPingReply::CopyFrom(const CMsgSteamDatagramRouterPingReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramRouterPingReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CMsgSteamDatagramRouterPingReply::InternalSwap(CMsgSteamDatagramRouterPingReply* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.latency_datacenter_ids_.InternalSwap(&other->_impl_.latency_datacenter_ids_);
  _impl_.latency_ping_ms_.InternalSwap(&other->_impl_.latency_ping_ms_);
  _impl_.route_exceptions_.InternalSwap(&other->_impl_.route_exceptions_);
  _impl_.alt_addresses_.InternalSwap(&other->_impl_.alt_addresses_);
  _impl_.latency_datacenter_ids_p2p_.InternalSwap(&other->_impl_.latency_datacenter_ids_p2p_);
  _impl_.latency_ping_ms_p2p_.InternalSwap(&other->_impl_.latency_ping_ms_p2p_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.dummy_pad_, &other->_impl_.dummy_pad_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.dummy_varint_)
      + sizeof(CMsgSteamDatagramRouterPingReply::_impl_.dummy_varint_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramRouterPingReply, _impl_.client_timestamp_)>(
          reinterpret_cast<char*>(&_impl_.client_timestamp_),
          reinterpret_cast<char*>(&other->_impl_.client_timestamp_));
}

::google::protobuf::Metadata CMsgSteamDatagramRouterPingReply::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CMsgSteamDatagramGameserverPingRequestBody::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CMsgSteamDatagramGameserverPingRequestBody>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestBody, _impl_._has_bits_);
};

CMsgSteamDatagramGameserverPingRequestBody::CMsgSteamDatagramGameserverPingRequestBody(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramGameserverPingRequestBody_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramGameserverPingRequestBody)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramGameserverPingRequestBody::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::CMsgSteamDatagramGameserverPingRequestBody& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        my_ips_{visibility, arena, from.my_ips_},
        echo_(arena, from.echo_) {}

CMsgSteamDatagramGameserverPingRequestBody::CMsgSteamDatagramGameserverPingRequestBody(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const CMsgSteamDatagramGameserverPingRequestBody& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramGameserverPingRequestBody_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CMsgSteamDatagramGameserverPingRequestBody* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.your_public_ip_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.your_public_ip_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, relay_popid_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, relay_popid_),
           offsetof(Impl_, routing_secret_) -
               offsetof(Impl_, relay_popid_) +
               sizeof(Impl_::routing_secret_));

  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramGameserverPingRequestBody)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramGameserverPingRequestBody::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        my_ips_{visibility, arena},
        echo_(arena) {}

inline void CMsgSteamDatagramGameserverPingRequestBody::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, your_public_ip_),
           0,
           offsetof(Impl_, routing_secret_) -
               offsetof(Impl_, your_public_ip_) +
               sizeof(Impl_::routing_secret_));
}
CMsgSteamDatagramGameserverPingRequestBody::~CMsgSteamDatagramGameserverPingRequestBody() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramGameserverPingRequestBody)
  SharedDtor(*this);
}
inline void CMsgSteamDatagramGameserverPingRequestBody::SharedDtor(MessageLite& self) {
  CMsgSteamDatagramGameserverPingRequestBody& this_ = static_cast<CMsgSteamDatagramGameserverPingRequestBody&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.echo_.Destroy();
  delete this_._impl_.your_public_ip_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CMsgSteamDatagramGameserverPingRequestBody::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CMsgSteamDatagramGameserverPingRequestBody(arena);
}
constexpr auto CMsgSteamDatagramGameserverPingRequestBody::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestBody, _impl_.my_ips_) +
          decltype(CMsgSteamDatagramGameserverPingRequestBody::_impl_.my_ips_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(CMsgSteamDatagramGameserverPingRequestBody), alignof(CMsgSteamDatagramGameserverPingRequestBody), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&CMsgSteamDatagramGameserverPingRequestBody::PlacementNew_,
                                 sizeof(CMsgSteamDatagramGameserverPingRequestBody),
                                 alignof(CMsgSteamDatagramGameserverPingRequestBody));
  }
}
constexpr auto CMsgSteamDatagramGameserverPingRequestBody::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CMsgSteamDatagramGameserverPingRequestBody_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CMsgSteamDatagramGameserverPingRequestBody::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CMsgSteamDatagramGameserverPingRequestBody>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CMsgSteamDatagramGameserverPingRequestBody::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CMsgSteamDatagramGameserverPingRequestBody>(), &CMsgSteamDatagramGameserverPingRequestBody::ByteSizeLong,
              &CMsgSteamDatagramGameserverPingRequestBody::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestBody, _impl_._cached_size_),
          false,
      },
      &CMsgSteamDatagramGameserverPingRequestBody::kDescriptorMethods,
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        CMsgSteamDatagramGameserverPingRequestBody_class_data_ =
            CMsgSteamDatagramGameserverPingRequestBody::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL CMsgSteamDatagramGameserverPingRequestBody::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CMsgSteamDatagramGameserverPingRequestBody_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CMsgSteamDatagramGameserverPingRequestBody_class_data_.tc_table);
  return CMsgSteamDatagramGameserverPingRequestBody_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 2, 0, 2>
CMsgSteamDatagramGameserverPingRequestBody::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestBody, _impl_._has_bits_),
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967104,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    CMsgSteamDatagramGameserverPingRequestBody_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CMsgSteamDatagramGameserverPingRequestBody>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional bytes echo = 8;
    {::_pbi::TcParser::FastBS1,
     {66, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestBody, _impl_.echo_)}},
    // optional fixed32 relay_popid = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestBody, _impl_.relay_popid_)}},
    // optional .CMsgSteamNetworkingIPAddress your_public_ip = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestBody, _impl_.your_public_ip_)}},
    // optional uint32 your_public_port = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramGameserverPingRequestBody, _impl_.your_public_port_), 3>(),
     {24, 3, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestBody, _impl_.your_public_port_)}},
    // optional uint64 relay_unix_time = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(CMsgSteamDatagramGameserverPingRequestBody, _impl_.relay_unix_time_), 4>(),
     {32, 4, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestBody, _impl_.relay_unix_time_)}},
    // optional fixed64 routing_secret = 5;
    {::_pbi::TcParser::FastF64S1,
     {41, 5, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestBody, _impl_.routing_secret_)}},
    // repeated .CMsgSteamNetworkingIPAddress my_ips = 6;
    {::_pbi::TcParser::FastMtR1,
     {50, 63, 1, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestBody, _impl_.my_ips_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional fixed32 relay_popid = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestBody, _impl_.relay_popid_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional .CMsgSteamNetworkingIPAddress your_public_ip = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestBody, _impl_.your_public_ip_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional uint32 your_public_port = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestBody, _impl_.your_public_port_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint64 relay_unix_time = 4;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestBody, _impl_.relay_unix_time_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // optional fixed64 routing_secret = 5;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestBody, _impl_.routing_secret_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
    // repeated .CMsgSteamNetworkingIPAddress my_ips = 6;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestBody, _impl_.my_ips_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional bytes echo = 8;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestBody, _impl_.echo_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::CMsgSteamNetworkingIPAddress>()},
      {::_pbi::TcParser::GetTable<::CMsgSteamNetworkingIPAddress>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void CMsgSteamDatagramGameserverPingRequestBody::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramGameserverPingRequestBody)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.my_ips_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.echo_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.your_public_ip_ != nullptr);
      _impl_.your_public_ip_->Clear();
    }
  }
  if ((cached_has_bits & 0x0000003cu) != 0) {
    ::memset(&_impl_.relay_popid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.routing_secret_) -
        reinterpret_cast<char*>(&_impl_.relay_popid_)) + sizeof(_impl_.routing_secret_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramGameserverPingRequestBody::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CMsgSteamDatagramGameserverPingRequestBody& this_ = static_cast<const CMsgSteamDatagramGameserverPingRequestBody&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramGameserverPingRequestBody::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CMsgSteamDatagramGameserverPingRequestBody& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramGameserverPingRequestBody)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional fixed32 relay_popid = 1;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        1, this_._internal_relay_popid(), target);
  }

  // optional .CMsgSteamNetworkingIPAddress your_public_ip = 2;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.your_public_ip_, this_._impl_.your_public_ip_->GetCachedSize(), target,
        stream);
  }

  // optional uint32 your_public_port = 3;
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this_._internal_your_public_port(), target);
  }

  // optional uint64 relay_unix_time = 4;
  if ((cached_has_bits & 0x00000010u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        4, this_._internal_relay_unix_time(), target);
  }

  // optional fixed64 routing_secret = 5;
  if ((cached_has_bits & 0x00000020u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        5, this_._internal_routing_secret(), target);
  }

  // repeated .CMsgSteamNetworkingIPAddress my_ips = 6;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_my_ips_size());
       i < n; i++) {
    const auto& repfield = this_._internal_my_ips().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            6, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // optional bytes echo = 8;
  if ((cached_has_bits & 0x00000001u) != 0) {
    const std::string& _s = this_._internal_echo();
    target = stream->WriteBytesMaybeAliased(8, _s, target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramGameserverPingRequestBody)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CMsgSteamDatagramGameserverPingRequestBody::ByteSizeLong(const MessageLite& base) {
  const CMsgSteamDatagramGameserverPingRequestBody& this_ = static_cast<const CMsgSteamDatagramGameserverPingRequestBody&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t CMsgSteamDatagramGameserverPingRequestBody::ByteSizeLong() const {
  const CMsgSteamDatagramGameserverPingRequestBody& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramGameserverPingRequestBody)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .CMsgSteamNetworkingIPAddress my_ips = 6;
    {
      total_size += 1UL * this_._internal_my_ips_size();
      for (const auto& msg : this_._internal_my_ips()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += static_cast<bool>(0x00000020u & cached_has_bits) * 9;
  total_size += static_cast<bool>(0x00000004u & cached_has_bits) * 5;
  if ((cached_has_bits & 0x0000001bu) != 0) {
    // optional bytes echo = 8;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this_._internal_echo());
    }
    // optional .CMsgSteamNetworkingIPAddress your_public_ip = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.your_public_ip_);
    }
    // optional uint32 your_public_port = 3;
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_your_public_port());
    }
    // optional uint64 relay_unix_time = 4;
    if ((cached_has_bits & 0x00000010u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this_._internal_relay_unix_time());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void CMsgSteamDatagramGameserverPingRequestBody::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramGameserverPingRequestBody*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramGameserverPingRequestBody&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramGameserverPingRequestBody)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_my_ips()->MergeFrom(
      from._internal_my_ips());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_internal_set_echo(from._internal_echo());
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.your_public_ip_ != nullptr);
      if (_this->_impl_.your_public_ip_ == nullptr) {
        _this->_impl_.your_public_ip_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.your_public_ip_);
      } else {
        _this->_impl_.your_public_ip_->MergeFrom(*from._impl_.your_public_ip_);
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_impl_.relay_popid_ = from._impl_.relay_popid_;
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _this->_impl_.your_public_port_ = from._impl_.your_public_port_;
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _this->_impl_.relay_unix_time_ = from._impl_.relay_unix_time_;
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      _this->_impl_.routing_secret_ = from._impl_.routing_secret_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramGameserverPingRequestBody::CopyFrom(const CMsgSteamDatagramGameserverPingRequestBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramGameserverPingRequestBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CMsgSteamDatagramGameserverPingRequestBody::InternalSwap(CMsgSteamDatagramGameserverPingRequestBody* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.my_ips_.InternalSwap(&other->_impl_.my_ips_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.echo_, &other->_impl_.echo_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestBody, _impl_.routing_secret_)
      + sizeof(CMsgSteamDatagramGameserverPingRequestBody::_impl_.routing_secret_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestBody, _impl_.your_public_ip_)>(
          reinterpret_cast<char*>(&_impl_.your_public_ip_),
          reinterpret_cast<char*>(&other->_impl_.your_public_ip_));
}

::google::protobuf::Metadata CMsgSteamDatagramGameserverPingRequestBody::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CMsgSteamDatagramGameserverPingRequestEnvelope::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CMsgSteamDatagramGameserverPingRequestEnvelope>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestEnvelope, _impl_._has_bits_);
};

void CMsgSteamDatagramGameserverPingRequestEnvelope::clear_cert() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.cert_ != nullptr) _impl_.cert_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
CMsgSteamDatagramGameserverPingRequestEnvelope::CMsgSteamDatagramGameserverPingRequestEnvelope(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramGameserverPingRequestEnvelope_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramGameserverPingRequestEnvelope)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramGameserverPingRequestEnvelope::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::CMsgSteamDatagramGameserverPingRequestEnvelope& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        signed_data_(arena, from.signed_data_),
        signature_(arena, from.signature_),
        dummy_pad_(arena, from.dummy_pad_) {}

CMsgSteamDatagramGameserverPingRequestEnvelope::CMsgSteamDatagramGameserverPingRequestEnvelope(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const CMsgSteamDatagramGameserverPingRequestEnvelope& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramGameserverPingRequestEnvelope_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CMsgSteamDatagramGameserverPingRequestEnvelope* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.cert_ = ((cached_has_bits & 0x00000008u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.cert_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, legacy_your_public_ip_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, legacy_your_public_ip_),
           offsetof(Impl_, legacy_your_public_port_) -
               offsetof(Impl_, legacy_your_public_ip_) +
               sizeof(Impl_::legacy_your_public_port_));

  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramGameserverPingRequestEnvelope)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramGameserverPingRequestEnvelope::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        signed_data_(arena),
        signature_(arena),
        dummy_pad_(arena) {}

inline void CMsgSteamDatagramGameserverPingRequestEnvelope::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, cert_),
           0,
           offsetof(Impl_, legacy_your_public_port_) -
               offsetof(Impl_, cert_) +
               sizeof(Impl_::legacy_your_public_port_));
}
CMsgSteamDatagramGameserverPingRequestEnvelope::~CMsgSteamDatagramGameserverPingRequestEnvelope() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramGameserverPingRequestEnvelope)
  SharedDtor(*this);
}
inline void CMsgSteamDatagramGameserverPingRequestEnvelope::SharedDtor(MessageLite& self) {
  CMsgSteamDatagramGameserverPingRequestEnvelope& this_ = static_cast<CMsgSteamDatagramGameserverPingRequestEnvelope&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.signed_data_.Destroy();
  this_._impl_.signature_.Destroy();
  this_._impl_.dummy_pad_.Destroy();
  delete this_._impl_.cert_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CMsgSteamDatagramGameserverPingRequestEnvelope::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CMsgSteamDatagramGameserverPingRequestEnvelope(arena);
}
constexpr auto CMsgSteamDatagramGameserverPingRequestEnvelope::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(CMsgSteamDatagramGameserverPingRequestEnvelope),
                                            alignof(CMsgSteamDatagramGameserverPingRequestEnvelope));
}
constexpr auto CMsgSteamDatagramGameserverPingRequestEnvelope::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CMsgSteamDatagramGameserverPingRequestEnvelope_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CMsgSteamDatagramGameserverPingRequestEnvelope::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CMsgSteamDatagramGameserverPingRequestEnvelope>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CMsgSteamDatagramGameserverPingRequestEnvelope::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CMsgSteamDatagramGameserverPingRequestEnvelope>(), &CMsgSteamDatagramGameserverPingRequestEnvelope::ByteSizeLong,
              &CMsgSteamDatagramGameserverPingRequestEnvelope::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestEnvelope, _impl_._cached_size_),
          false,
      },
      &CMsgSteamDatagramGameserverPingRequestEnvelope::kDescriptorMethods,
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        CMsgSteamDatagramGameserverPingRequestEnvelope_class_data_ =
            CMsgSteamDatagramGameserverPingRequestEnvelope::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL CMsgSteamDatagramGameserverPingRequestEnvelope::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CMsgSteamDatagramGameserverPingRequestEnvelope_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CMsgSteamDatagramGameserverPingRequestEnvelope_class_data_.tc_table);
  return CMsgSteamDatagramGameserverPingRequestEnvelope_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 9, 1, 0, 7>
CMsgSteamDatagramGameserverPingRequestEnvelope::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestEnvelope, _impl_._has_bits_),
    0, // no _extensions_
    1023, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    CMsgSteamDatagramGameserverPingRequestEnvelope_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CMsgSteamDatagramGameserverPingRequestEnvelope>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional fixed32 legacy_your_public_ip = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 4, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestEnvelope, _impl_.legacy_your_public_ip_)}},
    // optional fixed32 legacy_relay_unix_time = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 5, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestEnvelope, _impl_.legacy_relay_unix_time_)}},
    // optional fixed64 legacy_challenge = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 6, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestEnvelope, _impl_.legacy_challenge_)}},
    // optional fixed32 legacy_router_timestamp = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 7, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestEnvelope, _impl_.legacy_router_timestamp_)}},
    // optional fixed32 legacy_your_public_port = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 8, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestEnvelope, _impl_.legacy_your_public_port_)}},
    // optional .CMsgSteamDatagramCertificateSigned cert = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 3, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestEnvelope, _impl_.cert_)}},
    // optional bytes signed_data = 7;
    {::_pbi::TcParser::FastBS1,
     {58, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestEnvelope, _impl_.signed_data_)}},
    // optional bytes signature = 8;
    {::_pbi::TcParser::FastBS1,
     {66, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestEnvelope, _impl_.signature_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional bytes dummy_pad = 1023;
    {::_pbi::TcParser::FastBS2,
     {16378, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestEnvelope, _impl_.dummy_pad_)}},
  }}, {{
    1023, 0, 1,
    65534, 8,
    65535, 65535
  }}, {{
    // optional fixed32 legacy_your_public_ip = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestEnvelope, _impl_.legacy_your_public_ip_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional fixed32 legacy_relay_unix_time = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestEnvelope, _impl_.legacy_relay_unix_time_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional fixed64 legacy_challenge = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestEnvelope, _impl_.legacy_challenge_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
    // optional fixed32 legacy_router_timestamp = 4;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestEnvelope, _impl_.legacy_router_timestamp_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional fixed32 legacy_your_public_port = 5;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestEnvelope, _impl_.legacy_your_public_port_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional .CMsgSteamDatagramCertificateSigned cert = 6;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestEnvelope, _impl_.cert_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional bytes signed_data = 7;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestEnvelope, _impl_.signed_data_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional bytes signature = 8;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestEnvelope, _impl_.signature_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional bytes dummy_pad = 1023;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestEnvelope, _impl_.dummy_pad_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::CMsgSteamDatagramCertificateSigned>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void CMsgSteamDatagramGameserverPingRequestEnvelope::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramGameserverPingRequestEnvelope)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.signed_data_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.signature_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _impl_.dummy_pad_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      ABSL_DCHECK(_impl_.cert_ != nullptr);
      _impl_.cert_->Clear();
    }
  }
  if ((cached_has_bits & 0x000000f0u) != 0) {
    ::memset(&_impl_.legacy_your_public_ip_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.legacy_router_timestamp_) -
        reinterpret_cast<char*>(&_impl_.legacy_your_public_ip_)) + sizeof(_impl_.legacy_router_timestamp_));
  }
  _impl_.legacy_your_public_port_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramGameserverPingRequestEnvelope::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CMsgSteamDatagramGameserverPingRequestEnvelope& this_ = static_cast<const CMsgSteamDatagramGameserverPingRequestEnvelope&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramGameserverPingRequestEnvelope::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CMsgSteamDatagramGameserverPingRequestEnvelope& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramGameserverPingRequestEnvelope)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional fixed32 legacy_your_public_ip = 1;
  if ((cached_has_bits & 0x00000010u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        1, this_._internal_legacy_your_public_ip(), target);
  }

  // optional fixed32 legacy_relay_unix_time = 2;
  if ((cached_has_bits & 0x00000020u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        2, this_._internal_legacy_relay_unix_time(), target);
  }

  // optional fixed64 legacy_challenge = 3;
  if ((cached_has_bits & 0x00000040u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        3, this_._internal_legacy_challenge(), target);
  }

  // optional fixed32 legacy_router_timestamp = 4;
  if ((cached_has_bits & 0x00000080u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        4, this_._internal_legacy_router_timestamp(), target);
  }

  // optional fixed32 legacy_your_public_port = 5;
  if ((cached_has_bits & 0x00000100u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        5, this_._internal_legacy_your_public_port(), target);
  }

  // optional .CMsgSteamDatagramCertificateSigned cert = 6;
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, *this_._impl_.cert_, this_._impl_.cert_->GetCachedSize(), target,
        stream);
  }

  // optional bytes signed_data = 7;
  if ((cached_has_bits & 0x00000001u) != 0) {
    const std::string& _s = this_._internal_signed_data();
    target = stream->WriteBytesMaybeAliased(7, _s, target);
  }

  // optional bytes signature = 8;
  if ((cached_has_bits & 0x00000002u) != 0) {
    const std::string& _s = this_._internal_signature();
    target = stream->WriteBytesMaybeAliased(8, _s, target);
  }

  // optional bytes dummy_pad = 1023;
  if ((cached_has_bits & 0x00000004u) != 0) {
    const std::string& _s = this_._internal_dummy_pad();
    target = stream->WriteBytesMaybeAliased(1023, _s, target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramGameserverPingRequestEnvelope)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CMsgSteamDatagramGameserverPingRequestEnvelope::ByteSizeLong(const MessageLite& base) {
  const CMsgSteamDatagramGameserverPingRequestEnvelope& this_ = static_cast<const CMsgSteamDatagramGameserverPingRequestEnvelope&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t CMsgSteamDatagramGameserverPingRequestEnvelope::ByteSizeLong() const {
  const CMsgSteamDatagramGameserverPingRequestEnvelope& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramGameserverPingRequestEnvelope)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += static_cast<bool>(0x00000040u & cached_has_bits) * 9;
  total_size += ::absl::popcount(0x000001b0u & cached_has_bits) * 5;
  if ((cached_has_bits & 0x0000000fu) != 0) {
    // optional bytes signed_data = 7;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this_._internal_signed_data());
    }
    // optional bytes signature = 8;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this_._internal_signature());
    }
    // optional bytes dummy_pad = 1023;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this_._internal_dummy_pad());
    }
    // optional .CMsgSteamDatagramCertificateSigned cert = 6;
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.cert_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void CMsgSteamDatagramGameserverPingRequestEnvelope::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramGameserverPingRequestEnvelope*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramGameserverPingRequestEnvelope&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramGameserverPingRequestEnvelope)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_internal_set_signed_data(from._internal_signed_data());
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_internal_set_signature(from._internal_signature());
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_internal_set_dummy_pad(from._internal_dummy_pad());
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      ABSL_DCHECK(from._impl_.cert_ != nullptr);
      if (_this->_impl_.cert_ == nullptr) {
        _this->_impl_.cert_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.cert_);
      } else {
        _this->_impl_.cert_->MergeFrom(*from._impl_.cert_);
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _this->_impl_.legacy_your_public_ip_ = from._impl_.legacy_your_public_ip_;
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      _this->_impl_.legacy_relay_unix_time_ = from._impl_.legacy_relay_unix_time_;
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      _this->_impl_.legacy_challenge_ = from._impl_.legacy_challenge_;
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      _this->_impl_.legacy_router_timestamp_ = from._impl_.legacy_router_timestamp_;
    }
  }
  if ((cached_has_bits & 0x00000100u) != 0) {
    _this->_impl_.legacy_your_public_port_ = from._impl_.legacy_your_public_port_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramGameserverPingRequestEnvelope::CopyFrom(const CMsgSteamDatagramGameserverPingRequestEnvelope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramGameserverPingRequestEnvelope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CMsgSteamDatagramGameserverPingRequestEnvelope::InternalSwap(CMsgSteamDatagramGameserverPingRequestEnvelope* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.signed_data_, &other->_impl_.signed_data_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.signature_, &other->_impl_.signature_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.dummy_pad_, &other->_impl_.dummy_pad_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestEnvelope, _impl_.legacy_your_public_port_)
      + sizeof(CMsgSteamDatagramGameserverPingRequestEnvelope::_impl_.legacy_your_public_port_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingRequestEnvelope, _impl_.cert_)>(
          reinterpret_cast<char*>(&_impl_.cert_),
          reinterpret_cast<char*>(&other->_impl_.cert_));
}

::google::protobuf::Metadata CMsgSteamDatagramGameserverPingRequestEnvelope::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CMsgSteamDatagramGameserverPingReplyData::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CMsgSteamDatagramGameserverPingReplyData>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingReplyData, _impl_._has_bits_);
};

CMsgSteamDatagramGameserverPingReplyData::CMsgSteamDatagramGameserverPingReplyData(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramGameserverPingReplyData_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramGameserverPingReplyData)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramGameserverPingReplyData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::CMsgSteamDatagramGameserverPingReplyData& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        echo_(arena, from.echo_),
        build_(arena, from.build_),
        routing_blob_(arena, from.routing_blob_) {}

CMsgSteamDatagramGameserverPingReplyData::CMsgSteamDatagramGameserverPingReplyData(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const CMsgSteamDatagramGameserverPingReplyData& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramGameserverPingReplyData_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CMsgSteamDatagramGameserverPingReplyData* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, legacy_challenge_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, legacy_challenge_),
           offsetof(Impl_, network_config_version_) -
               offsetof(Impl_, legacy_challenge_) +
               sizeof(Impl_::network_config_version_));

  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramGameserverPingReplyData)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramGameserverPingReplyData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        echo_(arena),
        build_(arena),
        routing_blob_(arena) {}

inline void CMsgSteamDatagramGameserverPingReplyData::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, legacy_challenge_),
           0,
           offsetof(Impl_, network_config_version_) -
               offsetof(Impl_, legacy_challenge_) +
               sizeof(Impl_::network_config_version_));
}
CMsgSteamDatagramGameserverPingReplyData::~CMsgSteamDatagramGameserverPingReplyData() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramGameserverPingReplyData)
  SharedDtor(*this);
}
inline void CMsgSteamDatagramGameserverPingReplyData::SharedDtor(MessageLite& self) {
  CMsgSteamDatagramGameserverPingReplyData& this_ = static_cast<CMsgSteamDatagramGameserverPingReplyData&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.echo_.Destroy();
  this_._impl_.build_.Destroy();
  this_._impl_.routing_blob_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CMsgSteamDatagramGameserverPingReplyData::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CMsgSteamDatagramGameserverPingReplyData(arena);
}
constexpr auto CMsgSteamDatagramGameserverPingReplyData::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(CMsgSteamDatagramGameserverPingReplyData),
                                            alignof(CMsgSteamDatagramGameserverPingReplyData));
}
constexpr auto CMsgSteamDatagramGameserverPingReplyData::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CMsgSteamDatagramGameserverPingReplyData_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CMsgSteamDatagramGameserverPingReplyData::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CMsgSteamDatagramGameserverPingReplyData>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CMsgSteamDatagramGameserverPingReplyData::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CMsgSteamDatagramGameserverPingReplyData>(), &CMsgSteamDatagramGameserverPingReplyData::ByteSizeLong,
              &CMsgSteamDatagramGameserverPingReplyData::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingReplyData, _impl_._cached_size_),
          false,
      },
      &CMsgSteamDatagramGameserverPingReplyData::kDescriptorMethods,
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        CMsgSteamDatagramGameserverPingReplyData_class_data_ =
            CMsgSteamDatagramGameserverPingReplyData::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL CMsgSteamDatagramGameserverPingReplyData::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CMsgSteamDatagramGameserverPingReplyData_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CMsgSteamDatagramGameserverPingReplyData_class_data_.tc_table);
  return CMsgSteamDatagramGameserverPingReplyData_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 11, 0, 62, 2>
CMsgSteamDatagramGameserverPingReplyData::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingReplyData, _impl_._has_bits_),
    0, // no _extensions_
    12, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294963201,  // skipmap
    offsetof(decltype(_table_), field_entries),
    11,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    CMsgSteamDatagramGameserverPingReplyData_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CMsgSteamDatagramGameserverPingReplyData>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional fixed32 echo_relay_unix_time = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 4, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingReplyData, _impl_.echo_relay_unix_time_)}},
    // optional fixed64 legacy_challenge = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 3, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingReplyData, _impl_.legacy_challenge_)}},
    // optional fixed32 legacy_router_timestamp = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 5, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingReplyData, _impl_.legacy_router_timestamp_)}},
    // optional fixed32 data_center_id = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 6, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingReplyData, _impl_.data_center_id_)}},
    // optional uint32 appid = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramGameserverPingReplyData, _impl_.appid_), 7>(),
     {48, 7, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingReplyData, _impl_.appid_)}},
    // optional uint32 protocol_version = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramGameserverPingReplyData, _impl_.protocol_version_), 8>(),
     {56, 8, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingReplyData, _impl_.protocol_version_)}},
    // optional bytes echo = 8;
    {::_pbi::TcParser::FastBS1,
     {66, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingReplyData, _impl_.echo_)}},
    // optional string build = 9;
    {::_pbi::TcParser::FastSS1,
     {74, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingReplyData, _impl_.build_)}},
    // optional uint64 network_config_version = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(CMsgSteamDatagramGameserverPingReplyData, _impl_.network_config_version_), 10>(),
     {80, 10, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingReplyData, _impl_.network_config_version_)}},
    // optional fixed32 my_unix_time = 11;
    {::_pbi::TcParser::FastF32S1,
     {93, 9, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingReplyData, _impl_.my_unix_time_)}},
    // optional bytes routing_blob = 12;
    {::_pbi::TcParser::FastBS1,
     {98, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingReplyData, _impl_.routing_blob_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional fixed32 echo_relay_unix_time = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingReplyData, _impl_.echo_relay_unix_time_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional fixed64 legacy_challenge = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingReplyData, _impl_.legacy_challenge_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
    // optional fixed32 legacy_router_timestamp = 4;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingReplyData, _impl_.legacy_router_timestamp_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional fixed32 data_center_id = 5;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingReplyData, _impl_.data_center_id_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional uint32 appid = 6;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingReplyData, _impl_.appid_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 protocol_version = 7;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingReplyData, _impl_.protocol_version_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional bytes echo = 8;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingReplyData, _impl_.echo_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional string build = 9;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingReplyData, _impl_.build_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional uint64 network_config_version = 10;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingReplyData, _impl_.network_config_version_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // optional fixed32 my_unix_time = 11;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingReplyData, _impl_.my_unix_time_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional bytes routing_blob = 12;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingReplyData, _impl_.routing_blob_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\50\0\0\0\0\0\0\0\5\0\0\0\0\0\0\0"
    "CMsgSteamDatagramGameserverPingReplyData"
    "build"
  }},
};
PROTOBUF_NOINLINE void CMsgSteamDatagramGameserverPingReplyData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramGameserverPingReplyData)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.echo_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.build_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _impl_.routing_blob_.ClearNonDefaultToEmpty();
    }
  }
  if ((cached_has_bits & 0x000000f8u) != 0) {
    ::memset(&_impl_.legacy_challenge_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.appid_) -
        reinterpret_cast<char*>(&_impl_.legacy_challenge_)) + sizeof(_impl_.appid_));
  }
  if ((cached_has_bits & 0x00000700u) != 0) {
    ::memset(&_impl_.protocol_version_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.network_config_version_) -
        reinterpret_cast<char*>(&_impl_.protocol_version_)) + sizeof(_impl_.network_config_version_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramGameserverPingReplyData::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CMsgSteamDatagramGameserverPingReplyData& this_ = static_cast<const CMsgSteamDatagramGameserverPingReplyData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramGameserverPingReplyData::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CMsgSteamDatagramGameserverPingReplyData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramGameserverPingReplyData)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional fixed32 echo_relay_unix_time = 2;
  if ((cached_has_bits & 0x00000010u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        2, this_._internal_echo_relay_unix_time(), target);
  }

  // optional fixed64 legacy_challenge = 3;
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        3, this_._internal_legacy_challenge(), target);
  }

  // optional fixed32 legacy_router_timestamp = 4;
  if ((cached_has_bits & 0x00000020u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        4, this_._internal_legacy_router_timestamp(), target);
  }

  // optional fixed32 data_center_id = 5;
  if ((cached_has_bits & 0x00000040u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        5, this_._internal_data_center_id(), target);
  }

  // optional uint32 appid = 6;
  if ((cached_has_bits & 0x00000080u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this_._internal_appid(), target);
  }

  // optional uint32 protocol_version = 7;
  if ((cached_has_bits & 0x00000100u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        7, this_._internal_protocol_version(), target);
  }

  // optional bytes echo = 8;
  if ((cached_has_bits & 0x00000001u) != 0) {
    const std::string& _s = this_._internal_echo();
    target = stream->WriteBytesMaybeAliased(8, _s, target);
  }

  // optional string build = 9;
  if ((cached_has_bits & 0x00000002u) != 0) {
    const std::string& _s = this_._internal_build();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CMsgSteamDatagramGameserverPingReplyData.build");
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  // optional uint64 network_config_version = 10;
  if ((cached_has_bits & 0x00000400u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        10, this_._internal_network_config_version(), target);
  }

  // optional fixed32 my_unix_time = 11;
  if ((cached_has_bits & 0x00000200u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        11, this_._internal_my_unix_time(), target);
  }

  // optional bytes routing_blob = 12;
  if ((cached_has_bits & 0x00000004u) != 0) {
    const std::string& _s = this_._internal_routing_blob();
    target = stream->WriteBytesMaybeAliased(12, _s, target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramGameserverPingReplyData)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CMsgSteamDatagramGameserverPingReplyData::ByteSizeLong(const MessageLite& base) {
  const CMsgSteamDatagramGameserverPingReplyData& this_ = static_cast<const CMsgSteamDatagramGameserverPingReplyData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t CMsgSteamDatagramGameserverPingReplyData::ByteSizeLong() const {
  const CMsgSteamDatagramGameserverPingReplyData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramGameserverPingReplyData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += static_cast<bool>(0x00000008u & cached_has_bits) * 9;
  total_size += ::absl::popcount(0x00000270u & cached_has_bits) * 5;
  if ((cached_has_bits & 0x00000087u) != 0) {
    // optional bytes echo = 8;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this_._internal_echo());
    }
    // optional string build = 9;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_build());
    }
    // optional bytes routing_blob = 12;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this_._internal_routing_blob());
    }
    // optional uint32 appid = 6;
    if ((cached_has_bits & 0x00000080u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_appid());
    }
  }
  if ((cached_has_bits & 0x00000500u) != 0) {
    // optional uint32 protocol_version = 7;
    if ((cached_has_bits & 0x00000100u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_protocol_version());
    }
    // optional uint64 network_config_version = 10;
    if ((cached_has_bits & 0x00000400u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this_._internal_network_config_version());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void CMsgSteamDatagramGameserverPingReplyData::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramGameserverPingReplyData*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramGameserverPingReplyData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramGameserverPingReplyData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_internal_set_echo(from._internal_echo());
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_internal_set_build(from._internal_build());
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_internal_set_routing_blob(from._internal_routing_blob());
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _this->_impl_.legacy_challenge_ = from._impl_.legacy_challenge_;
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _this->_impl_.echo_relay_unix_time_ = from._impl_.echo_relay_unix_time_;
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      _this->_impl_.legacy_router_timestamp_ = from._impl_.legacy_router_timestamp_;
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      _this->_impl_.data_center_id_ = from._impl_.data_center_id_;
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      _this->_impl_.appid_ = from._impl_.appid_;
    }
  }
  if ((cached_has_bits & 0x00000700u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      _this->_impl_.protocol_version_ = from._impl_.protocol_version_;
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      _this->_impl_.my_unix_time_ = from._impl_.my_unix_time_;
    }
    if ((cached_has_bits & 0x00000400u) != 0) {
      _this->_impl_.network_config_version_ = from._impl_.network_config_version_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramGameserverPingReplyData::CopyFrom(const CMsgSteamDatagramGameserverPingReplyData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramGameserverPingReplyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CMsgSteamDatagramGameserverPingReplyData::InternalSwap(CMsgSteamDatagramGameserverPingReplyData* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.echo_, &other->_impl_.echo_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.build_, &other->_impl_.build_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.routing_blob_, &other->_impl_.routing_blob_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingReplyData, _impl_.network_config_version_)
      + sizeof(CMsgSteamDatagramGameserverPingReplyData::_impl_.network_config_version_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverPingReplyData, _impl_.legacy_challenge_)>(
          reinterpret_cast<char*>(&_impl_.legacy_challenge_),
          reinterpret_cast<char*>(&other->_impl_.legacy_challenge_));
}

::google::protobuf::Metadata CMsgSteamDatagramGameserverPingReplyData::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CMsgSteamDatagramNoSessionRelayToClient::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CMsgSteamDatagramNoSessionRelayToClient>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToClient, _impl_._has_bits_);
};

CMsgSteamDatagramNoSessionRelayToClient::CMsgSteamDatagramNoSessionRelayToClient(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramNoSessionRelayToClient_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramNoSessionRelayToClient)
}
CMsgSteamDatagramNoSessionRelayToClient::CMsgSteamDatagramNoSessionRelayToClient(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const CMsgSteamDatagramNoSessionRelayToClient& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramNoSessionRelayToClient_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramNoSessionRelayToClient::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void CMsgSteamDatagramNoSessionRelayToClient::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, your_public_ip_),
           0,
           offsetof(Impl_, connection_id_) -
               offsetof(Impl_, your_public_ip_) +
               sizeof(Impl_::connection_id_));
}
CMsgSteamDatagramNoSessionRelayToClient::~CMsgSteamDatagramNoSessionRelayToClient() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramNoSessionRelayToClient)
  SharedDtor(*this);
}
inline void CMsgSteamDatagramNoSessionRelayToClient::SharedDtor(MessageLite& self) {
  CMsgSteamDatagramNoSessionRelayToClient& this_ = static_cast<CMsgSteamDatagramNoSessionRelayToClient&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CMsgSteamDatagramNoSessionRelayToClient::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CMsgSteamDatagramNoSessionRelayToClient(arena);
}
constexpr auto CMsgSteamDatagramNoSessionRelayToClient::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(CMsgSteamDatagramNoSessionRelayToClient),
                                            alignof(CMsgSteamDatagramNoSessionRelayToClient));
}
constexpr auto CMsgSteamDatagramNoSessionRelayToClient::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CMsgSteamDatagramNoSessionRelayToClient_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CMsgSteamDatagramNoSessionRelayToClient::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CMsgSteamDatagramNoSessionRelayToClient>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CMsgSteamDatagramNoSessionRelayToClient::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CMsgSteamDatagramNoSessionRelayToClient>(), &CMsgSteamDatagramNoSessionRelayToClient::ByteSizeLong,
              &CMsgSteamDatagramNoSessionRelayToClient::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToClient, _impl_._cached_size_),
          false,
      },
      &CMsgSteamDatagramNoSessionRelayToClient::kDescriptorMethods,
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        CMsgSteamDatagramNoSessionRelayToClient_class_data_ =
            CMsgSteamDatagramNoSessionRelayToClient::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL CMsgSteamDatagramNoSessionRelayToClient::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CMsgSteamDatagramNoSessionRelayToClient_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CMsgSteamDatagramNoSessionRelayToClient_class_data_.tc_table);
  return CMsgSteamDatagramNoSessionRelayToClient_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 0, 2>
CMsgSteamDatagramNoSessionRelayToClient::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToClient, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967169,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    CMsgSteamDatagramNoSessionRelayToClient_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CMsgSteamDatagramNoSessionRelayToClient>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional fixed32 your_public_ip = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToClient, _impl_.your_public_ip_)}},
    // optional fixed32 server_time = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToClient, _impl_.server_time_)}},
    // optional fixed64 challenge = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToClient, _impl_.challenge_)}},
    // optional uint32 seconds_until_shutdown = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramNoSessionRelayToClient, _impl_.seconds_until_shutdown_), 3>(),
     {40, 3, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToClient, _impl_.seconds_until_shutdown_)}},
    // optional fixed32 your_public_port = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 4, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToClient, _impl_.your_public_port_)}},
    // optional fixed32 connection_id = 7;
    {::_pbi::TcParser::FastF32S1,
     {61, 5, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToClient, _impl_.connection_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional fixed32 your_public_ip = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToClient, _impl_.your_public_ip_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional fixed32 server_time = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToClient, _impl_.server_time_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional fixed64 challenge = 4;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToClient, _impl_.challenge_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
    // optional uint32 seconds_until_shutdown = 5;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToClient, _impl_.seconds_until_shutdown_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional fixed32 your_public_port = 6;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToClient, _impl_.your_public_port_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional fixed32 connection_id = 7;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToClient, _impl_.connection_id_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
  }},
  // no aux_entries
  {{
  }},
};
PROTOBUF_NOINLINE void CMsgSteamDatagramNoSessionRelayToClient::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramNoSessionRelayToClient)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fu) != 0) {
    ::memset(&_impl_.your_public_ip_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.connection_id_) -
        reinterpret_cast<char*>(&_impl_.your_public_ip_)) + sizeof(_impl_.connection_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramNoSessionRelayToClient::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CMsgSteamDatagramNoSessionRelayToClient& this_ = static_cast<const CMsgSteamDatagramNoSessionRelayToClient&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramNoSessionRelayToClient::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CMsgSteamDatagramNoSessionRelayToClient& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramNoSessionRelayToClient)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional fixed32 your_public_ip = 2;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        2, this_._internal_your_public_ip(), target);
  }

  // optional fixed32 server_time = 3;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        3, this_._internal_server_time(), target);
  }

  // optional fixed64 challenge = 4;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        4, this_._internal_challenge(), target);
  }

  // optional uint32 seconds_until_shutdown = 5;
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this_._internal_seconds_until_shutdown(), target);
  }

  // optional fixed32 your_public_port = 6;
  if ((cached_has_bits & 0x00000010u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        6, this_._internal_your_public_port(), target);
  }

  // optional fixed32 connection_id = 7;
  if ((cached_has_bits & 0x00000020u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        7, this_._internal_connection_id(), target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramNoSessionRelayToClient)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CMsgSteamDatagramNoSessionRelayToClient::ByteSizeLong(const MessageLite& base) {
  const CMsgSteamDatagramNoSessionRelayToClient& this_ = static_cast<const CMsgSteamDatagramNoSessionRelayToClient&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t CMsgSteamDatagramNoSessionRelayToClient::ByteSizeLong() const {
  const CMsgSteamDatagramNoSessionRelayToClient& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramNoSessionRelayToClient)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += static_cast<bool>(0x00000004u & cached_has_bits) * 9;
  total_size += ::absl::popcount(0x00000033u & cached_has_bits) * 5;
   {
    // optional uint32 seconds_until_shutdown = 5;
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_seconds_until_shutdown());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void CMsgSteamDatagramNoSessionRelayToClient::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramNoSessionRelayToClient*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramNoSessionRelayToClient&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramNoSessionRelayToClient)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_impl_.your_public_ip_ = from._impl_.your_public_ip_;
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_impl_.server_time_ = from._impl_.server_time_;
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_impl_.challenge_ = from._impl_.challenge_;
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _this->_impl_.seconds_until_shutdown_ = from._impl_.seconds_until_shutdown_;
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _this->_impl_.your_public_port_ = from._impl_.your_public_port_;
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      _this->_impl_.connection_id_ = from._impl_.connection_id_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramNoSessionRelayToClient::CopyFrom(const CMsgSteamDatagramNoSessionRelayToClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramNoSessionRelayToClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CMsgSteamDatagramNoSessionRelayToClient::InternalSwap(CMsgSteamDatagramNoSessionRelayToClient* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToClient, _impl_.connection_id_)
      + sizeof(CMsgSteamDatagramNoSessionRelayToClient::_impl_.connection_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToClient, _impl_.your_public_ip_)>(
          reinterpret_cast<char*>(&_impl_.your_public_ip_),
          reinterpret_cast<char*>(&other->_impl_.your_public_ip_));
}

::google::protobuf::Metadata CMsgSteamDatagramNoSessionRelayToClient::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CMsgSteamDatagramNoSessionRelayToPeer::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CMsgSteamDatagramNoSessionRelayToPeer>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToPeer, _impl_._has_bits_);
};

CMsgSteamDatagramNoSessionRelayToPeer::CMsgSteamDatagramNoSessionRelayToPeer(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramNoSessionRelayToPeer_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramNoSessionRelayToPeer)
}
CMsgSteamDatagramNoSessionRelayToPeer::CMsgSteamDatagramNoSessionRelayToPeer(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const CMsgSteamDatagramNoSessionRelayToPeer& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramNoSessionRelayToPeer_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramNoSessionRelayToPeer::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void CMsgSteamDatagramNoSessionRelayToPeer::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, legacy_relay_session_id_),
           0,
           offsetof(Impl_, from_connection_id_) -
               offsetof(Impl_, legacy_relay_session_id_) +
               sizeof(Impl_::from_connection_id_));
}
CMsgSteamDatagramNoSessionRelayToPeer::~CMsgSteamDatagramNoSessionRelayToPeer() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramNoSessionRelayToPeer)
  SharedDtor(*this);
}
inline void CMsgSteamDatagramNoSessionRelayToPeer::SharedDtor(MessageLite& self) {
  CMsgSteamDatagramNoSessionRelayToPeer& this_ = static_cast<CMsgSteamDatagramNoSessionRelayToPeer&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CMsgSteamDatagramNoSessionRelayToPeer::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CMsgSteamDatagramNoSessionRelayToPeer(arena);
}
constexpr auto CMsgSteamDatagramNoSessionRelayToPeer::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(CMsgSteamDatagramNoSessionRelayToPeer),
                                            alignof(CMsgSteamDatagramNoSessionRelayToPeer));
}
constexpr auto CMsgSteamDatagramNoSessionRelayToPeer::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CMsgSteamDatagramNoSessionRelayToPeer_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CMsgSteamDatagramNoSessionRelayToPeer::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CMsgSteamDatagramNoSessionRelayToPeer>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CMsgSteamDatagramNoSessionRelayToPeer::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CMsgSteamDatagramNoSessionRelayToPeer>(), &CMsgSteamDatagramNoSessionRelayToPeer::ByteSizeLong,
              &CMsgSteamDatagramNoSessionRelayToPeer::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToPeer, _impl_._cached_size_),
          false,
      },
      &CMsgSteamDatagramNoSessionRelayToPeer::kDescriptorMethods,
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        CMsgSteamDatagramNoSessionRelayToPeer_class_data_ =
            CMsgSteamDatagramNoSessionRelayToPeer::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL CMsgSteamDatagramNoSessionRelayToPeer::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CMsgSteamDatagramNoSessionRelayToPeer_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CMsgSteamDatagramNoSessionRelayToPeer_class_data_.tc_table);
  return CMsgSteamDatagramNoSessionRelayToPeer_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 4, 0, 0, 7>
CMsgSteamDatagramNoSessionRelayToPeer::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToPeer, _impl_._has_bits_),
    0, // no _extensions_
    99, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967228,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    CMsgSteamDatagramNoSessionRelayToPeer_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CMsgSteamDatagramNoSessionRelayToPeer>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional uint32 legacy_relay_session_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramNoSessionRelayToPeer, _impl_.legacy_relay_session_id_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToPeer, _impl_.legacy_relay_session_id_)}},
    // optional fixed32 from_relay_session_id = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToPeer, _impl_.from_relay_session_id_)}},
    // optional fixed64 kludge_pad = 99;
    {::_pbi::TcParser::FastF64S2,
     {1689, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToPeer, _impl_.kludge_pad_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional fixed32 from_connection_id = 7;
    {::_pbi::TcParser::FastF32S1,
     {61, 3, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToPeer, _impl_.from_connection_id_)}},
  }}, {{
    99, 0, 1,
    65534, 3,
    65535, 65535
  }}, {{
    // optional uint32 legacy_relay_session_id = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToPeer, _impl_.legacy_relay_session_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional fixed32 from_relay_session_id = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToPeer, _impl_.from_relay_session_id_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional fixed32 from_connection_id = 7;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToPeer, _impl_.from_connection_id_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional fixed64 kludge_pad = 99;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToPeer, _impl_.kludge_pad_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
  }},
  // no aux_entries
  {{
  }},
};
PROTOBUF_NOINLINE void CMsgSteamDatagramNoSessionRelayToPeer::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramNoSessionRelayToPeer)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    ::memset(&_impl_.legacy_relay_session_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.from_connection_id_) -
        reinterpret_cast<char*>(&_impl_.legacy_relay_session_id_)) + sizeof(_impl_.from_connection_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramNoSessionRelayToPeer::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CMsgSteamDatagramNoSessionRelayToPeer& this_ = static_cast<const CMsgSteamDatagramNoSessionRelayToPeer&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramNoSessionRelayToPeer::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CMsgSteamDatagramNoSessionRelayToPeer& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramNoSessionRelayToPeer)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional uint32 legacy_relay_session_id = 1;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this_._internal_legacy_relay_session_id(), target);
  }

  // optional fixed32 from_relay_session_id = 2;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        2, this_._internal_from_relay_session_id(), target);
  }

  // optional fixed32 from_connection_id = 7;
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        7, this_._internal_from_connection_id(), target);
  }

  // optional fixed64 kludge_pad = 99;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        99, this_._internal_kludge_pad(), target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramNoSessionRelayToPeer)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CMsgSteamDatagramNoSessionRelayToPeer::ByteSizeLong(const MessageLite& base) {
  const CMsgSteamDatagramNoSessionRelayToPeer& this_ = static_cast<const CMsgSteamDatagramNoSessionRelayToPeer&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t CMsgSteamDatagramNoSessionRelayToPeer::ByteSizeLong() const {
  const CMsgSteamDatagramNoSessionRelayToPeer& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramNoSessionRelayToPeer)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += static_cast<bool>(0x00000004u & cached_has_bits) * 10;
  total_size += ::absl::popcount(0x0000000au & cached_has_bits) * 5;
   {
    // optional uint32 legacy_relay_session_id = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_legacy_relay_session_id());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void CMsgSteamDatagramNoSessionRelayToPeer::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramNoSessionRelayToPeer*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramNoSessionRelayToPeer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramNoSessionRelayToPeer)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_impl_.legacy_relay_session_id_ = from._impl_.legacy_relay_session_id_;
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_impl_.from_relay_session_id_ = from._impl_.from_relay_session_id_;
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_impl_.kludge_pad_ = from._impl_.kludge_pad_;
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _this->_impl_.from_connection_id_ = from._impl_.from_connection_id_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramNoSessionRelayToPeer::CopyFrom(const CMsgSteamDatagramNoSessionRelayToPeer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramNoSessionRelayToPeer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CMsgSteamDatagramNoSessionRelayToPeer::InternalSwap(CMsgSteamDatagramNoSessionRelayToPeer* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToPeer, _impl_.from_connection_id_)
      + sizeof(CMsgSteamDatagramNoSessionRelayToPeer::_impl_.from_connection_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoSessionRelayToPeer, _impl_.legacy_relay_session_id_)>(
          reinterpret_cast<char*>(&_impl_.legacy_relay_session_id_),
          reinterpret_cast<char*>(&other->_impl_.legacy_relay_session_id_));
}

::google::protobuf::Metadata CMsgSteamDatagramNoSessionRelayToPeer::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CMsgTOSTreatment::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CMsgTOSTreatment>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CMsgTOSTreatment, _impl_._has_bits_);
};

CMsgTOSTreatment::CMsgTOSTreatment(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgTOSTreatment_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgTOSTreatment)
}
PROTOBUF_NDEBUG_INLINE CMsgTOSTreatment::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::CMsgTOSTreatment& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        l4s_detect_(arena, from.l4s_detect_),
        up_ecn1_(arena, from.up_ecn1_),
        down_dscp45_(arena, from.down_dscp45_) {}

CMsgTOSTreatment::CMsgTOSTreatment(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const CMsgTOSTreatment& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgTOSTreatment_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CMsgTOSTreatment* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:CMsgTOSTreatment)
}
PROTOBUF_NDEBUG_INLINE CMsgTOSTreatment::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        l4s_detect_(arena),
        up_ecn1_(arena),
        down_dscp45_(arena) {}

inline void CMsgTOSTreatment::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
CMsgTOSTreatment::~CMsgTOSTreatment() {
  // @@protoc_insertion_point(destructor:CMsgTOSTreatment)
  SharedDtor(*this);
}
inline void CMsgTOSTreatment::SharedDtor(MessageLite& self) {
  CMsgTOSTreatment& this_ = static_cast<CMsgTOSTreatment&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.l4s_detect_.Destroy();
  this_._impl_.up_ecn1_.Destroy();
  this_._impl_.down_dscp45_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CMsgTOSTreatment::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CMsgTOSTreatment(arena);
}
constexpr auto CMsgTOSTreatment::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(CMsgTOSTreatment),
                                            alignof(CMsgTOSTreatment));
}
constexpr auto CMsgTOSTreatment::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CMsgTOSTreatment_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CMsgTOSTreatment::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CMsgTOSTreatment>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CMsgTOSTreatment::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CMsgTOSTreatment>(), &CMsgTOSTreatment::ByteSizeLong,
              &CMsgTOSTreatment::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CMsgTOSTreatment, _impl_._cached_size_),
          false,
      },
      &CMsgTOSTreatment::kDescriptorMethods,
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        CMsgTOSTreatment_class_data_ =
            CMsgTOSTreatment::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL CMsgTOSTreatment::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CMsgTOSTreatment_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CMsgTOSTreatment_class_data_.tc_table);
  return CMsgTOSTreatment_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 53, 2>
CMsgTOSTreatment::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgTOSTreatment, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    CMsgTOSTreatment_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CMsgTOSTreatment>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional string l4s_detect = 1;
    {::_pbi::TcParser::FastSS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgTOSTreatment, _impl_.l4s_detect_)}},
    // optional string up_ecn1 = 2;
    {::_pbi::TcParser::FastSS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgTOSTreatment, _impl_.up_ecn1_)}},
    // optional string down_dscp45 = 3;
    {::_pbi::TcParser::FastSS1,
     {26, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgTOSTreatment, _impl_.down_dscp45_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string l4s_detect = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgTOSTreatment, _impl_.l4s_detect_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional string up_ecn1 = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgTOSTreatment, _impl_.up_ecn1_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional string down_dscp45 = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgTOSTreatment, _impl_.down_dscp45_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\20\12\7\13\0\0\0\0"
    "CMsgTOSTreatment"
    "l4s_detect"
    "up_ecn1"
    "down_dscp45"
  }},
};
PROTOBUF_NOINLINE void CMsgTOSTreatment::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgTOSTreatment)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.l4s_detect_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.up_ecn1_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _impl_.down_dscp45_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CMsgTOSTreatment::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CMsgTOSTreatment& this_ = static_cast<const CMsgTOSTreatment&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CMsgTOSTreatment::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CMsgTOSTreatment& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:CMsgTOSTreatment)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional string l4s_detect = 1;
  if ((cached_has_bits & 0x00000001u) != 0) {
    const std::string& _s = this_._internal_l4s_detect();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CMsgTOSTreatment.l4s_detect");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string up_ecn1 = 2;
  if ((cached_has_bits & 0x00000002u) != 0) {
    const std::string& _s = this_._internal_up_ecn1();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CMsgTOSTreatment.up_ecn1");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional string down_dscp45 = 3;
  if ((cached_has_bits & 0x00000004u) != 0) {
    const std::string& _s = this_._internal_down_dscp45();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CMsgTOSTreatment.down_dscp45");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgTOSTreatment)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CMsgTOSTreatment::ByteSizeLong(const MessageLite& base) {
  const CMsgTOSTreatment& this_ = static_cast<const CMsgTOSTreatment&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t CMsgTOSTreatment::ByteSizeLong() const {
  const CMsgTOSTreatment& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:CMsgTOSTreatment)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    // optional string l4s_detect = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_l4s_detect());
    }
    // optional string up_ecn1 = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_up_ecn1());
    }
    // optional string down_dscp45 = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_down_dscp45());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void CMsgTOSTreatment::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CMsgTOSTreatment*>(&to_msg);
  auto& from = static_cast<const CMsgTOSTreatment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgTOSTreatment)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_internal_set_l4s_detect(from._internal_l4s_detect());
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_internal_set_up_ecn1(from._internal_up_ecn1());
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_internal_set_down_dscp45(from._internal_down_dscp45());
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgTOSTreatment::CopyFrom(const CMsgTOSTreatment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgTOSTreatment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CMsgTOSTreatment::InternalSwap(CMsgTOSTreatment* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.l4s_detect_, &other->_impl_.l4s_detect_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.up_ecn1_, &other->_impl_.up_ecn1_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.down_dscp45_, &other->_impl_.down_dscp45_, arena);
}

::google::protobuf::Metadata CMsgTOSTreatment::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CMsgSteamDatagramClientPingSampleRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CMsgSteamDatagramClientPingSampleRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleRequest, _impl_._has_bits_);
};

CMsgSteamDatagramClientPingSampleRequest::CMsgSteamDatagramClientPingSampleRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramClientPingSampleRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramClientPingSampleRequest)
}
CMsgSteamDatagramClientPingSampleRequest::CMsgSteamDatagramClientPingSampleRequest(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const CMsgSteamDatagramClientPingSampleRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramClientPingSampleRequest_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramClientPingSampleRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void CMsgSteamDatagramClientPingSampleRequest::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.connection_id_ = {};
}
CMsgSteamDatagramClientPingSampleRequest::~CMsgSteamDatagramClientPingSampleRequest() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramClientPingSampleRequest)
  SharedDtor(*this);
}
inline void CMsgSteamDatagramClientPingSampleRequest::SharedDtor(MessageLite& self) {
  CMsgSteamDatagramClientPingSampleRequest& this_ = static_cast<CMsgSteamDatagramClientPingSampleRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CMsgSteamDatagramClientPingSampleRequest::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CMsgSteamDatagramClientPingSampleRequest(arena);
}
constexpr auto CMsgSteamDatagramClientPingSampleRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(CMsgSteamDatagramClientPingSampleRequest),
                                            alignof(CMsgSteamDatagramClientPingSampleRequest));
}
constexpr auto CMsgSteamDatagramClientPingSampleRequest::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CMsgSteamDatagramClientPingSampleRequest_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CMsgSteamDatagramClientPingSampleRequest::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CMsgSteamDatagramClientPingSampleRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CMsgSteamDatagramClientPingSampleRequest::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CMsgSteamDatagramClientPingSampleRequest>(), &CMsgSteamDatagramClientPingSampleRequest::ByteSizeLong,
              &CMsgSteamDatagramClientPingSampleRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleRequest, _impl_._cached_size_),
          false,
      },
      &CMsgSteamDatagramClientPingSampleRequest::kDescriptorMethods,
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        CMsgSteamDatagramClientPingSampleRequest_class_data_ =
            CMsgSteamDatagramClientPingSampleRequest::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL CMsgSteamDatagramClientPingSampleRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CMsgSteamDatagramClientPingSampleRequest_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CMsgSteamDatagramClientPingSampleRequest_class_data_.tc_table);
  return CMsgSteamDatagramClientPingSampleRequest_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2>
CMsgSteamDatagramClientPingSampleRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleRequest, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    CMsgSteamDatagramClientPingSampleRequest_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CMsgSteamDatagramClientPingSampleRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional fixed32 connection_id = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleRequest, _impl_.connection_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional fixed32 connection_id = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleRequest, _impl_.connection_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
  }},
  // no aux_entries
  {{
  }},
};
PROTOBUF_NOINLINE void CMsgSteamDatagramClientPingSampleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramClientPingSampleRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.connection_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramClientPingSampleRequest::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CMsgSteamDatagramClientPingSampleRequest& this_ = static_cast<const CMsgSteamDatagramClientPingSampleRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramClientPingSampleRequest::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CMsgSteamDatagramClientPingSampleRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramClientPingSampleRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional fixed32 connection_id = 1;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        1, this_._internal_connection_id(), target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramClientPingSampleRequest)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CMsgSteamDatagramClientPingSampleRequest::ByteSizeLong(const MessageLite& base) {
  const CMsgSteamDatagramClientPingSampleRequest& this_ = static_cast<const CMsgSteamDatagramClientPingSampleRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t CMsgSteamDatagramClientPingSampleRequest::ByteSizeLong() const {
  const CMsgSteamDatagramClientPingSampleRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramClientPingSampleRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += static_cast<bool>(0x00000001u & cached_has_bits) * 5;
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void CMsgSteamDatagramClientPingSampleRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramClientPingSampleRequest*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramClientPingSampleRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramClientPingSampleRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _this->_impl_.connection_id_ = from._impl_.connection_id_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramClientPingSampleRequest::CopyFrom(const CMsgSteamDatagramClientPingSampleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramClientPingSampleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CMsgSteamDatagramClientPingSampleRequest::InternalSwap(CMsgSteamDatagramClientPingSampleRequest* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.connection_id_, other->_impl_.connection_id_);
}

::google::protobuf::Metadata CMsgSteamDatagramClientPingSampleRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CMsgSteamDatagramClientPingSampleReply_POP_AltAddress>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP_AltAddress, _impl_._has_bits_);
};

CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::CMsgSteamDatagramClientPingSampleReply_POP_AltAddress(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramClientPingSampleReply_POP_AltAddress_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramClientPingSampleReply.POP.AltAddress)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::CMsgSteamDatagramClientPingSampleReply_POP_AltAddress& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        id_(arena, from.id_) {}

CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::CMsgSteamDatagramClientPingSampleReply_POP_AltAddress(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const CMsgSteamDatagramClientPingSampleReply_POP_AltAddress& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramClientPingSampleReply_POP_AltAddress_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CMsgSteamDatagramClientPingSampleReply_POP_AltAddress* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, front_ping_ms_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, front_ping_ms_),
           offsetof(Impl_, penalty_) -
               offsetof(Impl_, front_ping_ms_) +
               sizeof(Impl_::penalty_));

  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramClientPingSampleReply.POP.AltAddress)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        id_(arena) {}

inline void CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, front_ping_ms_),
           0,
           offsetof(Impl_, penalty_) -
               offsetof(Impl_, front_ping_ms_) +
               sizeof(Impl_::penalty_));
}
CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::~CMsgSteamDatagramClientPingSampleReply_POP_AltAddress() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramClientPingSampleReply.POP.AltAddress)
  SharedDtor(*this);
}
inline void CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::SharedDtor(MessageLite& self) {
  CMsgSteamDatagramClientPingSampleReply_POP_AltAddress& this_ = static_cast<CMsgSteamDatagramClientPingSampleReply_POP_AltAddress&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.id_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CMsgSteamDatagramClientPingSampleReply_POP_AltAddress(arena);
}
constexpr auto CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(CMsgSteamDatagramClientPingSampleReply_POP_AltAddress),
                                            alignof(CMsgSteamDatagramClientPingSampleReply_POP_AltAddress));
}
constexpr auto CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CMsgSteamDatagramClientPingSampleReply_POP_AltAddress_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CMsgSteamDatagramClientPingSampleReply_POP_AltAddress>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CMsgSteamDatagramClientPingSampleReply_POP_AltAddress>(), &CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::ByteSizeLong,
              &CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP_AltAddress, _impl_._cached_size_),
          false,
      },
      &CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::kDescriptorMethods,
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        CMsgSteamDatagramClientPingSampleReply_POP_AltAddress_class_data_ =
            CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CMsgSteamDatagramClientPingSampleReply_POP_AltAddress_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CMsgSteamDatagramClientPingSampleReply_POP_AltAddress_class_data_.tc_table);
  return CMsgSteamDatagramClientPingSampleReply_POP_AltAddress_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 64, 2>
CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP_AltAddress, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    CMsgSteamDatagramClientPingSampleReply_POP_AltAddress_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CMsgSteamDatagramClientPingSampleReply_POP_AltAddress>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional string id = 1;
    {::_pbi::TcParser::FastSS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP_AltAddress, _impl_.id_)}},
    // optional uint32 front_ping_ms = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramClientPingSampleReply_POP_AltAddress, _impl_.front_ping_ms_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP_AltAddress, _impl_.front_ping_ms_)}},
    // optional uint32 penalty = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramClientPingSampleReply_POP_AltAddress, _impl_.penalty_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP_AltAddress, _impl_.penalty_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string id = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP_AltAddress, _impl_.id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional uint32 front_ping_ms = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP_AltAddress, _impl_.front_ping_ms_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 penalty = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP_AltAddress, _impl_.penalty_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
    "\65\2\0\0\0\0\0\0"
    "CMsgSteamDatagramClientPingSampleReply.POP.AltAddress"
    "id"
  }},
};
PROTOBUF_NOINLINE void CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramClientPingSampleReply.POP.AltAddress)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _impl_.id_.ClearNonDefaultToEmpty();
  }
  if ((cached_has_bits & 0x00000006u) != 0) {
    ::memset(&_impl_.front_ping_ms_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.penalty_) -
        reinterpret_cast<char*>(&_impl_.front_ping_ms_)) + sizeof(_impl_.penalty_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CMsgSteamDatagramClientPingSampleReply_POP_AltAddress& this_ = static_cast<const CMsgSteamDatagramClientPingSampleReply_POP_AltAddress&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CMsgSteamDatagramClientPingSampleReply_POP_AltAddress& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramClientPingSampleReply.POP.AltAddress)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional string id = 1;
  if ((cached_has_bits & 0x00000001u) != 0) {
    const std::string& _s = this_._internal_id();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CMsgSteamDatagramClientPingSampleReply.POP.AltAddress.id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional uint32 front_ping_ms = 2;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this_._internal_front_ping_ms(), target);
  }

  // optional uint32 penalty = 3;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this_._internal_penalty(), target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramClientPingSampleReply.POP.AltAddress)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::ByteSizeLong(const MessageLite& base) {
  const CMsgSteamDatagramClientPingSampleReply_POP_AltAddress& this_ = static_cast<const CMsgSteamDatagramClientPingSampleReply_POP_AltAddress&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::ByteSizeLong() const {
  const CMsgSteamDatagramClientPingSampleReply_POP_AltAddress& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramClientPingSampleReply.POP.AltAddress)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    // optional string id = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_id());
    }
    // optional uint32 front_ping_ms = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_front_ping_ms());
    }
    // optional uint32 penalty = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_penalty());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramClientPingSampleReply_POP_AltAddress*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramClientPingSampleReply_POP_AltAddress&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramClientPingSampleReply.POP.AltAddress)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_internal_set_id(from._internal_id());
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_impl_.front_ping_ms_ = from._impl_.front_ping_ms_;
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_impl_.penalty_ = from._impl_.penalty_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::CopyFrom(const CMsgSteamDatagramClientPingSampleReply_POP_AltAddress& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramClientPingSampleReply.POP.AltAddress)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::InternalSwap(CMsgSteamDatagramClientPingSampleReply_POP_AltAddress* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, &other->_impl_.id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP_AltAddress, _impl_.penalty_)
      + sizeof(CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::_impl_.penalty_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP_AltAddress, _impl_.front_ping_ms_)>(
          reinterpret_cast<char*>(&_impl_.front_ping_ms_),
          reinterpret_cast<char*>(&other->_impl_.front_ping_ms_));
}

::google::protobuf::Metadata CMsgSteamDatagramClientPingSampleReply_POP_AltAddress::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CMsgSteamDatagramClientPingSampleReply_POP::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CMsgSteamDatagramClientPingSampleReply_POP>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_._has_bits_);
};

CMsgSteamDatagramClientPingSampleReply_POP::CMsgSteamDatagramClientPingSampleReply_POP(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramClientPingSampleReply_POP_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramClientPingSampleReply.POP)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramClientPingSampleReply_POP::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::CMsgSteamDatagramClientPingSampleReply_POP& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        alt_addresses_{visibility, arena, from.alt_addresses_} {}

CMsgSteamDatagramClientPingSampleReply_POP::CMsgSteamDatagramClientPingSampleReply_POP(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const CMsgSteamDatagramClientPingSampleReply_POP& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramClientPingSampleReply_POP_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CMsgSteamDatagramClientPingSampleReply_POP* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, pop_id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, pop_id_),
           offsetof(Impl_, test_dc_via_relay_pop_id_) -
               offsetof(Impl_, pop_id_) +
               sizeof(Impl_::test_dc_via_relay_pop_id_));

  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramClientPingSampleReply.POP)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramClientPingSampleReply_POP::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        alt_addresses_{visibility, arena} {}

inline void CMsgSteamDatagramClientPingSampleReply_POP::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, pop_id_),
           0,
           offsetof(Impl_, test_dc_via_relay_pop_id_) -
               offsetof(Impl_, pop_id_) +
               sizeof(Impl_::test_dc_via_relay_pop_id_));
}
CMsgSteamDatagramClientPingSampleReply_POP::~CMsgSteamDatagramClientPingSampleReply_POP() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramClientPingSampleReply.POP)
  SharedDtor(*this);
}
inline void CMsgSteamDatagramClientPingSampleReply_POP::SharedDtor(MessageLite& self) {
  CMsgSteamDatagramClientPingSampleReply_POP& this_ = static_cast<CMsgSteamDatagramClientPingSampleReply_POP&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CMsgSteamDatagramClientPingSampleReply_POP::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CMsgSteamDatagramClientPingSampleReply_POP(arena);
}
constexpr auto CMsgSteamDatagramClientPingSampleReply_POP::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.alt_addresses_) +
          decltype(CMsgSteamDatagramClientPingSampleReply_POP::_impl_.alt_addresses_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(CMsgSteamDatagramClientPingSampleReply_POP), alignof(CMsgSteamDatagramClientPingSampleReply_POP), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&CMsgSteamDatagramClientPingSampleReply_POP::PlacementNew_,
                                 sizeof(CMsgSteamDatagramClientPingSampleReply_POP),
                                 alignof(CMsgSteamDatagramClientPingSampleReply_POP));
  }
}
constexpr auto CMsgSteamDatagramClientPingSampleReply_POP::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CMsgSteamDatagramClientPingSampleReply_POP_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CMsgSteamDatagramClientPingSampleReply_POP::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CMsgSteamDatagramClientPingSampleReply_POP>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CMsgSteamDatagramClientPingSampleReply_POP::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CMsgSteamDatagramClientPingSampleReply_POP>(), &CMsgSteamDatagramClientPingSampleReply_POP::ByteSizeLong,
              &CMsgSteamDatagramClientPingSampleReply_POP::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_._cached_size_),
          false,
      },
      &CMsgSteamDatagramClientPingSampleReply_POP::kDescriptorMethods,
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        CMsgSteamDatagramClientPingSampleReply_POP_class_data_ =
            CMsgSteamDatagramClientPingSampleReply_POP::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL CMsgSteamDatagramClientPingSampleReply_POP::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CMsgSteamDatagramClientPingSampleReply_POP_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CMsgSteamDatagramClientPingSampleReply_POP_class_data_.tc_table);
  return CMsgSteamDatagramClientPingSampleReply_POP_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 16, 1, 0, 2>
CMsgSteamDatagramClientPingSampleReply_POP::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_._has_bits_),
    0, // no _extensions_
    17, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294836352,  // skipmap
    offsetof(decltype(_table_), field_entries),
    16,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    CMsgSteamDatagramClientPingSampleReply_POP_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CMsgSteamDatagramClientPingSampleReply_POP>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional fixed32 pop_id = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.pop_id_)}},
    // optional uint32 default_front_ping_ms = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.default_front_ping_ms_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.default_front_ping_ms_)}},
    // optional uint32 default_e2e_ping_ms = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.default_e2e_ping_ms_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.default_e2e_ping_ms_)}},
    // optional uint32 cluster_penalty = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.cluster_penalty_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.cluster_penalty_)}},
    // optional uint32 default_e2e_score = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.default_e2e_score_), 4>(),
     {40, 4, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.default_e2e_score_)}},
    // optional fixed32 p2p_via_peer_relay_pop_id = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 5, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.p2p_via_peer_relay_pop_id_)}},
    // repeated .CMsgSteamDatagramClientPingSampleReply.POP.AltAddress alt_addresses = 7;
    {::_pbi::TcParser::FastMtR1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.alt_addresses_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional uint32 best_dc_ping_ms = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.best_dc_ping_ms_), 6>(),
     {72, 6, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.best_dc_ping_ms_)}},
    // optional uint32 best_dc_score = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.best_dc_score_), 7>(),
     {80, 7, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.best_dc_score_)}},
    // optional fixed32 best_dc_via_relay_pop_id = 11;
    {::_pbi::TcParser::FastF32S1,
     {93, 8, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.best_dc_via_relay_pop_id_)}},
    // optional uint32 default_dc_ping_ms = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.default_dc_ping_ms_), 9>(),
     {96, 9, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.default_dc_ping_ms_)}},
    // optional uint32 default_dc_score = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.default_dc_score_), 10>(),
     {104, 10, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.default_dc_score_)}},
    // optional fixed32 default_dc_via_relay_pop_id = 14;
    {::_pbi::TcParser::FastF32S1,
     {117, 11, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.default_dc_via_relay_pop_id_)}},
    // optional uint32 test_dc_ping_ms = 15;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.test_dc_ping_ms_), 12>(),
     {120, 12, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.test_dc_ping_ms_)}},
    // optional uint32 test_dc_score = 16;
    {::_pbi::TcParser::FastV32S2,
     {384, 13, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.test_dc_score_)}},
    // optional fixed32 test_dc_via_relay_pop_id = 17;
    {::_pbi::TcParser::FastF32S2,
     {397, 14, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.test_dc_via_relay_pop_id_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional fixed32 pop_id = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.pop_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional uint32 default_front_ping_ms = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.default_front_ping_ms_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 default_e2e_ping_ms = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.default_e2e_ping_ms_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 cluster_penalty = 4;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.cluster_penalty_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 default_e2e_score = 5;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.default_e2e_score_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional fixed32 p2p_via_peer_relay_pop_id = 6;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.p2p_via_peer_relay_pop_id_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // repeated .CMsgSteamDatagramClientPingSampleReply.POP.AltAddress alt_addresses = 7;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.alt_addresses_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional uint32 best_dc_ping_ms = 9;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.best_dc_ping_ms_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 best_dc_score = 10;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.best_dc_score_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional fixed32 best_dc_via_relay_pop_id = 11;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.best_dc_via_relay_pop_id_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional uint32 default_dc_ping_ms = 12;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.default_dc_ping_ms_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 default_dc_score = 13;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.default_dc_score_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional fixed32 default_dc_via_relay_pop_id = 14;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.default_dc_via_relay_pop_id_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional uint32 test_dc_ping_ms = 15;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.test_dc_ping_ms_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 test_dc_score = 16;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.test_dc_score_), _Internal::kHasBitsOffset + 13, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional fixed32 test_dc_via_relay_pop_id = 17;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.test_dc_via_relay_pop_id_), _Internal::kHasBitsOffset + 14, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::CMsgSteamDatagramClientPingSampleReply_POP_AltAddress>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void CMsgSteamDatagramClientPingSampleReply_POP::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramClientPingSampleReply.POP)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.alt_addresses_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    ::memset(&_impl_.pop_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.best_dc_score_) -
        reinterpret_cast<char*>(&_impl_.pop_id_)) + sizeof(_impl_.best_dc_score_));
  }
  if ((cached_has_bits & 0x00007f00u) != 0) {
    ::memset(&_impl_.best_dc_via_relay_pop_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.test_dc_via_relay_pop_id_) -
        reinterpret_cast<char*>(&_impl_.best_dc_via_relay_pop_id_)) + sizeof(_impl_.test_dc_via_relay_pop_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramClientPingSampleReply_POP::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CMsgSteamDatagramClientPingSampleReply_POP& this_ = static_cast<const CMsgSteamDatagramClientPingSampleReply_POP&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramClientPingSampleReply_POP::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CMsgSteamDatagramClientPingSampleReply_POP& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramClientPingSampleReply.POP)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional fixed32 pop_id = 1;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        1, this_._internal_pop_id(), target);
  }

  // optional uint32 default_front_ping_ms = 2;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this_._internal_default_front_ping_ms(), target);
  }

  // optional uint32 default_e2e_ping_ms = 3;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this_._internal_default_e2e_ping_ms(), target);
  }

  // optional uint32 cluster_penalty = 4;
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this_._internal_cluster_penalty(), target);
  }

  // optional uint32 default_e2e_score = 5;
  if ((cached_has_bits & 0x00000010u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this_._internal_default_e2e_score(), target);
  }

  // optional fixed32 p2p_via_peer_relay_pop_id = 6;
  if ((cached_has_bits & 0x00000020u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        6, this_._internal_p2p_via_peer_relay_pop_id(), target);
  }

  // repeated .CMsgSteamDatagramClientPingSampleReply.POP.AltAddress alt_addresses = 7;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_alt_addresses_size());
       i < n; i++) {
    const auto& repfield = this_._internal_alt_addresses().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            7, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // optional uint32 best_dc_ping_ms = 9;
  if ((cached_has_bits & 0x00000040u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        9, this_._internal_best_dc_ping_ms(), target);
  }

  // optional uint32 best_dc_score = 10;
  if ((cached_has_bits & 0x00000080u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        10, this_._internal_best_dc_score(), target);
  }

  // optional fixed32 best_dc_via_relay_pop_id = 11;
  if ((cached_has_bits & 0x00000100u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        11, this_._internal_best_dc_via_relay_pop_id(), target);
  }

  // optional uint32 default_dc_ping_ms = 12;
  if ((cached_has_bits & 0x00000200u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        12, this_._internal_default_dc_ping_ms(), target);
  }

  // optional uint32 default_dc_score = 13;
  if ((cached_has_bits & 0x00000400u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        13, this_._internal_default_dc_score(), target);
  }

  // optional fixed32 default_dc_via_relay_pop_id = 14;
  if ((cached_has_bits & 0x00000800u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        14, this_._internal_default_dc_via_relay_pop_id(), target);
  }

  // optional uint32 test_dc_ping_ms = 15;
  if ((cached_has_bits & 0x00001000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        15, this_._internal_test_dc_ping_ms(), target);
  }

  // optional uint32 test_dc_score = 16;
  if ((cached_has_bits & 0x00002000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        16, this_._internal_test_dc_score(), target);
  }

  // optional fixed32 test_dc_via_relay_pop_id = 17;
  if ((cached_has_bits & 0x00004000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        17, this_._internal_test_dc_via_relay_pop_id(), target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramClientPingSampleReply.POP)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CMsgSteamDatagramClientPingSampleReply_POP::ByteSizeLong(const MessageLite& base) {
  const CMsgSteamDatagramClientPingSampleReply_POP& this_ = static_cast<const CMsgSteamDatagramClientPingSampleReply_POP&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t CMsgSteamDatagramClientPingSampleReply_POP::ByteSizeLong() const {
  const CMsgSteamDatagramClientPingSampleReply_POP& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramClientPingSampleReply.POP)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .CMsgSteamDatagramClientPingSampleReply.POP.AltAddress alt_addresses = 7;
    {
      total_size += 1UL * this_._internal_alt_addresses_size();
      for (const auto& msg : this_._internal_alt_addresses()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += static_cast<bool>(0x00004000u & cached_has_bits) * 6;
  total_size += ::absl::popcount(0x00000921u & cached_has_bits) * 5;
  if ((cached_has_bits & 0x000000deu) != 0) {
    // optional uint32 default_front_ping_ms = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_default_front_ping_ms());
    }
    // optional uint32 default_e2e_ping_ms = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_default_e2e_ping_ms());
    }
    // optional uint32 cluster_penalty = 4;
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_cluster_penalty());
    }
    // optional uint32 default_e2e_score = 5;
    if ((cached_has_bits & 0x00000010u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_default_e2e_score());
    }
    // optional uint32 best_dc_ping_ms = 9;
    if ((cached_has_bits & 0x00000040u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_best_dc_ping_ms());
    }
    // optional uint32 best_dc_score = 10;
    if ((cached_has_bits & 0x00000080u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_best_dc_score());
    }
  }
  if ((cached_has_bits & 0x00003600u) != 0) {
    // optional uint32 default_dc_ping_ms = 12;
    if ((cached_has_bits & 0x00000200u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_default_dc_ping_ms());
    }
    // optional uint32 default_dc_score = 13;
    if ((cached_has_bits & 0x00000400u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_default_dc_score());
    }
    // optional uint32 test_dc_ping_ms = 15;
    if ((cached_has_bits & 0x00001000u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_test_dc_ping_ms());
    }
    // optional uint32 test_dc_score = 16;
    if ((cached_has_bits & 0x00002000u) != 0) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this_._internal_test_dc_score());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void CMsgSteamDatagramClientPingSampleReply_POP::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramClientPingSampleReply_POP*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramClientPingSampleReply_POP&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramClientPingSampleReply.POP)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_alt_addresses()->MergeFrom(
      from._internal_alt_addresses());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_impl_.pop_id_ = from._impl_.pop_id_;
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_impl_.default_front_ping_ms_ = from._impl_.default_front_ping_ms_;
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_impl_.default_e2e_ping_ms_ = from._impl_.default_e2e_ping_ms_;
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _this->_impl_.cluster_penalty_ = from._impl_.cluster_penalty_;
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _this->_impl_.default_e2e_score_ = from._impl_.default_e2e_score_;
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      _this->_impl_.p2p_via_peer_relay_pop_id_ = from._impl_.p2p_via_peer_relay_pop_id_;
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      _this->_impl_.best_dc_ping_ms_ = from._impl_.best_dc_ping_ms_;
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      _this->_impl_.best_dc_score_ = from._impl_.best_dc_score_;
    }
  }
  if ((cached_has_bits & 0x00007f00u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      _this->_impl_.best_dc_via_relay_pop_id_ = from._impl_.best_dc_via_relay_pop_id_;
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      _this->_impl_.default_dc_ping_ms_ = from._impl_.default_dc_ping_ms_;
    }
    if ((cached_has_bits & 0x00000400u) != 0) {
      _this->_impl_.default_dc_score_ = from._impl_.default_dc_score_;
    }
    if ((cached_has_bits & 0x00000800u) != 0) {
      _this->_impl_.default_dc_via_relay_pop_id_ = from._impl_.default_dc_via_relay_pop_id_;
    }
    if ((cached_has_bits & 0x00001000u) != 0) {
      _this->_impl_.test_dc_ping_ms_ = from._impl_.test_dc_ping_ms_;
    }
    if ((cached_has_bits & 0x00002000u) != 0) {
      _this->_impl_.test_dc_score_ = from._impl_.test_dc_score_;
    }
    if ((cached_has_bits & 0x00004000u) != 0) {
      _this->_impl_.test_dc_via_relay_pop_id_ = from._impl_.test_dc_via_relay_pop_id_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramClientPingSampleReply_POP::CopyFrom(const CMsgSteamDatagramClientPingSampleReply_POP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramClientPingSampleReply.POP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CMsgSteamDatagramClientPingSampleReply_POP::InternalSwap(CMsgSteamDatagramClientPingSampleReply_POP* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.alt_addresses_.InternalSwap(&other->_impl_.alt_addresses_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.test_dc_via_relay_pop_id_)
      + sizeof(CMsgSteamDatagramClientPingSampleReply_POP::_impl_.test_dc_via_relay_pop_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_POP, _impl_.pop_id_)>(
          reinterpret_cast<char*>(&_impl_.pop_id_),
          reinterpret_cast<char*>(&other->_impl_.pop_id_));
}

::google::protobuf::Metadata CMsgSteamDatagramClientPingSampleReply_POP::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter, _impl_._has_bits_);
};

CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter)
}
CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, data_center_id_),
           0,
           offsetof(Impl_, best_dc_ping_ms_) -
               offsetof(Impl_, data_center_id_) +
               sizeof(Impl_::best_dc_ping_ms_));
}
CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::~CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter)
  SharedDtor(*this);
}
inline void CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::SharedDtor(MessageLite& self) {
  CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter& this_ = static_cast<CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter(arena);
}
constexpr auto CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter),
                                            alignof(CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter));
}
constexpr auto CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter>(), &CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::ByteSizeLong,
              &CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter, _impl_._cached_size_),
          false,
      },
      &CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::kDescriptorMethods,
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter_class_data_ =
            CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter_class_data_.tc_table);
  return CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2>
CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional fixed32 data_center_id = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter, _impl_.data_center_id_)}},
    // optional fixed32 best_dc_via_relay_pop_id = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter, _impl_.best_dc_via_relay_pop_id_)}},
    // optional uint32 best_dc_ping_ms = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter, _impl_.best_dc_ping_ms_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter, _impl_.best_dc_ping_ms_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional fixed32 data_center_id = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter, _impl_.data_center_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional fixed32 best_dc_via_relay_pop_id = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter, _impl_.best_dc_via_relay_pop_id_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional uint32 best_dc_ping_ms = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter, _impl_.best_dc_ping_ms_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};
PROTOBUF_NOINLINE void CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    ::memset(&_impl_.data_center_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.best_dc_ping_ms_) -
        reinterpret_cast<char*>(&_impl_.data_center_id_)) + sizeof(_impl_.best_dc_ping_ms_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter& this_ = static_cast<const CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional fixed32 data_center_id = 1;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        1, this_._internal_data_center_id(), target);
  }

  // optional fixed32 best_dc_via_relay_pop_id = 2;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        2, this_._internal_best_dc_via_relay_pop_id(), target);
  }

  // optional uint32 best_dc_ping_ms = 3;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this_._internal_best_dc_ping_ms(), target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::ByteSizeLong(const MessageLite& base) {
  const CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter& this_ = static_cast<const CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::ByteSizeLong() const {
  const CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += ::absl::popcount(0x00000003u & cached_has_bits) * 5;
   {
    // optional uint32 best_dc_ping_ms = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_best_dc_ping_ms());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_impl_.data_center_id_ = from._impl_.data_center_id_;
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_impl_.best_dc_via_relay_pop_id_ = from._impl_.best_dc_via_relay_pop_id_;
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_impl_.best_dc_ping_ms_ = from._impl_.best_dc_ping_ms_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::CopyFrom(const CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::InternalSwap(CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter, _impl_.best_dc_ping_ms_)
      + sizeof(CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::_impl_.best_dc_ping_ms_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter, _impl_.data_center_id_)>(
          reinterpret_cast<char*>(&_impl_.data_center_id_),
          reinterpret_cast<char*>(&other->_impl_.data_center_id_));
}

::google::protobuf::Metadata CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CMsgSteamDatagramClientPingSampleReply::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CMsgSteamDatagramClientPingSampleReply>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply, _impl_._has_bits_);
};

CMsgSteamDatagramClientPingSampleReply::CMsgSteamDatagramClientPingSampleReply(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramClientPingSampleReply_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramClientPingSampleReply)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramClientPingSampleReply::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::CMsgSteamDatagramClientPingSampleReply& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        pops_{visibility, arena, from.pops_},
        legacy_data_centers_{visibility, arena, from.legacy_data_centers_} {}

CMsgSteamDatagramClientPingSampleReply::CMsgSteamDatagramClientPingSampleReply(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const CMsgSteamDatagramClientPingSampleReply& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramClientPingSampleReply_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CMsgSteamDatagramClientPingSampleReply* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.tos_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.tos_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, connection_id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, connection_id_),
           offsetof(Impl_, relay_override_active_) -
               offsetof(Impl_, connection_id_) +
               sizeof(Impl_::relay_override_active_));

  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramClientPingSampleReply)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramClientPingSampleReply::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        pops_{visibility, arena},
        legacy_data_centers_{visibility, arena} {}

inline void CMsgSteamDatagramClientPingSampleReply::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, tos_),
           0,
           offsetof(Impl_, relay_override_active_) -
               offsetof(Impl_, tos_) +
               sizeof(Impl_::relay_override_active_));
}
CMsgSteamDatagramClientPingSampleReply::~CMsgSteamDatagramClientPingSampleReply() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramClientPingSampleReply)
  SharedDtor(*this);
}
inline void CMsgSteamDatagramClientPingSampleReply::SharedDtor(MessageLite& self) {
  CMsgSteamDatagramClientPingSampleReply& this_ = static_cast<CMsgSteamDatagramClientPingSampleReply&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.tos_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CMsgSteamDatagramClientPingSampleReply::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CMsgSteamDatagramClientPingSampleReply(arena);
}
constexpr auto CMsgSteamDatagramClientPingSampleReply::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply, _impl_.pops_) +
          decltype(CMsgSteamDatagramClientPingSampleReply::_impl_.pops_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply, _impl_.legacy_data_centers_) +
          decltype(CMsgSteamDatagramClientPingSampleReply::_impl_.legacy_data_centers_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(CMsgSteamDatagramClientPingSampleReply), alignof(CMsgSteamDatagramClientPingSampleReply), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&CMsgSteamDatagramClientPingSampleReply::PlacementNew_,
                                 sizeof(CMsgSteamDatagramClientPingSampleReply),
                                 alignof(CMsgSteamDatagramClientPingSampleReply));
  }
}
constexpr auto CMsgSteamDatagramClientPingSampleReply::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CMsgSteamDatagramClientPingSampleReply_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CMsgSteamDatagramClientPingSampleReply::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CMsgSteamDatagramClientPingSampleReply>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CMsgSteamDatagramClientPingSampleReply::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CMsgSteamDatagramClientPingSampleReply>(), &CMsgSteamDatagramClientPingSampleReply::ByteSizeLong,
              &CMsgSteamDatagramClientPingSampleReply::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply, _impl_._cached_size_),
          false,
      },
      &CMsgSteamDatagramClientPingSampleReply::kDescriptorMethods,
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        CMsgSteamDatagramClientPingSampleReply_class_data_ =
            CMsgSteamDatagramClientPingSampleReply::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL CMsgSteamDatagramClientPingSampleReply::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CMsgSteamDatagramClientPingSampleReply_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CMsgSteamDatagramClientPingSampleReply_class_data_.tc_table);
  return CMsgSteamDatagramClientPingSampleReply_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 3, 0, 2>
CMsgSteamDatagramClientPingSampleReply::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967240,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    CMsgSteamDatagramClientPingSampleReply_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CMsgSteamDatagramClientPingSampleReply>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional fixed32 connection_id = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply, _impl_.connection_id_)}},
    // repeated .CMsgSteamDatagramClientPingSampleReply.POP pops = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply, _impl_.pops_)}},
    // repeated .CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter legacy_data_centers = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 1, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply, _impl_.legacy_data_centers_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional bool relay_override_active = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CMsgSteamDatagramClientPingSampleReply, _impl_.relay_override_active_), 2>(),
     {40, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply, _impl_.relay_override_active_)}},
    // optional .CMsgTOSTreatment tos = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 0, 2, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply, _impl_.tos_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional fixed32 connection_id = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply, _impl_.connection_id_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // repeated .CMsgSteamDatagramClientPingSampleReply.POP pops = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply, _impl_.pops_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter legacy_data_centers = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply, _impl_.legacy_data_centers_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional bool relay_override_active = 5;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply, _impl_.relay_override_active_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional .CMsgTOSTreatment tos = 6;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply, _impl_.tos_), _Internal::kHasBitsOffset + 0, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::CMsgSteamDatagramClientPingSampleReply_POP>()},
      {::_pbi::TcParser::GetTable<::CMsgSteamDatagramClientPingSampleReply_LegacyDataCenter>()},
      {::_pbi::TcParser::GetTable<::CMsgTOSTreatment>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void CMsgSteamDatagramClientPingSampleReply::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramClientPingSampleReply)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.pops_.Clear();
  _impl_.legacy_data_centers_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(_impl_.tos_ != nullptr);
    _impl_.tos_->Clear();
  }
  if ((cached_has_bits & 0x00000006u) != 0) {
    ::memset(&_impl_.connection_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.relay_override_active_) -
        reinterpret_cast<char*>(&_impl_.connection_id_)) + sizeof(_impl_.relay_override_active_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramClientPingSampleReply::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CMsgSteamDatagramClientPingSampleReply& this_ = static_cast<const CMsgSteamDatagramClientPingSampleReply&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramClientPingSampleReply::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CMsgSteamDatagramClientPingSampleReply& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramClientPingSampleReply)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional fixed32 connection_id = 1;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        1, this_._internal_connection_id(), target);
  }

  // repeated .CMsgSteamDatagramClientPingSampleReply.POP pops = 2;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_pops_size());
       i < n; i++) {
    const auto& repfield = this_._internal_pops().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            2, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated .CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter legacy_data_centers = 3;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_legacy_data_centers_size());
       i < n; i++) {
    const auto& repfield = this_._internal_legacy_data_centers().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            3, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // optional bool relay_override_active = 5;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this_._internal_relay_override_active(), target);
  }

  // optional .CMsgTOSTreatment tos = 6;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, *this_._impl_.tos_, this_._impl_.tos_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramClientPingSampleReply)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CMsgSteamDatagramClientPingSampleReply::ByteSizeLong(const MessageLite& base) {
  const CMsgSteamDatagramClientPingSampleReply& this_ = static_cast<const CMsgSteamDatagramClientPingSampleReply&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t CMsgSteamDatagramClientPingSampleReply::ByteSizeLong() const {
  const CMsgSteamDatagramClientPingSampleReply& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramClientPingSampleReply)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .CMsgSteamDatagramClientPingSampleReply.POP pops = 2;
    {
      total_size += 1UL * this_._internal_pops_size();
      for (const auto& msg : this_._internal_pops()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
    // repeated .CMsgSteamDatagramClientPingSampleReply.LegacyDataCenter legacy_data_centers = 3;
    {
      total_size += 1UL * this_._internal_legacy_data_centers_size();
      for (const auto& msg : this_._internal_legacy_data_centers()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += static_cast<bool>(0x00000002u & cached_has_bits) * 5;
  total_size += static_cast<bool>(0x00000004u & cached_has_bits) * 2;
   {
    // optional .CMsgTOSTreatment tos = 6;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.tos_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void CMsgSteamDatagramClientPingSampleReply::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramClientPingSampleReply*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramClientPingSampleReply&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramClientPingSampleReply)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_pops()->MergeFrom(
      from._internal_pops());
  _this->_internal_mutable_legacy_data_centers()->MergeFrom(
      from._internal_legacy_data_centers());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.tos_ != nullptr);
      if (_this->_impl_.tos_ == nullptr) {
        _this->_impl_.tos_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.tos_);
      } else {
        _this->_impl_.tos_->MergeFrom(*from._impl_.tos_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_impl_.connection_id_ = from._impl_.connection_id_;
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_impl_.relay_override_active_ = from._impl_.relay_override_active_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramClientPingSampleReply::CopyFrom(const CMsgSteamDatagramClientPingSampleReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramClientPingSampleReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CMsgSteamDatagramClientPingSampleReply::InternalSwap(CMsgSteamDatagramClientPingSampleReply* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.pops_.InternalSwap(&other->_impl_.pops_);
  _impl_.legacy_data_centers_.InternalSwap(&other->_impl_.legacy_data_centers_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply, _impl_.relay_override_active_)
      + sizeof(CMsgSteamDatagramClientPingSampleReply::_impl_.relay_override_active_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientPingSampleReply, _impl_.tos_)>(
          reinterpret_cast<char*>(&_impl_.tos_),
          reinterpret_cast<char*>(&other->_impl_.tos_));
}

::google::protobuf::Metadata CMsgSteamDatagramClientPingSampleReply::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CMsgSteamDatagramClientSwitchedPrimary_RouterQuality>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, _impl_._has_bits_);
};

CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramClientSwitchedPrimary_RouterQuality_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramClientSwitchedPrimary.RouterQuality)
}
CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramClientSwitchedPrimary_RouterQuality_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, score_),
           0,
           offsetof(Impl_, seconds_until_down_) -
               offsetof(Impl_, score_) +
               sizeof(Impl_::seconds_until_down_));
}
CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::~CMsgSteamDatagramClientSwitchedPrimary_RouterQuality() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramClientSwitchedPrimary.RouterQuality)
  SharedDtor(*this);
}
inline void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::SharedDtor(MessageLite& self) {
  CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& this_ = static_cast<CMsgSteamDatagramClientSwitchedPrimary_RouterQuality&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CMsgSteamDatagramClientSwitchedPrimary_RouterQuality(arena);
}
constexpr auto CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality),
                                            alignof(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality));
}
constexpr auto CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CMsgSteamDatagramClientSwitchedPrimary_RouterQuality_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CMsgSteamDatagramClientSwitchedPrimary_RouterQuality>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CMsgSteamDatagramClientSwitchedPrimary_RouterQuality>(), &CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::ByteSizeLong,
              &CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, _impl_._cached_size_),
          false,
      },
      &CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::kDescriptorMethods,
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        CMsgSteamDatagramClientSwitchedPrimary_RouterQuality_class_data_ =
            CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CMsgSteamDatagramClientSwitchedPrimary_RouterQuality_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality_class_data_.tc_table);
  return CMsgSteamDatagramClientSwitchedPrimary_RouterQuality_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 0, 2>
CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    CMsgSteamDatagramClientSwitchedPrimary_RouterQuality_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional uint32 seconds_until_down = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, _impl_.seconds_until_down_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, _impl_.seconds_until_down_)}},
    // optional uint32 score = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, _impl_.score_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, _impl_.score_)}},
    // optional uint32 front_ping = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, _impl_.front_ping_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, _impl_.front_ping_)}},
    // optional uint32 back_ping = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, _impl_.back_ping_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, _impl_.back_ping_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional uint32 score = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, _impl_.score_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 front_ping = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, _impl_.front_ping_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 back_ping = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, _impl_.back_ping_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 seconds_until_down = 4;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, _impl_.seconds_until_down_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};
PROTOBUF_NOINLINE void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramClientSwitchedPrimary.RouterQuality)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    ::memset(&_impl_.score_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.seconds_until_down_) -
        reinterpret_cast<char*>(&_impl_.score_)) + sizeof(_impl_.seconds_until_down_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& this_ = static_cast<const CMsgSteamDatagramClientSwitchedPrimary_RouterQuality&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramClientSwitchedPrimary.RouterQuality)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional uint32 score = 1;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this_._internal_score(), target);
  }

  // optional uint32 front_ping = 2;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this_._internal_front_ping(), target);
  }

  // optional uint32 back_ping = 3;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this_._internal_back_ping(), target);
  }

  // optional uint32 seconds_until_down = 4;
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this_._internal_seconds_until_down(), target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramClientSwitchedPrimary.RouterQuality)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::ByteSizeLong(const MessageLite& base) {
  const CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& this_ = static_cast<const CMsgSteamDatagramClientSwitchedPrimary_RouterQuality&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::ByteSizeLong() const {
  const CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramClientSwitchedPrimary.RouterQuality)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    // optional uint32 score = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_score());
    }
    // optional uint32 front_ping = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_front_ping());
    }
    // optional uint32 back_ping = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_back_ping());
    }
    // optional uint32 seconds_until_down = 4;
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_seconds_until_down());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramClientSwitchedPrimary_RouterQuality*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramClientSwitchedPrimary_RouterQuality&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramClientSwitchedPrimary.RouterQuality)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_impl_.score_ = from._impl_.score_;
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_impl_.front_ping_ = from._impl_.front_ping_;
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_impl_.back_ping_ = from._impl_.back_ping_;
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _this->_impl_.seconds_until_down_ = from._impl_.seconds_until_down_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::CopyFrom(const CMsgSteamDatagramClientSwitchedPrimary_RouterQuality& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramClientSwitchedPrimary.RouterQuality)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::InternalSwap(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, _impl_.seconds_until_down_)
      + sizeof(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::_impl_.seconds_until_down_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary_RouterQuality, _impl_.score_)>(
          reinterpret_cast<char*>(&_impl_.score_),
          reinterpret_cast<char*>(&other->_impl_.score_));
}

::google::protobuf::Metadata CMsgSteamDatagramClientSwitchedPrimary_RouterQuality::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CMsgSteamDatagramClientSwitchedPrimary::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CMsgSteamDatagramClientSwitchedPrimary>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, _impl_._has_bits_);
};

CMsgSteamDatagramClientSwitchedPrimary::CMsgSteamDatagramClientSwitchedPrimary(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramClientSwitchedPrimary_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramClientSwitchedPrimary)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramClientSwitchedPrimary::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::CMsgSteamDatagramClientSwitchedPrimary& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        from_dropped_reason_(arena, from.from_dropped_reason_) {}

CMsgSteamDatagramClientSwitchedPrimary::CMsgSteamDatagramClientSwitchedPrimary(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const CMsgSteamDatagramClientSwitchedPrimary& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramClientSwitchedPrimary_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CMsgSteamDatagramClientSwitchedPrimary* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.from_quality_now_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.from_quality_now_)
                : nullptr;
  _impl_.to_quality_now_ = ((cached_has_bits & 0x00000004u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.to_quality_now_)
                : nullptr;
  _impl_.from_quality_then_ = ((cached_has_bits & 0x00000008u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.from_quality_then_)
                : nullptr;
  _impl_.to_quality_then_ = ((cached_has_bits & 0x00000010u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.to_quality_then_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, connection_id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, connection_id_),
           offsetof(Impl_, gap_ms_) -
               offsetof(Impl_, connection_id_) +
               sizeof(Impl_::gap_ms_));

  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramClientSwitchedPrimary)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramClientSwitchedPrimary::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        from_dropped_reason_(arena) {}

inline void CMsgSteamDatagramClientSwitchedPrimary::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, from_quality_now_),
           0,
           offsetof(Impl_, gap_ms_) -
               offsetof(Impl_, from_quality_now_) +
               sizeof(Impl_::gap_ms_));
}
CMsgSteamDatagramClientSwitchedPrimary::~CMsgSteamDatagramClientSwitchedPrimary() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramClientSwitchedPrimary)
  SharedDtor(*this);
}
inline void CMsgSteamDatagramClientSwitchedPrimary::SharedDtor(MessageLite& self) {
  CMsgSteamDatagramClientSwitchedPrimary& this_ = static_cast<CMsgSteamDatagramClientSwitchedPrimary&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.from_dropped_reason_.Destroy();
  delete this_._impl_.from_quality_now_;
  delete this_._impl_.to_quality_now_;
  delete this_._impl_.from_quality_then_;
  delete this_._impl_.to_quality_then_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CMsgSteamDatagramClientSwitchedPrimary::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CMsgSteamDatagramClientSwitchedPrimary(arena);
}
constexpr auto CMsgSteamDatagramClientSwitchedPrimary::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(CMsgSteamDatagramClientSwitchedPrimary),
                                            alignof(CMsgSteamDatagramClientSwitchedPrimary));
}
constexpr auto CMsgSteamDatagramClientSwitchedPrimary::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CMsgSteamDatagramClientSwitchedPrimary_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CMsgSteamDatagramClientSwitchedPrimary::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CMsgSteamDatagramClientSwitchedPrimary>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CMsgSteamDatagramClientSwitchedPrimary::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CMsgSteamDatagramClientSwitchedPrimary>(), &CMsgSteamDatagramClientSwitchedPrimary::ByteSizeLong,
              &CMsgSteamDatagramClientSwitchedPrimary::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, _impl_._cached_size_),
          false,
      },
      &CMsgSteamDatagramClientSwitchedPrimary::kDescriptorMethods,
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        CMsgSteamDatagramClientSwitchedPrimary_class_data_ =
            CMsgSteamDatagramClientSwitchedPrimary::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL CMsgSteamDatagramClientSwitchedPrimary::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CMsgSteamDatagramClientSwitchedPrimary_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CMsgSteamDatagramClientSwitchedPrimary_class_data_.tc_table);
  return CMsgSteamDatagramClientSwitchedPrimary_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 12, 4, 74, 2>
CMsgSteamDatagramClientSwitchedPrimary::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, _impl_._has_bits_),
    0, // no _extensions_
    12, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294963200,  // skipmap
    offsetof(decltype(_table_), field_entries),
    12,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    CMsgSteamDatagramClientSwitchedPrimary_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CMsgSteamDatagramClientSwitchedPrimary>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional fixed32 connection_id = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 5, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, _impl_.connection_id_)}},
    // optional fixed32 from_ip = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 6, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, _impl_.from_ip_)}},
    // optional uint32 from_port = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramClientSwitchedPrimary, _impl_.from_port_), 7>(),
     {24, 7, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, _impl_.from_port_)}},
    // optional fixed32 from_router_cluster = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 8, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, _impl_.from_router_cluster_)}},
    // optional uint32 from_active_time = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramClientSwitchedPrimary, _impl_.from_active_time_), 9>(),
     {40, 9, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, _impl_.from_active_time_)}},
    // optional uint32 from_active_packets_recv = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramClientSwitchedPrimary, _impl_.from_active_packets_recv_), 10>(),
     {48, 10, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, _impl_.from_active_packets_recv_)}},
    // optional string from_dropped_reason = 7;
    {::_pbi::TcParser::FastSS1,
     {58, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, _impl_.from_dropped_reason_)}},
    // optional uint32 gap_ms = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramClientSwitchedPrimary, _impl_.gap_ms_), 11>(),
     {64, 11, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, _impl_.gap_ms_)}},
    // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality from_quality_now = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, _impl_.from_quality_now_)}},
    // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality to_quality_now = 10;
    {::_pbi::TcParser::FastMtS1,
     {82, 2, 1, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, _impl_.to_quality_now_)}},
    // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality from_quality_then = 11;
    {::_pbi::TcParser::FastMtS1,
     {90, 3, 2, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, _impl_.from_quality_then_)}},
    // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality to_quality_then = 12;
    {::_pbi::TcParser::FastMtS1,
     {98, 4, 3, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, _impl_.to_quality_then_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional fixed32 connection_id = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, _impl_.connection_id_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional fixed32 from_ip = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, _impl_.from_ip_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional uint32 from_port = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, _impl_.from_port_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional fixed32 from_router_cluster = 4;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, _impl_.from_router_cluster_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional uint32 from_active_time = 5;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, _impl_.from_active_time_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 from_active_packets_recv = 6;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, _impl_.from_active_packets_recv_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional string from_dropped_reason = 7;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, _impl_.from_dropped_reason_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional uint32 gap_ms = 8;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, _impl_.gap_ms_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality from_quality_now = 9;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, _impl_.from_quality_now_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality to_quality_now = 10;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, _impl_.to_quality_now_), _Internal::kHasBitsOffset + 2, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality from_quality_then = 11;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, _impl_.from_quality_then_), _Internal::kHasBitsOffset + 3, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality to_quality_then = 12;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, _impl_.to_quality_then_), _Internal::kHasBitsOffset + 4, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality>()},
      {::_pbi::TcParser::GetTable<::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality>()},
      {::_pbi::TcParser::GetTable<::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality>()},
      {::_pbi::TcParser::GetTable<::CMsgSteamDatagramClientSwitchedPrimary_RouterQuality>()},
  }},
  {{
    "\46\0\0\0\0\0\0\23\0\0\0\0\0\0\0\0"
    "CMsgSteamDatagramClientSwitchedPrimary"
    "from_dropped_reason"
  }},
};
PROTOBUF_NOINLINE void CMsgSteamDatagramClientSwitchedPrimary::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramClientSwitchedPrimary)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.from_dropped_reason_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.from_quality_now_ != nullptr);
      _impl_.from_quality_now_->Clear();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(_impl_.to_quality_now_ != nullptr);
      _impl_.to_quality_now_->Clear();
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      ABSL_DCHECK(_impl_.from_quality_then_ != nullptr);
      _impl_.from_quality_then_->Clear();
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      ABSL_DCHECK(_impl_.to_quality_then_ != nullptr);
      _impl_.to_quality_then_->Clear();
    }
  }
  if ((cached_has_bits & 0x000000e0u) != 0) {
    ::memset(&_impl_.connection_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.from_port_) -
        reinterpret_cast<char*>(&_impl_.connection_id_)) + sizeof(_impl_.from_port_));
  }
  if ((cached_has_bits & 0x00000f00u) != 0) {
    ::memset(&_impl_.from_router_cluster_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.gap_ms_) -
        reinterpret_cast<char*>(&_impl_.from_router_cluster_)) + sizeof(_impl_.gap_ms_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramClientSwitchedPrimary::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CMsgSteamDatagramClientSwitchedPrimary& this_ = static_cast<const CMsgSteamDatagramClientSwitchedPrimary&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramClientSwitchedPrimary::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CMsgSteamDatagramClientSwitchedPrimary& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramClientSwitchedPrimary)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional fixed32 connection_id = 1;
  if ((cached_has_bits & 0x00000020u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        1, this_._internal_connection_id(), target);
  }

  // optional fixed32 from_ip = 2;
  if ((cached_has_bits & 0x00000040u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        2, this_._internal_from_ip(), target);
  }

  // optional uint32 from_port = 3;
  if ((cached_has_bits & 0x00000080u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this_._internal_from_port(), target);
  }

  // optional fixed32 from_router_cluster = 4;
  if ((cached_has_bits & 0x00000100u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        4, this_._internal_from_router_cluster(), target);
  }

  // optional uint32 from_active_time = 5;
  if ((cached_has_bits & 0x00000200u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this_._internal_from_active_time(), target);
  }

  // optional uint32 from_active_packets_recv = 6;
  if ((cached_has_bits & 0x00000400u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this_._internal_from_active_packets_recv(), target);
  }

  // optional string from_dropped_reason = 7;
  if ((cached_has_bits & 0x00000001u) != 0) {
    const std::string& _s = this_._internal_from_dropped_reason();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CMsgSteamDatagramClientSwitchedPrimary.from_dropped_reason");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // optional uint32 gap_ms = 8;
  if ((cached_has_bits & 0x00000800u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        8, this_._internal_gap_ms(), target);
  }

  // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality from_quality_now = 9;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        9, *this_._impl_.from_quality_now_, this_._impl_.from_quality_now_->GetCachedSize(), target,
        stream);
  }

  // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality to_quality_now = 10;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        10, *this_._impl_.to_quality_now_, this_._impl_.to_quality_now_->GetCachedSize(), target,
        stream);
  }

  // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality from_quality_then = 11;
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        11, *this_._impl_.from_quality_then_, this_._impl_.from_quality_then_->GetCachedSize(), target,
        stream);
  }

  // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality to_quality_then = 12;
  if ((cached_has_bits & 0x00000010u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        12, *this_._impl_.to_quality_then_, this_._impl_.to_quality_then_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramClientSwitchedPrimary)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CMsgSteamDatagramClientSwitchedPrimary::ByteSizeLong(const MessageLite& base) {
  const CMsgSteamDatagramClientSwitchedPrimary& this_ = static_cast<const CMsgSteamDatagramClientSwitchedPrimary&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t CMsgSteamDatagramClientSwitchedPrimary::ByteSizeLong() const {
  const CMsgSteamDatagramClientSwitchedPrimary& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramClientSwitchedPrimary)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += ::absl::popcount(0x00000160u & cached_has_bits) * 5;
  if ((cached_has_bits & 0x0000009fu) != 0) {
    // optional string from_dropped_reason = 7;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_from_dropped_reason());
    }
    // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality from_quality_now = 9;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.from_quality_now_);
    }
    // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality to_quality_now = 10;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.to_quality_now_);
    }
    // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality from_quality_then = 11;
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.from_quality_then_);
    }
    // optional .CMsgSteamDatagramClientSwitchedPrimary.RouterQuality to_quality_then = 12;
    if ((cached_has_bits & 0x00000010u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.to_quality_then_);
    }
    // optional uint32 from_port = 3;
    if ((cached_has_bits & 0x00000080u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_from_port());
    }
  }
  if ((cached_has_bits & 0x00000e00u) != 0) {
    // optional uint32 from_active_time = 5;
    if ((cached_has_bits & 0x00000200u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_from_active_time());
    }
    // optional uint32 from_active_packets_recv = 6;
    if ((cached_has_bits & 0x00000400u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_from_active_packets_recv());
    }
    // optional uint32 gap_ms = 8;
    if ((cached_has_bits & 0x00000800u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_gap_ms());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void CMsgSteamDatagramClientSwitchedPrimary::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramClientSwitchedPrimary*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramClientSwitchedPrimary&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramClientSwitchedPrimary)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_internal_set_from_dropped_reason(from._internal_from_dropped_reason());
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.from_quality_now_ != nullptr);
      if (_this->_impl_.from_quality_now_ == nullptr) {
        _this->_impl_.from_quality_now_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.from_quality_now_);
      } else {
        _this->_impl_.from_quality_now_->MergeFrom(*from._impl_.from_quality_now_);
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(from._impl_.to_quality_now_ != nullptr);
      if (_this->_impl_.to_quality_now_ == nullptr) {
        _this->_impl_.to_quality_now_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.to_quality_now_);
      } else {
        _this->_impl_.to_quality_now_->MergeFrom(*from._impl_.to_quality_now_);
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      ABSL_DCHECK(from._impl_.from_quality_then_ != nullptr);
      if (_this->_impl_.from_quality_then_ == nullptr) {
        _this->_impl_.from_quality_then_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.from_quality_then_);
      } else {
        _this->_impl_.from_quality_then_->MergeFrom(*from._impl_.from_quality_then_);
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      ABSL_DCHECK(from._impl_.to_quality_then_ != nullptr);
      if (_this->_impl_.to_quality_then_ == nullptr) {
        _this->_impl_.to_quality_then_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.to_quality_then_);
      } else {
        _this->_impl_.to_quality_then_->MergeFrom(*from._impl_.to_quality_then_);
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      _this->_impl_.connection_id_ = from._impl_.connection_id_;
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      _this->_impl_.from_ip_ = from._impl_.from_ip_;
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      _this->_impl_.from_port_ = from._impl_.from_port_;
    }
  }
  if ((cached_has_bits & 0x00000f00u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      _this->_impl_.from_router_cluster_ = from._impl_.from_router_cluster_;
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      _this->_impl_.from_active_time_ = from._impl_.from_active_time_;
    }
    if ((cached_has_bits & 0x00000400u) != 0) {
      _this->_impl_.from_active_packets_recv_ = from._impl_.from_active_packets_recv_;
    }
    if ((cached_has_bits & 0x00000800u) != 0) {
      _this->_impl_.gap_ms_ = from._impl_.gap_ms_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramClientSwitchedPrimary::CopyFrom(const CMsgSteamDatagramClientSwitchedPrimary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramClientSwitchedPrimary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CMsgSteamDatagramClientSwitchedPrimary::InternalSwap(CMsgSteamDatagramClientSwitchedPrimary* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.from_dropped_reason_, &other->_impl_.from_dropped_reason_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, _impl_.gap_ms_)
      + sizeof(CMsgSteamDatagramClientSwitchedPrimary::_impl_.gap_ms_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramClientSwitchedPrimary, _impl_.from_quality_now_)>(
          reinterpret_cast<char*>(&_impl_.from_quality_now_),
          reinterpret_cast<char*>(&other->_impl_.from_quality_now_));
}

::google::protobuf::Metadata CMsgSteamDatagramClientSwitchedPrimary::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CMsgSteamDatagramConnectRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CMsgSteamDatagramConnectRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectRequest, _impl_._has_bits_);
};

void CMsgSteamDatagramConnectRequest::clear_crypt() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.crypt_ != nullptr) _impl_.crypt_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CMsgSteamDatagramConnectRequest::clear_cert() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.cert_ != nullptr) _impl_.cert_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CMsgSteamDatagramConnectRequest::CMsgSteamDatagramConnectRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramConnectRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramConnectRequest)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramConnectRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::CMsgSteamDatagramConnectRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

CMsgSteamDatagramConnectRequest::CMsgSteamDatagramConnectRequest(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const CMsgSteamDatagramConnectRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramConnectRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CMsgSteamDatagramConnectRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.crypt_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.crypt_)
                : nullptr;
  _impl_.cert_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.cert_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, connection_id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, connection_id_),
           offsetof(Impl_, routing_secret_) -
               offsetof(Impl_, connection_id_) +
               sizeof(Impl_::routing_secret_));

  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramConnectRequest)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramConnectRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void CMsgSteamDatagramConnectRequest::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, crypt_),
           0,
           offsetof(Impl_, routing_secret_) -
               offsetof(Impl_, crypt_) +
               sizeof(Impl_::routing_secret_));
}
CMsgSteamDatagramConnectRequest::~CMsgSteamDatagramConnectRequest() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramConnectRequest)
  SharedDtor(*this);
}
inline void CMsgSteamDatagramConnectRequest::SharedDtor(MessageLite& self) {
  CMsgSteamDatagramConnectRequest& this_ = static_cast<CMsgSteamDatagramConnectRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.crypt_;
  delete this_._impl_.cert_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CMsgSteamDatagramConnectRequest::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CMsgSteamDatagramConnectRequest(arena);
}
constexpr auto CMsgSteamDatagramConnectRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(CMsgSteamDatagramConnectRequest),
                                            alignof(CMsgSteamDatagramConnectRequest));
}
constexpr auto CMsgSteamDatagramConnectRequest::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CMsgSteamDatagramConnectRequest_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CMsgSteamDatagramConnectRequest::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CMsgSteamDatagramConnectRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CMsgSteamDatagramConnectRequest::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CMsgSteamDatagramConnectRequest>(), &CMsgSteamDatagramConnectRequest::ByteSizeLong,
              &CMsgSteamDatagramConnectRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectRequest, _impl_._cached_size_),
          false,
      },
      &CMsgSteamDatagramConnectRequest::kDescriptorMethods,
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        CMsgSteamDatagramConnectRequest_class_data_ =
            CMsgSteamDatagramConnectRequest::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL CMsgSteamDatagramConnectRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CMsgSteamDatagramConnectRequest_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CMsgSteamDatagramConnectRequest_class_data_.tc_table);
  return CMsgSteamDatagramConnectRequest_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 9, 2, 0, 2>
CMsgSteamDatagramConnectRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectRequest, _impl_._has_bits_),
    0, // no _extensions_
    10, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966400,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    CMsgSteamDatagramConnectRequest_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CMsgSteamDatagramConnectRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional fixed32 connection_id = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectRequest, _impl_.connection_id_)}},
    // optional uint32 gameserver_relay_session_id = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectRequest, _impl_.gameserver_relay_session_id_), 3>(),
     {16, 3, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectRequest, _impl_.gameserver_relay_session_id_)}},
    // optional fixed64 legacy_client_steam_id = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 4, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectRequest, _impl_.legacy_client_steam_id_)}},
    // optional fixed64 my_timestamp = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 5, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectRequest, _impl_.my_timestamp_)}},
    // optional uint32 ping_est_ms = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectRequest, _impl_.ping_est_ms_), 6>(),
     {40, 6, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectRequest, _impl_.ping_est_ms_)}},
    // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectRequest, _impl_.crypt_)}},
    // optional .CMsgSteamDatagramCertificateSigned cert = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 1, 1, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectRequest, _impl_.cert_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional uint32 virtual_port = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectRequest, _impl_.virtual_port_), 7>(),
     {72, 7, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectRequest, _impl_.virtual_port_)}},
    // optional fixed64 routing_secret = 10;
    {::_pbi::TcParser::FastF64S1,
     {81, 8, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectRequest, _impl_.routing_secret_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional fixed32 connection_id = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectRequest, _impl_.connection_id_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional uint32 gameserver_relay_session_id = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectRequest, _impl_.gameserver_relay_session_id_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional fixed64 legacy_client_steam_id = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectRequest, _impl_.legacy_client_steam_id_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
    // optional fixed64 my_timestamp = 4;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectRequest, _impl_.my_timestamp_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
    // optional uint32 ping_est_ms = 5;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectRequest, _impl_.ping_est_ms_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 6;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectRequest, _impl_.crypt_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .CMsgSteamDatagramCertificateSigned cert = 7;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectRequest, _impl_.cert_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional uint32 virtual_port = 9;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectRequest, _impl_.virtual_port_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional fixed64 routing_secret = 10;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectRequest, _impl_.routing_secret_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::CMsgSteamDatagramSessionCryptInfoSigned>()},
      {::_pbi::TcParser::GetTable<::CMsgSteamDatagramCertificateSigned>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void CMsgSteamDatagramConnectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramConnectRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.crypt_ != nullptr);
      _impl_.crypt_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.cert_ != nullptr);
      _impl_.cert_->Clear();
    }
  }
  if ((cached_has_bits & 0x000000fcu) != 0) {
    ::memset(&_impl_.connection_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.virtual_port_) -
        reinterpret_cast<char*>(&_impl_.connection_id_)) + sizeof(_impl_.virtual_port_));
  }
  _impl_.routing_secret_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramConnectRequest::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CMsgSteamDatagramConnectRequest& this_ = static_cast<const CMsgSteamDatagramConnectRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramConnectRequest::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CMsgSteamDatagramConnectRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramConnectRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional fixed32 connection_id = 1;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        1, this_._internal_connection_id(), target);
  }

  // optional uint32 gameserver_relay_session_id = 2;
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this_._internal_gameserver_relay_session_id(), target);
  }

  // optional fixed64 legacy_client_steam_id = 3;
  if ((cached_has_bits & 0x00000010u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        3, this_._internal_legacy_client_steam_id(), target);
  }

  // optional fixed64 my_timestamp = 4;
  if ((cached_has_bits & 0x00000020u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        4, this_._internal_my_timestamp(), target);
  }

  // optional uint32 ping_est_ms = 5;
  if ((cached_has_bits & 0x00000040u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this_._internal_ping_est_ms(), target);
  }

  // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 6;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, *this_._impl_.crypt_, this_._impl_.crypt_->GetCachedSize(), target,
        stream);
  }

  // optional .CMsgSteamDatagramCertificateSigned cert = 7;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, *this_._impl_.cert_, this_._impl_.cert_->GetCachedSize(), target,
        stream);
  }

  // optional uint32 virtual_port = 9;
  if ((cached_has_bits & 0x00000080u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        9, this_._internal_virtual_port(), target);
  }

  // optional fixed64 routing_secret = 10;
  if ((cached_has_bits & 0x00000100u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        10, this_._internal_routing_secret(), target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramConnectRequest)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CMsgSteamDatagramConnectRequest::ByteSizeLong(const MessageLite& base) {
  const CMsgSteamDatagramConnectRequest& this_ = static_cast<const CMsgSteamDatagramConnectRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t CMsgSteamDatagramConnectRequest::ByteSizeLong() const {
  const CMsgSteamDatagramConnectRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramConnectRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += ::absl::popcount(0x00000130u & cached_has_bits) * 9;
  total_size += static_cast<bool>(0x00000004u & cached_has_bits) * 5;
  if ((cached_has_bits & 0x000000cbu) != 0) {
    // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 6;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.crypt_);
    }
    // optional .CMsgSteamDatagramCertificateSigned cert = 7;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.cert_);
    }
    // optional uint32 gameserver_relay_session_id = 2;
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_gameserver_relay_session_id());
    }
    // optional uint32 ping_est_ms = 5;
    if ((cached_has_bits & 0x00000040u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_ping_est_ms());
    }
    // optional uint32 virtual_port = 9;
    if ((cached_has_bits & 0x00000080u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_virtual_port());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void CMsgSteamDatagramConnectRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramConnectRequest*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramConnectRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramConnectRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.crypt_ != nullptr);
      if (_this->_impl_.crypt_ == nullptr) {
        _this->_impl_.crypt_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.crypt_);
      } else {
        _this->_impl_.crypt_->MergeFrom(*from._impl_.crypt_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.cert_ != nullptr);
      if (_this->_impl_.cert_ == nullptr) {
        _this->_impl_.cert_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.cert_);
      } else {
        _this->_impl_.cert_->MergeFrom(*from._impl_.cert_);
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_impl_.connection_id_ = from._impl_.connection_id_;
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _this->_impl_.gameserver_relay_session_id_ = from._impl_.gameserver_relay_session_id_;
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _this->_impl_.legacy_client_steam_id_ = from._impl_.legacy_client_steam_id_;
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      _this->_impl_.my_timestamp_ = from._impl_.my_timestamp_;
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      _this->_impl_.ping_est_ms_ = from._impl_.ping_est_ms_;
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      _this->_impl_.virtual_port_ = from._impl_.virtual_port_;
    }
  }
  if ((cached_has_bits & 0x00000100u) != 0) {
    _this->_impl_.routing_secret_ = from._impl_.routing_secret_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramConnectRequest::CopyFrom(const CMsgSteamDatagramConnectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramConnectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CMsgSteamDatagramConnectRequest::InternalSwap(CMsgSteamDatagramConnectRequest* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectRequest, _impl_.routing_secret_)
      + sizeof(CMsgSteamDatagramConnectRequest::_impl_.routing_secret_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectRequest, _impl_.crypt_)>(
          reinterpret_cast<char*>(&_impl_.crypt_),
          reinterpret_cast<char*>(&other->_impl_.crypt_));
}

::google::protobuf::Metadata CMsgSteamDatagramConnectRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CMsgSteamDatagramConnectOK::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CMsgSteamDatagramConnectOK>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectOK, _impl_._has_bits_);
};

void CMsgSteamDatagramConnectOK::clear_crypt() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.crypt_ != nullptr) _impl_.crypt_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CMsgSteamDatagramConnectOK::clear_cert() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.cert_ != nullptr) _impl_.cert_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CMsgSteamDatagramConnectOK::CMsgSteamDatagramConnectOK(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramConnectOK_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramConnectOK)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramConnectOK::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::CMsgSteamDatagramConnectOK& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

CMsgSteamDatagramConnectOK::CMsgSteamDatagramConnectOK(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const CMsgSteamDatagramConnectOK& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramConnectOK_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CMsgSteamDatagramConnectOK* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.crypt_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.crypt_)
                : nullptr;
  _impl_.cert_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.cert_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, client_connection_id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, client_connection_id_),
           offsetof(Impl_, server_connection_id_) -
               offsetof(Impl_, client_connection_id_) +
               sizeof(Impl_::server_connection_id_));

  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramConnectOK)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramConnectOK::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void CMsgSteamDatagramConnectOK::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, crypt_),
           0,
           offsetof(Impl_, server_connection_id_) -
               offsetof(Impl_, crypt_) +
               sizeof(Impl_::server_connection_id_));
}
CMsgSteamDatagramConnectOK::~CMsgSteamDatagramConnectOK() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramConnectOK)
  SharedDtor(*this);
}
inline void CMsgSteamDatagramConnectOK::SharedDtor(MessageLite& self) {
  CMsgSteamDatagramConnectOK& this_ = static_cast<CMsgSteamDatagramConnectOK&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.crypt_;
  delete this_._impl_.cert_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CMsgSteamDatagramConnectOK::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CMsgSteamDatagramConnectOK(arena);
}
constexpr auto CMsgSteamDatagramConnectOK::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(CMsgSteamDatagramConnectOK),
                                            alignof(CMsgSteamDatagramConnectOK));
}
constexpr auto CMsgSteamDatagramConnectOK::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CMsgSteamDatagramConnectOK_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CMsgSteamDatagramConnectOK::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CMsgSteamDatagramConnectOK>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CMsgSteamDatagramConnectOK::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CMsgSteamDatagramConnectOK>(), &CMsgSteamDatagramConnectOK::ByteSizeLong,
              &CMsgSteamDatagramConnectOK::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectOK, _impl_._cached_size_),
          false,
      },
      &CMsgSteamDatagramConnectOK::kDescriptorMethods,
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        CMsgSteamDatagramConnectOK_class_data_ =
            CMsgSteamDatagramConnectOK::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL CMsgSteamDatagramConnectOK::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CMsgSteamDatagramConnectOK_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CMsgSteamDatagramConnectOK_class_data_.tc_table);
  return CMsgSteamDatagramConnectOK_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 2, 0, 2>
CMsgSteamDatagramConnectOK::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectOK, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    CMsgSteamDatagramConnectOK_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CMsgSteamDatagramConnectOK>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional fixed32 client_connection_id = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectOK, _impl_.client_connection_id_)}},
    // optional uint32 gameserver_relay_session_id = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectOK, _impl_.gameserver_relay_session_id_), 3>(),
     {16, 3, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectOK, _impl_.gameserver_relay_session_id_)}},
    // optional fixed64 your_timestamp = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 4, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectOK, _impl_.your_timestamp_)}},
    // optional uint32 delay_time_usec = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectOK, _impl_.delay_time_usec_), 5>(),
     {32, 5, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectOK, _impl_.delay_time_usec_)}},
    // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectOK, _impl_.crypt_)}},
    // optional .CMsgSteamDatagramCertificateSigned cert = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 1, 1, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectOK, _impl_.cert_)}},
    // optional fixed32 server_connection_id = 7;
    {::_pbi::TcParser::FastF32S1,
     {61, 6, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectOK, _impl_.server_connection_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional fixed32 client_connection_id = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectOK, _impl_.client_connection_id_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional uint32 gameserver_relay_session_id = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectOK, _impl_.gameserver_relay_session_id_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional fixed64 your_timestamp = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectOK, _impl_.your_timestamp_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
    // optional uint32 delay_time_usec = 4;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectOK, _impl_.delay_time_usec_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 5;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectOK, _impl_.crypt_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .CMsgSteamDatagramCertificateSigned cert = 6;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectOK, _impl_.cert_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional fixed32 server_connection_id = 7;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectOK, _impl_.server_connection_id_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::CMsgSteamDatagramSessionCryptInfoSigned>()},
      {::_pbi::TcParser::GetTable<::CMsgSteamDatagramCertificateSigned>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void CMsgSteamDatagramConnectOK::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramConnectOK)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.crypt_ != nullptr);
      _impl_.crypt_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.cert_ != nullptr);
      _impl_.cert_->Clear();
    }
  }
  if ((cached_has_bits & 0x0000007cu) != 0) {
    ::memset(&_impl_.client_connection_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.server_connection_id_) -
        reinterpret_cast<char*>(&_impl_.client_connection_id_)) + sizeof(_impl_.server_connection_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramConnectOK::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CMsgSteamDatagramConnectOK& this_ = static_cast<const CMsgSteamDatagramConnectOK&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramConnectOK::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CMsgSteamDatagramConnectOK& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramConnectOK)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional fixed32 client_connection_id = 1;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        1, this_._internal_client_connection_id(), target);
  }

  // optional uint32 gameserver_relay_session_id = 2;
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this_._internal_gameserver_relay_session_id(), target);
  }

  // optional fixed64 your_timestamp = 3;
  if ((cached_has_bits & 0x00000010u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        3, this_._internal_your_timestamp(), target);
  }

  // optional uint32 delay_time_usec = 4;
  if ((cached_has_bits & 0x00000020u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this_._internal_delay_time_usec(), target);
  }

  // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 5;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        5, *this_._impl_.crypt_, this_._impl_.crypt_->GetCachedSize(), target,
        stream);
  }

  // optional .CMsgSteamDatagramCertificateSigned cert = 6;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        6, *this_._impl_.cert_, this_._impl_.cert_->GetCachedSize(), target,
        stream);
  }

  // optional fixed32 server_connection_id = 7;
  if ((cached_has_bits & 0x00000040u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        7, this_._internal_server_connection_id(), target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramConnectOK)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CMsgSteamDatagramConnectOK::ByteSizeLong(const MessageLite& base) {
  const CMsgSteamDatagramConnectOK& this_ = static_cast<const CMsgSteamDatagramConnectOK&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t CMsgSteamDatagramConnectOK::ByteSizeLong() const {
  const CMsgSteamDatagramConnectOK& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramConnectOK)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += static_cast<bool>(0x00000010u & cached_has_bits) * 9;
  total_size += ::absl::popcount(0x00000044u & cached_has_bits) * 5;
  if ((cached_has_bits & 0x0000002bu) != 0) {
    // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 5;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.crypt_);
    }
    // optional .CMsgSteamDatagramCertificateSigned cert = 6;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.cert_);
    }
    // optional uint32 gameserver_relay_session_id = 2;
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_gameserver_relay_session_id());
    }
    // optional uint32 delay_time_usec = 4;
    if ((cached_has_bits & 0x00000020u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_delay_time_usec());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void CMsgSteamDatagramConnectOK::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramConnectOK*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramConnectOK&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramConnectOK)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000007fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.crypt_ != nullptr);
      if (_this->_impl_.crypt_ == nullptr) {
        _this->_impl_.crypt_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.crypt_);
      } else {
        _this->_impl_.crypt_->MergeFrom(*from._impl_.crypt_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.cert_ != nullptr);
      if (_this->_impl_.cert_ == nullptr) {
        _this->_impl_.cert_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.cert_);
      } else {
        _this->_impl_.cert_->MergeFrom(*from._impl_.cert_);
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_impl_.client_connection_id_ = from._impl_.client_connection_id_;
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _this->_impl_.gameserver_relay_session_id_ = from._impl_.gameserver_relay_session_id_;
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _this->_impl_.your_timestamp_ = from._impl_.your_timestamp_;
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      _this->_impl_.delay_time_usec_ = from._impl_.delay_time_usec_;
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      _this->_impl_.server_connection_id_ = from._impl_.server_connection_id_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramConnectOK::CopyFrom(const CMsgSteamDatagramConnectOK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramConnectOK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CMsgSteamDatagramConnectOK::InternalSwap(CMsgSteamDatagramConnectOK* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectOK, _impl_.server_connection_id_)
      + sizeof(CMsgSteamDatagramConnectOK::_impl_.server_connection_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectOK, _impl_.crypt_)>(
          reinterpret_cast<char*>(&_impl_.crypt_),
          reinterpret_cast<char*>(&other->_impl_.crypt_));
}

::google::protobuf::Metadata CMsgSteamDatagramConnectOK::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CMsgSteamNetworkingP2PSDRRoutingSummary::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CMsgSteamNetworkingP2PSDRRoutingSummary>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_._has_bits_);
};

CMsgSteamNetworkingP2PSDRRoutingSummary::CMsgSteamNetworkingP2PSDRRoutingSummary(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamNetworkingP2PSDRRoutingSummary_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamNetworkingP2PSDRRoutingSummary)
}
CMsgSteamNetworkingP2PSDRRoutingSummary::CMsgSteamNetworkingP2PSDRRoutingSummary(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const CMsgSteamNetworkingP2PSDRRoutingSummary& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamNetworkingP2PSDRRoutingSummary_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
}
PROTOBUF_NDEBUG_INLINE CMsgSteamNetworkingP2PSDRRoutingSummary::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void CMsgSteamNetworkingP2PSDRRoutingSummary::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, initial_ping_),
           0,
           offsetof(Impl_, best_time_) -
               offsetof(Impl_, initial_ping_) +
               sizeof(Impl_::best_time_));
}
CMsgSteamNetworkingP2PSDRRoutingSummary::~CMsgSteamNetworkingP2PSDRRoutingSummary() {
  // @@protoc_insertion_point(destructor:CMsgSteamNetworkingP2PSDRRoutingSummary)
  SharedDtor(*this);
}
inline void CMsgSteamNetworkingP2PSDRRoutingSummary::SharedDtor(MessageLite& self) {
  CMsgSteamNetworkingP2PSDRRoutingSummary& this_ = static_cast<CMsgSteamNetworkingP2PSDRRoutingSummary&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CMsgSteamNetworkingP2PSDRRoutingSummary::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CMsgSteamNetworkingP2PSDRRoutingSummary(arena);
}
constexpr auto CMsgSteamNetworkingP2PSDRRoutingSummary::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(CMsgSteamNetworkingP2PSDRRoutingSummary),
                                            alignof(CMsgSteamNetworkingP2PSDRRoutingSummary));
}
constexpr auto CMsgSteamNetworkingP2PSDRRoutingSummary::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CMsgSteamNetworkingP2PSDRRoutingSummary_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CMsgSteamNetworkingP2PSDRRoutingSummary::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CMsgSteamNetworkingP2PSDRRoutingSummary>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CMsgSteamNetworkingP2PSDRRoutingSummary::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CMsgSteamNetworkingP2PSDRRoutingSummary>(), &CMsgSteamNetworkingP2PSDRRoutingSummary::ByteSizeLong,
              &CMsgSteamNetworkingP2PSDRRoutingSummary::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_._cached_size_),
          false,
      },
      &CMsgSteamNetworkingP2PSDRRoutingSummary::kDescriptorMethods,
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        CMsgSteamNetworkingP2PSDRRoutingSummary_class_data_ =
            CMsgSteamNetworkingP2PSDRRoutingSummary::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL CMsgSteamNetworkingP2PSDRRoutingSummary::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CMsgSteamNetworkingP2PSDRRoutingSummary_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CMsgSteamNetworkingP2PSDRRoutingSummary_class_data_.tc_table);
  return CMsgSteamNetworkingP2PSDRRoutingSummary_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 15, 0, 0, 2>
CMsgSteamNetworkingP2PSDRRoutingSummary::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_._has_bits_),
    0, // no _extensions_
    17, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294836992,  // skipmap
    offsetof(decltype(_table_), field_entries),
    15,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    CMsgSteamNetworkingP2PSDRRoutingSummary_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CMsgSteamNetworkingP2PSDRRoutingSummary>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional fixed32 best_pop_remote = 16;
    {::_pbi::TcParser::FastF32S2,
     {389, 13, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.best_pop_remote_)}},
    // optional uint32 initial_ping = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.initial_ping_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.initial_ping_)}},
    // optional uint32 initial_ping_front_local = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.initial_ping_front_local_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.initial_ping_front_local_)}},
    // optional uint32 initial_ping_front_remote = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.initial_ping_front_remote_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.initial_ping_front_remote_)}},
    // optional uint32 initial_score = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.initial_score_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.initial_score_)}},
    // optional fixed32 initial_pop_local = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 4, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.initial_pop_local_)}},
    // optional fixed32 initial_pop_remote = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 5, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.initial_pop_remote_)}},
    // optional uint32 negotiation_ms = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.negotiation_ms_), 6>(),
     {56, 6, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.negotiation_ms_)}},
    // optional uint32 selected_seconds = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.selected_seconds_), 7>(),
     {64, 7, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.selected_seconds_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional uint32 best_ping = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.best_ping_), 8>(),
     {88, 8, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.best_ping_)}},
    // optional uint32 best_ping_front_local = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.best_ping_front_local_), 9>(),
     {96, 9, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.best_ping_front_local_)}},
    // optional uint32 best_ping_front_remote = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.best_ping_front_remote_), 10>(),
     {104, 10, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.best_ping_front_remote_)}},
    // optional uint32 best_score = 14;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.best_score_), 11>(),
     {112, 11, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.best_score_)}},
    // optional fixed32 best_pop_local = 15;
    {::_pbi::TcParser::FastF32S1,
     {125, 12, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.best_pop_local_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional uint32 initial_ping = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.initial_ping_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 initial_ping_front_local = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.initial_ping_front_local_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 initial_ping_front_remote = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.initial_ping_front_remote_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 initial_score = 4;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.initial_score_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional fixed32 initial_pop_local = 5;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.initial_pop_local_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional fixed32 initial_pop_remote = 6;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.initial_pop_remote_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional uint32 negotiation_ms = 7;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.negotiation_ms_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 selected_seconds = 8;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.selected_seconds_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 best_ping = 11;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.best_ping_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 best_ping_front_local = 12;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.best_ping_front_local_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 best_ping_front_remote = 13;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.best_ping_front_remote_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 best_score = 14;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.best_score_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional fixed32 best_pop_local = 15;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.best_pop_local_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional fixed32 best_pop_remote = 16;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.best_pop_remote_), _Internal::kHasBitsOffset + 13, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional uint32 best_time = 17;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.best_time_), _Internal::kHasBitsOffset + 14, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};
PROTOBUF_NOINLINE void CMsgSteamNetworkingP2PSDRRoutingSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamNetworkingP2PSDRRoutingSummary)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    ::memset(&_impl_.initial_ping_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.selected_seconds_) -
        reinterpret_cast<char*>(&_impl_.initial_ping_)) + sizeof(_impl_.selected_seconds_));
  }
  if ((cached_has_bits & 0x00007f00u) != 0) {
    ::memset(&_impl_.best_ping_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.best_time_) -
        reinterpret_cast<char*>(&_impl_.best_ping_)) + sizeof(_impl_.best_time_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CMsgSteamNetworkingP2PSDRRoutingSummary::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CMsgSteamNetworkingP2PSDRRoutingSummary& this_ = static_cast<const CMsgSteamNetworkingP2PSDRRoutingSummary&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CMsgSteamNetworkingP2PSDRRoutingSummary::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CMsgSteamNetworkingP2PSDRRoutingSummary& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamNetworkingP2PSDRRoutingSummary)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional uint32 initial_ping = 1;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this_._internal_initial_ping(), target);
  }

  // optional uint32 initial_ping_front_local = 2;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this_._internal_initial_ping_front_local(), target);
  }

  // optional uint32 initial_ping_front_remote = 3;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this_._internal_initial_ping_front_remote(), target);
  }

  // optional uint32 initial_score = 4;
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this_._internal_initial_score(), target);
  }

  // optional fixed32 initial_pop_local = 5;
  if ((cached_has_bits & 0x00000010u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        5, this_._internal_initial_pop_local(), target);
  }

  // optional fixed32 initial_pop_remote = 6;
  if ((cached_has_bits & 0x00000020u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        6, this_._internal_initial_pop_remote(), target);
  }

  // optional uint32 negotiation_ms = 7;
  if ((cached_has_bits & 0x00000040u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        7, this_._internal_negotiation_ms(), target);
  }

  // optional uint32 selected_seconds = 8;
  if ((cached_has_bits & 0x00000080u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        8, this_._internal_selected_seconds(), target);
  }

  // optional uint32 best_ping = 11;
  if ((cached_has_bits & 0x00000100u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        11, this_._internal_best_ping(), target);
  }

  // optional uint32 best_ping_front_local = 12;
  if ((cached_has_bits & 0x00000200u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        12, this_._internal_best_ping_front_local(), target);
  }

  // optional uint32 best_ping_front_remote = 13;
  if ((cached_has_bits & 0x00000400u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        13, this_._internal_best_ping_front_remote(), target);
  }

  // optional uint32 best_score = 14;
  if ((cached_has_bits & 0x00000800u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        14, this_._internal_best_score(), target);
  }

  // optional fixed32 best_pop_local = 15;
  if ((cached_has_bits & 0x00001000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        15, this_._internal_best_pop_local(), target);
  }

  // optional fixed32 best_pop_remote = 16;
  if ((cached_has_bits & 0x00002000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        16, this_._internal_best_pop_remote(), target);
  }

  // optional uint32 best_time = 17;
  if ((cached_has_bits & 0x00004000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        17, this_._internal_best_time(), target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamNetworkingP2PSDRRoutingSummary)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CMsgSteamNetworkingP2PSDRRoutingSummary::ByteSizeLong(const MessageLite& base) {
  const CMsgSteamNetworkingP2PSDRRoutingSummary& this_ = static_cast<const CMsgSteamNetworkingP2PSDRRoutingSummary&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t CMsgSteamNetworkingP2PSDRRoutingSummary::ByteSizeLong() const {
  const CMsgSteamNetworkingP2PSDRRoutingSummary& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:CMsgSteamNetworkingP2PSDRRoutingSummary)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += static_cast<bool>(0x00002000u & cached_has_bits) * 6;
  total_size += ::absl::popcount(0x00001030u & cached_has_bits) * 5;
  if ((cached_has_bits & 0x000000cfu) != 0) {
    // optional uint32 initial_ping = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_initial_ping());
    }
    // optional uint32 initial_ping_front_local = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_initial_ping_front_local());
    }
    // optional uint32 initial_ping_front_remote = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_initial_ping_front_remote());
    }
    // optional uint32 initial_score = 4;
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_initial_score());
    }
    // optional uint32 negotiation_ms = 7;
    if ((cached_has_bits & 0x00000040u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_negotiation_ms());
    }
    // optional uint32 selected_seconds = 8;
    if ((cached_has_bits & 0x00000080u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_selected_seconds());
    }
  }
  if ((cached_has_bits & 0x00004f00u) != 0) {
    // optional uint32 best_ping = 11;
    if ((cached_has_bits & 0x00000100u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_best_ping());
    }
    // optional uint32 best_ping_front_local = 12;
    if ((cached_has_bits & 0x00000200u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_best_ping_front_local());
    }
    // optional uint32 best_ping_front_remote = 13;
    if ((cached_has_bits & 0x00000400u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_best_ping_front_remote());
    }
    // optional uint32 best_score = 14;
    if ((cached_has_bits & 0x00000800u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_best_score());
    }
    // optional uint32 best_time = 17;
    if ((cached_has_bits & 0x00004000u) != 0) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this_._internal_best_time());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void CMsgSteamNetworkingP2PSDRRoutingSummary::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CMsgSteamNetworkingP2PSDRRoutingSummary*>(&to_msg);
  auto& from = static_cast<const CMsgSteamNetworkingP2PSDRRoutingSummary&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamNetworkingP2PSDRRoutingSummary)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_impl_.initial_ping_ = from._impl_.initial_ping_;
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_impl_.initial_ping_front_local_ = from._impl_.initial_ping_front_local_;
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_impl_.initial_ping_front_remote_ = from._impl_.initial_ping_front_remote_;
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _this->_impl_.initial_score_ = from._impl_.initial_score_;
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _this->_impl_.initial_pop_local_ = from._impl_.initial_pop_local_;
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      _this->_impl_.initial_pop_remote_ = from._impl_.initial_pop_remote_;
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      _this->_impl_.negotiation_ms_ = from._impl_.negotiation_ms_;
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      _this->_impl_.selected_seconds_ = from._impl_.selected_seconds_;
    }
  }
  if ((cached_has_bits & 0x00007f00u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      _this->_impl_.best_ping_ = from._impl_.best_ping_;
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      _this->_impl_.best_ping_front_local_ = from._impl_.best_ping_front_local_;
    }
    if ((cached_has_bits & 0x00000400u) != 0) {
      _this->_impl_.best_ping_front_remote_ = from._impl_.best_ping_front_remote_;
    }
    if ((cached_has_bits & 0x00000800u) != 0) {
      _this->_impl_.best_score_ = from._impl_.best_score_;
    }
    if ((cached_has_bits & 0x00001000u) != 0) {
      _this->_impl_.best_pop_local_ = from._impl_.best_pop_local_;
    }
    if ((cached_has_bits & 0x00002000u) != 0) {
      _this->_impl_.best_pop_remote_ = from._impl_.best_pop_remote_;
    }
    if ((cached_has_bits & 0x00004000u) != 0) {
      _this->_impl_.best_time_ = from._impl_.best_time_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamNetworkingP2PSDRRoutingSummary::CopyFrom(const CMsgSteamNetworkingP2PSDRRoutingSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamNetworkingP2PSDRRoutingSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CMsgSteamNetworkingP2PSDRRoutingSummary::InternalSwap(CMsgSteamNetworkingP2PSDRRoutingSummary* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.best_time_)
      + sizeof(CMsgSteamNetworkingP2PSDRRoutingSummary::_impl_.best_time_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingP2PSDRRoutingSummary, _impl_.initial_ping_)>(
          reinterpret_cast<char*>(&_impl_.initial_ping_),
          reinterpret_cast<char*>(&other->_impl_.initial_ping_));
}

::google::protobuf::Metadata CMsgSteamNetworkingP2PSDRRoutingSummary::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CMsgSteamDatagramP2PRoutingSummary::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CMsgSteamDatagramP2PRoutingSummary>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutingSummary, _impl_._has_bits_);
};

void CMsgSteamDatagramP2PRoutingSummary::clear_ice() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.ice_ != nullptr) _impl_.ice_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CMsgSteamDatagramP2PRoutingSummary::CMsgSteamDatagramP2PRoutingSummary(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramP2PRoutingSummary_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramP2PRoutingSummary)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramP2PRoutingSummary::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::CMsgSteamDatagramP2PRoutingSummary& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

CMsgSteamDatagramP2PRoutingSummary::CMsgSteamDatagramP2PRoutingSummary(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const CMsgSteamDatagramP2PRoutingSummary& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramP2PRoutingSummary_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CMsgSteamDatagramP2PRoutingSummary* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.ice_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.ice_)
                : nullptr;
  _impl_.sdr_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.sdr_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramP2PRoutingSummary)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramP2PRoutingSummary::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void CMsgSteamDatagramP2PRoutingSummary::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, ice_),
           0,
           offsetof(Impl_, sdr_) -
               offsetof(Impl_, ice_) +
               sizeof(Impl_::sdr_));
}
CMsgSteamDatagramP2PRoutingSummary::~CMsgSteamDatagramP2PRoutingSummary() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramP2PRoutingSummary)
  SharedDtor(*this);
}
inline void CMsgSteamDatagramP2PRoutingSummary::SharedDtor(MessageLite& self) {
  CMsgSteamDatagramP2PRoutingSummary& this_ = static_cast<CMsgSteamDatagramP2PRoutingSummary&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.ice_;
  delete this_._impl_.sdr_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CMsgSteamDatagramP2PRoutingSummary::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CMsgSteamDatagramP2PRoutingSummary(arena);
}
constexpr auto CMsgSteamDatagramP2PRoutingSummary::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(CMsgSteamDatagramP2PRoutingSummary),
                                            alignof(CMsgSteamDatagramP2PRoutingSummary));
}
constexpr auto CMsgSteamDatagramP2PRoutingSummary::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CMsgSteamDatagramP2PRoutingSummary_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CMsgSteamDatagramP2PRoutingSummary::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CMsgSteamDatagramP2PRoutingSummary>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CMsgSteamDatagramP2PRoutingSummary::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CMsgSteamDatagramP2PRoutingSummary>(), &CMsgSteamDatagramP2PRoutingSummary::ByteSizeLong,
              &CMsgSteamDatagramP2PRoutingSummary::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutingSummary, _impl_._cached_size_),
          false,
      },
      &CMsgSteamDatagramP2PRoutingSummary::kDescriptorMethods,
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        CMsgSteamDatagramP2PRoutingSummary_class_data_ =
            CMsgSteamDatagramP2PRoutingSummary::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL CMsgSteamDatagramP2PRoutingSummary::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CMsgSteamDatagramP2PRoutingSummary_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CMsgSteamDatagramP2PRoutingSummary_class_data_.tc_table);
  return CMsgSteamDatagramP2PRoutingSummary_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2>
CMsgSteamDatagramP2PRoutingSummary::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutingSummary, _impl_._has_bits_),
    0, // no _extensions_
    3, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967289,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    CMsgSteamDatagramP2PRoutingSummary_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CMsgSteamDatagramP2PRoutingSummary>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional .CMsgSteamNetworkingICESessionSummary ice = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutingSummary, _impl_.ice_)}},
    // optional .CMsgSteamNetworkingP2PSDRRoutingSummary sdr = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutingSummary, _impl_.sdr_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .CMsgSteamNetworkingICESessionSummary ice = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutingSummary, _impl_.ice_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .CMsgSteamNetworkingP2PSDRRoutingSummary sdr = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutingSummary, _impl_.sdr_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::CMsgSteamNetworkingICESessionSummary>()},
      {::_pbi::TcParser::GetTable<::CMsgSteamNetworkingP2PSDRRoutingSummary>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void CMsgSteamDatagramP2PRoutingSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramP2PRoutingSummary)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.ice_ != nullptr);
      _impl_.ice_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.sdr_ != nullptr);
      _impl_.sdr_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramP2PRoutingSummary::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CMsgSteamDatagramP2PRoutingSummary& this_ = static_cast<const CMsgSteamDatagramP2PRoutingSummary&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramP2PRoutingSummary::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CMsgSteamDatagramP2PRoutingSummary& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramP2PRoutingSummary)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional .CMsgSteamNetworkingICESessionSummary ice = 2;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.ice_, this_._impl_.ice_->GetCachedSize(), target,
        stream);
  }

  // optional .CMsgSteamNetworkingP2PSDRRoutingSummary sdr = 3;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *this_._impl_.sdr_, this_._impl_.sdr_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramP2PRoutingSummary)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CMsgSteamDatagramP2PRoutingSummary::ByteSizeLong(const MessageLite& base) {
  const CMsgSteamDatagramP2PRoutingSummary& this_ = static_cast<const CMsgSteamDatagramP2PRoutingSummary&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t CMsgSteamDatagramP2PRoutingSummary::ByteSizeLong() const {
  const CMsgSteamDatagramP2PRoutingSummary& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramP2PRoutingSummary)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // optional .CMsgSteamNetworkingICESessionSummary ice = 2;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.ice_);
    }
    // optional .CMsgSteamNetworkingP2PSDRRoutingSummary sdr = 3;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.sdr_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void CMsgSteamDatagramP2PRoutingSummary::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramP2PRoutingSummary*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramP2PRoutingSummary&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramP2PRoutingSummary)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.ice_ != nullptr);
      if (_this->_impl_.ice_ == nullptr) {
        _this->_impl_.ice_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.ice_);
      } else {
        _this->_impl_.ice_->MergeFrom(*from._impl_.ice_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.sdr_ != nullptr);
      if (_this->_impl_.sdr_ == nullptr) {
        _this->_impl_.sdr_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.sdr_);
      } else {
        _this->_impl_.sdr_->MergeFrom(*from._impl_.sdr_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramP2PRoutingSummary::CopyFrom(const CMsgSteamDatagramP2PRoutingSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramP2PRoutingSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CMsgSteamDatagramP2PRoutingSummary::InternalSwap(CMsgSteamDatagramP2PRoutingSummary* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutingSummary, _impl_.sdr_)
      + sizeof(CMsgSteamDatagramP2PRoutingSummary::_impl_.sdr_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutingSummary, _impl_.ice_)>(
          reinterpret_cast<char*>(&_impl_.ice_),
          reinterpret_cast<char*>(&other->_impl_.ice_));
}

::google::protobuf::Metadata CMsgSteamDatagramP2PRoutingSummary::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CMsgSteamDatagramConnectionClosed::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CMsgSteamDatagramConnectionClosed>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_._has_bits_);
};

void CMsgSteamDatagramConnectionClosed::clear_legacy_from_identity_binary() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.legacy_from_identity_binary_ != nullptr) _impl_.legacy_from_identity_binary_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void CMsgSteamDatagramConnectionClosed::clear_quality_relay() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.quality_relay_ != nullptr) _impl_.quality_relay_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void CMsgSteamDatagramConnectionClosed::clear_quality_e2e() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.quality_e2e_ != nullptr) _impl_.quality_e2e_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
CMsgSteamDatagramConnectionClosed::CMsgSteamDatagramConnectionClosed(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramConnectionClosed_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramConnectionClosed)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramConnectionClosed::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::CMsgSteamDatagramConnectionClosed& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        debug_(arena, from.debug_),
        forward_target_relay_routing_token_(arena, from.forward_target_relay_routing_token_),
        from_identity_string_(arena, from.from_identity_string_) {}

CMsgSteamDatagramConnectionClosed::CMsgSteamDatagramConnectionClosed(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const CMsgSteamDatagramConnectionClosed& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramConnectionClosed_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CMsgSteamDatagramConnectionClosed* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.legacy_from_identity_binary_ = ((cached_has_bits & 0x00000008u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.legacy_from_identity_binary_)
                : nullptr;
  _impl_.quality_relay_ = ((cached_has_bits & 0x00000010u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.quality_relay_)
                : nullptr;
  _impl_.quality_e2e_ = ((cached_has_bits & 0x00000020u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.quality_e2e_)
                : nullptr;
  _impl_.p2p_routing_summary_ = ((cached_has_bits & 0x00000040u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.p2p_routing_summary_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, legacy_from_steam_id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, legacy_from_steam_id_),
           offsetof(Impl_, relay_override_active_) -
               offsetof(Impl_, legacy_from_steam_id_) +
               sizeof(Impl_::relay_override_active_));

  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramConnectionClosed)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramConnectionClosed::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        debug_(arena),
        forward_target_relay_routing_token_(arena),
        from_identity_string_(arena) {}

inline void CMsgSteamDatagramConnectionClosed::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, legacy_from_identity_binary_),
           0,
           offsetof(Impl_, relay_override_active_) -
               offsetof(Impl_, legacy_from_identity_binary_) +
               sizeof(Impl_::relay_override_active_));
}
CMsgSteamDatagramConnectionClosed::~CMsgSteamDatagramConnectionClosed() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramConnectionClosed)
  SharedDtor(*this);
}
inline void CMsgSteamDatagramConnectionClosed::SharedDtor(MessageLite& self) {
  CMsgSteamDatagramConnectionClosed& this_ = static_cast<CMsgSteamDatagramConnectionClosed&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.debug_.Destroy();
  this_._impl_.forward_target_relay_routing_token_.Destroy();
  this_._impl_.from_identity_string_.Destroy();
  delete this_._impl_.legacy_from_identity_binary_;
  delete this_._impl_.quality_relay_;
  delete this_._impl_.quality_e2e_;
  delete this_._impl_.p2p_routing_summary_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CMsgSteamDatagramConnectionClosed::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CMsgSteamDatagramConnectionClosed(arena);
}
constexpr auto CMsgSteamDatagramConnectionClosed::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(CMsgSteamDatagramConnectionClosed),
                                            alignof(CMsgSteamDatagramConnectionClosed));
}
constexpr auto CMsgSteamDatagramConnectionClosed::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CMsgSteamDatagramConnectionClosed_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CMsgSteamDatagramConnectionClosed::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CMsgSteamDatagramConnectionClosed>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CMsgSteamDatagramConnectionClosed::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CMsgSteamDatagramConnectionClosed>(), &CMsgSteamDatagramConnectionClosed::ByteSizeLong,
              &CMsgSteamDatagramConnectionClosed::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_._cached_size_),
          false,
      },
      &CMsgSteamDatagramConnectionClosed::kDescriptorMethods,
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        CMsgSteamDatagramConnectionClosed_class_data_ =
            CMsgSteamDatagramConnectionClosed::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL CMsgSteamDatagramConnectionClosed::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CMsgSteamDatagramConnectionClosed_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CMsgSteamDatagramConnectionClosed_class_data_.tc_table);
  return CMsgSteamDatagramConnectionClosed_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 20, 5, 83, 2>
CMsgSteamDatagramConnectionClosed::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_._has_bits_),
    0, // no _extensions_
    22, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4291297281,  // skipmap
    offsetof(decltype(_table_), field_entries),
    20,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    CMsgSteamDatagramConnectionClosed_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CMsgSteamDatagramConnectionClosed>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional uint32 legacy_gameserver_relay_session_id = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectionClosed, _impl_.legacy_gameserver_relay_session_id_), 8>(),
     {16, 8, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.legacy_gameserver_relay_session_id_)}},
    // optional fixed64 legacy_from_steam_id = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 7, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.legacy_from_steam_id_)}},
    // optional .CMsgSteamDatagramConnectionClosed.ERelayMode relay_mode = 4 [default = None];
    {::_pbi::TcParser::FastEr0S1,
     {32, 9, 2, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.relay_mode_)}},
    // optional string debug = 5;
    {::_pbi::TcParser::FastSS1,
     {42, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.debug_)}},
    // optional uint32 reason_code = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectionClosed, _impl_.reason_code_), 10>(),
     {48, 10, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.reason_code_)}},
    // optional fixed32 to_connection_id = 7;
    {::_pbi::TcParser::FastF32S1,
     {61, 11, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.to_connection_id_)}},
    // optional fixed32 from_connection_id = 8;
    {::_pbi::TcParser::FastF32S1,
     {69, 12, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.from_connection_id_)}},
    // optional fixed32 to_relay_session_id = 9;
    {::_pbi::TcParser::FastF32S1,
     {77, 13, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.to_relay_session_id_)}},
    // optional fixed32 from_relay_session_id = 10;
    {::_pbi::TcParser::FastF32S1,
     {85, 14, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.from_relay_session_id_)}},
    // optional bytes forward_target_relay_routing_token = 11;
    {::_pbi::TcParser::FastBS1,
     {90, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.forward_target_relay_routing_token_)}},
    // optional uint32 forward_target_revision = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectionClosed, _impl_.forward_target_revision_), 15>(),
     {96, 15, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.forward_target_revision_)}},
    // optional .CMsgSteamNetworkingIdentityLegacyBinary legacy_from_identity_binary = 13;
    {::_pbi::TcParser::FastMtS1,
     {106, 3, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.legacy_from_identity_binary_)}},
    // optional fixed64 routing_secret = 14;
    {::_pbi::TcParser::FastF64S1,
     {113, 16, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.routing_secret_)}},
    // optional string from_identity_string = 15;
    {::_pbi::TcParser::FastSS1,
     {122, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.from_identity_string_)}},
    // optional bool not_primary_session = 16;
    {::_pbi::TcParser::FastV8S2,
     {384, 17, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.not_primary_session_)}},
    // optional .CMsgSteamDatagramConnectionQuality quality_relay = 17;
    {::_pbi::TcParser::FastMtS2,
     {394, 4, 1, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.quality_relay_)}},
    // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 18;
    {::_pbi::TcParser::FastMtS2,
     {402, 5, 2, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.quality_e2e_)}},
    // optional bool not_primary_transport = 19;
    {::_pbi::TcParser::FastV8S2,
     {408, 18, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.not_primary_transport_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional .CMsgSteamDatagramP2PRoutingSummary p2p_routing_summary = 21;
    {::_pbi::TcParser::FastMtS2,
     {426, 6, 3, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.p2p_routing_summary_)}},
    // optional bool relay_override_active = 22;
    {::_pbi::TcParser::FastV8S2,
     {432, 19, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.relay_override_active_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional uint32 legacy_gameserver_relay_session_id = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.legacy_gameserver_relay_session_id_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional fixed64 legacy_from_steam_id = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.legacy_from_steam_id_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
    // optional .CMsgSteamDatagramConnectionClosed.ERelayMode relay_mode = 4 [default = None];
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.relay_mode_), _Internal::kHasBitsOffset + 9, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional string debug = 5;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.debug_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional uint32 reason_code = 6;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.reason_code_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional fixed32 to_connection_id = 7;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.to_connection_id_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional fixed32 from_connection_id = 8;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.from_connection_id_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional fixed32 to_relay_session_id = 9;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.to_relay_session_id_), _Internal::kHasBitsOffset + 13, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional fixed32 from_relay_session_id = 10;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.from_relay_session_id_), _Internal::kHasBitsOffset + 14, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional bytes forward_target_relay_routing_token = 11;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.forward_target_relay_routing_token_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional uint32 forward_target_revision = 12;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.forward_target_revision_), _Internal::kHasBitsOffset + 15, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional .CMsgSteamNetworkingIdentityLegacyBinary legacy_from_identity_binary = 13;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.legacy_from_identity_binary_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional fixed64 routing_secret = 14;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.routing_secret_), _Internal::kHasBitsOffset + 16, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
    // optional string from_identity_string = 15;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.from_identity_string_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional bool not_primary_session = 16;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.not_primary_session_), _Internal::kHasBitsOffset + 17, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional .CMsgSteamDatagramConnectionQuality quality_relay = 17;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.quality_relay_), _Internal::kHasBitsOffset + 4, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 18;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.quality_e2e_), _Internal::kHasBitsOffset + 5, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional bool not_primary_transport = 19;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.not_primary_transport_), _Internal::kHasBitsOffset + 18, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional .CMsgSteamDatagramP2PRoutingSummary p2p_routing_summary = 21;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.p2p_routing_summary_), _Internal::kHasBitsOffset + 6, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional bool relay_override_active = 22;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.relay_override_active_), _Internal::kHasBitsOffset + 19, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::CMsgSteamNetworkingIdentityLegacyBinary>()},
      {::_pbi::TcParser::GetTable<::CMsgSteamDatagramConnectionQuality>()},
      {::_pbi::TcParser::GetTable<::CMsgSteamDatagramConnectionQuality>()},
      {::_pbi::TcParser::GetTable<::CMsgSteamDatagramP2PRoutingSummary>()},
      {0, 3},
  }},
  {{
    "\41\0\0\0\5\0\0\0\0\0\0\0\0\0\24\0\0\0\0\0\0\0\0\0"
    "CMsgSteamDatagramConnectionClosed"
    "debug"
    "from_identity_string"
  }},
};
PROTOBUF_NOINLINE void CMsgSteamDatagramConnectionClosed::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramConnectionClosed)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000007fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.debug_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.forward_target_relay_routing_token_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _impl_.from_identity_string_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      ABSL_DCHECK(_impl_.legacy_from_identity_binary_ != nullptr);
      _impl_.legacy_from_identity_binary_->Clear();
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      ABSL_DCHECK(_impl_.quality_relay_ != nullptr);
      _impl_.quality_relay_->Clear();
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      ABSL_DCHECK(_impl_.quality_e2e_ != nullptr);
      _impl_.quality_e2e_->Clear();
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      ABSL_DCHECK(_impl_.p2p_routing_summary_ != nullptr);
      _impl_.p2p_routing_summary_->Clear();
    }
  }
  _impl_.legacy_from_steam_id_ = ::uint64_t{0u};
  if ((cached_has_bits & 0x0000ff00u) != 0) {
    ::memset(&_impl_.legacy_gameserver_relay_session_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.forward_target_revision_) -
        reinterpret_cast<char*>(&_impl_.legacy_gameserver_relay_session_id_)) + sizeof(_impl_.forward_target_revision_));
  }
  if ((cached_has_bits & 0x000f0000u) != 0) {
    ::memset(&_impl_.routing_secret_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.relay_override_active_) -
        reinterpret_cast<char*>(&_impl_.routing_secret_)) + sizeof(_impl_.relay_override_active_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramConnectionClosed::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CMsgSteamDatagramConnectionClosed& this_ = static_cast<const CMsgSteamDatagramConnectionClosed&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramConnectionClosed::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CMsgSteamDatagramConnectionClosed& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramConnectionClosed)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional uint32 legacy_gameserver_relay_session_id = 2;
  if ((cached_has_bits & 0x00000100u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this_._internal_legacy_gameserver_relay_session_id(), target);
  }

  // optional fixed64 legacy_from_steam_id = 3;
  if ((cached_has_bits & 0x00000080u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        3, this_._internal_legacy_from_steam_id(), target);
  }

  // optional .CMsgSteamDatagramConnectionClosed.ERelayMode relay_mode = 4 [default = None];
  if ((cached_has_bits & 0x00000200u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this_._internal_relay_mode(), target);
  }

  // optional string debug = 5;
  if ((cached_has_bits & 0x00000001u) != 0) {
    const std::string& _s = this_._internal_debug();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CMsgSteamDatagramConnectionClosed.debug");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // optional uint32 reason_code = 6;
  if ((cached_has_bits & 0x00000400u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this_._internal_reason_code(), target);
  }

  // optional fixed32 to_connection_id = 7;
  if ((cached_has_bits & 0x00000800u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        7, this_._internal_to_connection_id(), target);
  }

  // optional fixed32 from_connection_id = 8;
  if ((cached_has_bits & 0x00001000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        8, this_._internal_from_connection_id(), target);
  }

  // optional fixed32 to_relay_session_id = 9;
  if ((cached_has_bits & 0x00002000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        9, this_._internal_to_relay_session_id(), target);
  }

  // optional fixed32 from_relay_session_id = 10;
  if ((cached_has_bits & 0x00004000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        10, this_._internal_from_relay_session_id(), target);
  }

  // optional bytes forward_target_relay_routing_token = 11;
  if ((cached_has_bits & 0x00000002u) != 0) {
    const std::string& _s = this_._internal_forward_target_relay_routing_token();
    target = stream->WriteBytesMaybeAliased(11, _s, target);
  }

  // optional uint32 forward_target_revision = 12;
  if ((cached_has_bits & 0x00008000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        12, this_._internal_forward_target_revision(), target);
  }

  // optional .CMsgSteamNetworkingIdentityLegacyBinary legacy_from_identity_binary = 13;
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        13, *this_._impl_.legacy_from_identity_binary_, this_._impl_.legacy_from_identity_binary_->GetCachedSize(), target,
        stream);
  }

  // optional fixed64 routing_secret = 14;
  if ((cached_has_bits & 0x00010000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        14, this_._internal_routing_secret(), target);
  }

  // optional string from_identity_string = 15;
  if ((cached_has_bits & 0x00000004u) != 0) {
    const std::string& _s = this_._internal_from_identity_string();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CMsgSteamDatagramConnectionClosed.from_identity_string");
    target = stream->WriteStringMaybeAliased(15, _s, target);
  }

  // optional bool not_primary_session = 16;
  if ((cached_has_bits & 0x00020000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        16, this_._internal_not_primary_session(), target);
  }

  // optional .CMsgSteamDatagramConnectionQuality quality_relay = 17;
  if ((cached_has_bits & 0x00000010u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        17, *this_._impl_.quality_relay_, this_._impl_.quality_relay_->GetCachedSize(), target,
        stream);
  }

  // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 18;
  if ((cached_has_bits & 0x00000020u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        18, *this_._impl_.quality_e2e_, this_._impl_.quality_e2e_->GetCachedSize(), target,
        stream);
  }

  // optional bool not_primary_transport = 19;
  if ((cached_has_bits & 0x00040000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        19, this_._internal_not_primary_transport(), target);
  }

  // optional .CMsgSteamDatagramP2PRoutingSummary p2p_routing_summary = 21;
  if ((cached_has_bits & 0x00000040u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        21, *this_._impl_.p2p_routing_summary_, this_._impl_.p2p_routing_summary_->GetCachedSize(), target,
        stream);
  }

  // optional bool relay_override_active = 22;
  if ((cached_has_bits & 0x00080000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        22, this_._internal_relay_override_active(), target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramConnectionClosed)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CMsgSteamDatagramConnectionClosed::ByteSizeLong(const MessageLite& base) {
  const CMsgSteamDatagramConnectionClosed& this_ = static_cast<const CMsgSteamDatagramConnectionClosed&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t CMsgSteamDatagramConnectionClosed::ByteSizeLong() const {
  const CMsgSteamDatagramConnectionClosed& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramConnectionClosed)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += ::absl::popcount(0x00010080u & cached_has_bits) * 9;
  total_size += ::absl::popcount(0x00007800u & cached_has_bits) * 5;
  total_size += ::absl::popcount(0x000e0000u & cached_has_bits) * 3;
  if ((cached_has_bits & 0x0000007fu) != 0) {
    // optional string debug = 5;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_debug());
    }
    // optional bytes forward_target_relay_routing_token = 11;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this_._internal_forward_target_relay_routing_token());
    }
    // optional string from_identity_string = 15;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_from_identity_string());
    }
    // optional .CMsgSteamNetworkingIdentityLegacyBinary legacy_from_identity_binary = 13;
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.legacy_from_identity_binary_);
    }
    // optional .CMsgSteamDatagramConnectionQuality quality_relay = 17;
    if ((cached_has_bits & 0x00000010u) != 0) {
      total_size += 2 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.quality_relay_);
    }
    // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 18;
    if ((cached_has_bits & 0x00000020u) != 0) {
      total_size += 2 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.quality_e2e_);
    }
    // optional .CMsgSteamDatagramP2PRoutingSummary p2p_routing_summary = 21;
    if ((cached_has_bits & 0x00000040u) != 0) {
      total_size += 2 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.p2p_routing_summary_);
    }
  }
  if ((cached_has_bits & 0x00008700u) != 0) {
    // optional uint32 legacy_gameserver_relay_session_id = 2;
    if ((cached_has_bits & 0x00000100u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_legacy_gameserver_relay_session_id());
    }
    // optional .CMsgSteamDatagramConnectionClosed.ERelayMode relay_mode = 4 [default = None];
    if ((cached_has_bits & 0x00000200u) != 0) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this_._internal_relay_mode());
    }
    // optional uint32 reason_code = 6;
    if ((cached_has_bits & 0x00000400u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_reason_code());
    }
    // optional uint32 forward_target_revision = 12;
    if ((cached_has_bits & 0x00008000u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_forward_target_revision());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void CMsgSteamDatagramConnectionClosed::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramConnectionClosed*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramConnectionClosed&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramConnectionClosed)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_internal_set_debug(from._internal_debug());
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_internal_set_forward_target_relay_routing_token(from._internal_forward_target_relay_routing_token());
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_internal_set_from_identity_string(from._internal_from_identity_string());
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      ABSL_DCHECK(from._impl_.legacy_from_identity_binary_ != nullptr);
      if (_this->_impl_.legacy_from_identity_binary_ == nullptr) {
        _this->_impl_.legacy_from_identity_binary_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.legacy_from_identity_binary_);
      } else {
        _this->_impl_.legacy_from_identity_binary_->MergeFrom(*from._impl_.legacy_from_identity_binary_);
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      ABSL_DCHECK(from._impl_.quality_relay_ != nullptr);
      if (_this->_impl_.quality_relay_ == nullptr) {
        _this->_impl_.quality_relay_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.quality_relay_);
      } else {
        _this->_impl_.quality_relay_->MergeFrom(*from._impl_.quality_relay_);
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      ABSL_DCHECK(from._impl_.quality_e2e_ != nullptr);
      if (_this->_impl_.quality_e2e_ == nullptr) {
        _this->_impl_.quality_e2e_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.quality_e2e_);
      } else {
        _this->_impl_.quality_e2e_->MergeFrom(*from._impl_.quality_e2e_);
      }
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      ABSL_DCHECK(from._impl_.p2p_routing_summary_ != nullptr);
      if (_this->_impl_.p2p_routing_summary_ == nullptr) {
        _this->_impl_.p2p_routing_summary_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.p2p_routing_summary_);
      } else {
        _this->_impl_.p2p_routing_summary_->MergeFrom(*from._impl_.p2p_routing_summary_);
      }
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      _this->_impl_.legacy_from_steam_id_ = from._impl_.legacy_from_steam_id_;
    }
  }
  if ((cached_has_bits & 0x0000ff00u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      _this->_impl_.legacy_gameserver_relay_session_id_ = from._impl_.legacy_gameserver_relay_session_id_;
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      _this->_impl_.relay_mode_ = from._impl_.relay_mode_;
    }
    if ((cached_has_bits & 0x00000400u) != 0) {
      _this->_impl_.reason_code_ = from._impl_.reason_code_;
    }
    if ((cached_has_bits & 0x00000800u) != 0) {
      _this->_impl_.to_connection_id_ = from._impl_.to_connection_id_;
    }
    if ((cached_has_bits & 0x00001000u) != 0) {
      _this->_impl_.from_connection_id_ = from._impl_.from_connection_id_;
    }
    if ((cached_has_bits & 0x00002000u) != 0) {
      _this->_impl_.to_relay_session_id_ = from._impl_.to_relay_session_id_;
    }
    if ((cached_has_bits & 0x00004000u) != 0) {
      _this->_impl_.from_relay_session_id_ = from._impl_.from_relay_session_id_;
    }
    if ((cached_has_bits & 0x00008000u) != 0) {
      _this->_impl_.forward_target_revision_ = from._impl_.forward_target_revision_;
    }
  }
  if ((cached_has_bits & 0x000f0000u) != 0) {
    if ((cached_has_bits & 0x00010000u) != 0) {
      _this->_impl_.routing_secret_ = from._impl_.routing_secret_;
    }
    if ((cached_has_bits & 0x00020000u) != 0) {
      _this->_impl_.not_primary_session_ = from._impl_.not_primary_session_;
    }
    if ((cached_has_bits & 0x00040000u) != 0) {
      _this->_impl_.not_primary_transport_ = from._impl_.not_primary_transport_;
    }
    if ((cached_has_bits & 0x00080000u) != 0) {
      _this->_impl_.relay_override_active_ = from._impl_.relay_override_active_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramConnectionClosed::CopyFrom(const CMsgSteamDatagramConnectionClosed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramConnectionClosed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CMsgSteamDatagramConnectionClosed::InternalSwap(CMsgSteamDatagramConnectionClosed* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.debug_, &other->_impl_.debug_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.forward_target_relay_routing_token_, &other->_impl_.forward_target_relay_routing_token_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.from_identity_string_, &other->_impl_.from_identity_string_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.relay_override_active_)
      + sizeof(CMsgSteamDatagramConnectionClosed::_impl_.relay_override_active_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionClosed, _impl_.legacy_from_identity_binary_)>(
          reinterpret_cast<char*>(&_impl_.legacy_from_identity_binary_),
          reinterpret_cast<char*>(&other->_impl_.legacy_from_identity_binary_));
}

::google::protobuf::Metadata CMsgSteamDatagramConnectionClosed::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CMsgSteamDatagramNoConnection::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CMsgSteamDatagramNoConnection>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_._has_bits_);
};

void CMsgSteamDatagramNoConnection::clear_quality_relay() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.quality_relay_ != nullptr) _impl_.quality_relay_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CMsgSteamDatagramNoConnection::clear_quality_e2e() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.quality_e2e_ != nullptr) _impl_.quality_e2e_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CMsgSteamDatagramNoConnection::CMsgSteamDatagramNoConnection(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramNoConnection_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramNoConnection)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramNoConnection::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::CMsgSteamDatagramNoConnection& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        from_identity_string_(arena, from.from_identity_string_) {}

CMsgSteamDatagramNoConnection::CMsgSteamDatagramNoConnection(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const CMsgSteamDatagramNoConnection& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramNoConnection_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CMsgSteamDatagramNoConnection* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.quality_relay_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.quality_relay_)
                : nullptr;
  _impl_.quality_e2e_ = ((cached_has_bits & 0x00000004u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.quality_e2e_)
                : nullptr;
  _impl_.p2p_routing_summary_ = ((cached_has_bits & 0x00000008u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.p2p_routing_summary_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, legacy_from_steam_id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, legacy_from_steam_id_),
           offsetof(Impl_, dummy_pad_) -
               offsetof(Impl_, legacy_from_steam_id_) +
               sizeof(Impl_::dummy_pad_));

  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramNoConnection)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramNoConnection::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        from_identity_string_(arena) {}

inline void CMsgSteamDatagramNoConnection::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, quality_relay_),
           0,
           offsetof(Impl_, dummy_pad_) -
               offsetof(Impl_, quality_relay_) +
               sizeof(Impl_::dummy_pad_));
}
CMsgSteamDatagramNoConnection::~CMsgSteamDatagramNoConnection() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramNoConnection)
  SharedDtor(*this);
}
inline void CMsgSteamDatagramNoConnection::SharedDtor(MessageLite& self) {
  CMsgSteamDatagramNoConnection& this_ = static_cast<CMsgSteamDatagramNoConnection&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.from_identity_string_.Destroy();
  delete this_._impl_.quality_relay_;
  delete this_._impl_.quality_e2e_;
  delete this_._impl_.p2p_routing_summary_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CMsgSteamDatagramNoConnection::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CMsgSteamDatagramNoConnection(arena);
}
constexpr auto CMsgSteamDatagramNoConnection::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(CMsgSteamDatagramNoConnection),
                                            alignof(CMsgSteamDatagramNoConnection));
}
constexpr auto CMsgSteamDatagramNoConnection::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CMsgSteamDatagramNoConnection_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CMsgSteamDatagramNoConnection::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CMsgSteamDatagramNoConnection>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CMsgSteamDatagramNoConnection::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CMsgSteamDatagramNoConnection>(), &CMsgSteamDatagramNoConnection::ByteSizeLong,
              &CMsgSteamDatagramNoConnection::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_._cached_size_),
          false,
      },
      &CMsgSteamDatagramNoConnection::kDescriptorMethods,
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        CMsgSteamDatagramNoConnection_class_data_ =
            CMsgSteamDatagramNoConnection::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL CMsgSteamDatagramNoConnection::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CMsgSteamDatagramNoConnection_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CMsgSteamDatagramNoConnection_class_data_.tc_table);
  return CMsgSteamDatagramNoConnection_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 16, 3, 74, 7>
CMsgSteamDatagramNoConnection::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_._has_bits_),
    0, // no _extensions_
    1023, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294836353,  // skipmap
    offsetof(decltype(_table_), field_entries),
    16,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    CMsgSteamDatagramNoConnection_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CMsgSteamDatagramNoConnection>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional uint32 legacy_gameserver_relay_session_id = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramNoConnection, _impl_.legacy_gameserver_relay_session_id_), 5>(),
     {16, 5, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_.legacy_gameserver_relay_session_id_)}},
    // optional fixed64 legacy_from_steam_id = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 4, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_.legacy_from_steam_id_)}},
    // optional bool end_to_end = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CMsgSteamDatagramNoConnection, _impl_.end_to_end_), 11>(),
     {32, 11, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_.end_to_end_)}},
    // optional fixed32 to_connection_id = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 6, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_.to_connection_id_)}},
    // optional fixed32 from_connection_id = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 7, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_.from_connection_id_)}},
    // optional string from_identity_string = 7;
    {::_pbi::TcParser::FastSS1,
     {58, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_.from_identity_string_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional fixed32 to_relay_session_id = 9;
    {::_pbi::TcParser::FastF32S1,
     {77, 8, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_.to_relay_session_id_)}},
    // optional fixed32 from_relay_session_id = 10;
    {::_pbi::TcParser::FastF32S1,
     {85, 10, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_.from_relay_session_id_)}},
    // optional fixed64 routing_secret = 11;
    {::_pbi::TcParser::FastF64S1,
     {89, 9, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_.routing_secret_)}},
    // optional bool not_primary_session = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CMsgSteamDatagramNoConnection, _impl_.not_primary_session_), 12>(),
     {96, 12, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_.not_primary_session_)}},
    // optional .CMsgSteamDatagramConnectionQuality quality_relay = 13;
    {::_pbi::TcParser::FastMtS1,
     {106, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_.quality_relay_)}},
    // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 14;
    {::_pbi::TcParser::FastMtS1,
     {114, 2, 1, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_.quality_e2e_)}},
    // optional bool not_primary_transport = 15;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CMsgSteamDatagramNoConnection, _impl_.not_primary_transport_), 13>(),
     {120, 13, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_.not_primary_transport_)}},
    // optional .CMsgSteamDatagramP2PRoutingSummary p2p_routing_summary = 16;
    {::_pbi::TcParser::FastMtS2,
     {386, 3, 2, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_.p2p_routing_summary_)}},
    // optional bool relay_override_active = 17;
    {::_pbi::TcParser::FastV8S2,
     {392, 14, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_.relay_override_active_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional fixed32 dummy_pad = 1023;
    {::_pbi::TcParser::FastF32S2,
     {16381, 15, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_.dummy_pad_)}},
  }}, {{
    1023, 0, 1,
    65534, 15,
    65535, 65535
  }}, {{
    // optional uint32 legacy_gameserver_relay_session_id = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_.legacy_gameserver_relay_session_id_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional fixed64 legacy_from_steam_id = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_.legacy_from_steam_id_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
    // optional bool end_to_end = 4;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_.end_to_end_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional fixed32 to_connection_id = 5;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_.to_connection_id_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional fixed32 from_connection_id = 6;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_.from_connection_id_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional string from_identity_string = 7;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_.from_identity_string_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional fixed32 to_relay_session_id = 9;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_.to_relay_session_id_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional fixed32 from_relay_session_id = 10;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_.from_relay_session_id_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional fixed64 routing_secret = 11;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_.routing_secret_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
    // optional bool not_primary_session = 12;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_.not_primary_session_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional .CMsgSteamDatagramConnectionQuality quality_relay = 13;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_.quality_relay_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 14;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_.quality_e2e_), _Internal::kHasBitsOffset + 2, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional bool not_primary_transport = 15;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_.not_primary_transport_), _Internal::kHasBitsOffset + 13, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional .CMsgSteamDatagramP2PRoutingSummary p2p_routing_summary = 16;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_.p2p_routing_summary_), _Internal::kHasBitsOffset + 3, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional bool relay_override_active = 17;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_.relay_override_active_), _Internal::kHasBitsOffset + 14, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional fixed32 dummy_pad = 1023;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_.dummy_pad_), _Internal::kHasBitsOffset + 15, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::CMsgSteamDatagramConnectionQuality>()},
      {::_pbi::TcParser::GetTable<::CMsgSteamDatagramConnectionQuality>()},
      {::_pbi::TcParser::GetTable<::CMsgSteamDatagramP2PRoutingSummary>()},
  }},
  {{
    "\35\0\0\0\0\0\24\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "CMsgSteamDatagramNoConnection"
    "from_identity_string"
  }},
};
PROTOBUF_NOINLINE void CMsgSteamDatagramNoConnection::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramNoConnection)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.from_identity_string_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.quality_relay_ != nullptr);
      _impl_.quality_relay_->Clear();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(_impl_.quality_e2e_ != nullptr);
      _impl_.quality_e2e_->Clear();
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      ABSL_DCHECK(_impl_.p2p_routing_summary_ != nullptr);
      _impl_.p2p_routing_summary_->Clear();
    }
  }
  if ((cached_has_bits & 0x000000f0u) != 0) {
    ::memset(&_impl_.legacy_from_steam_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.from_connection_id_) -
        reinterpret_cast<char*>(&_impl_.legacy_from_steam_id_)) + sizeof(_impl_.from_connection_id_));
  }
  if ((cached_has_bits & 0x0000ff00u) != 0) {
    ::memset(&_impl_.to_relay_session_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.dummy_pad_) -
        reinterpret_cast<char*>(&_impl_.to_relay_session_id_)) + sizeof(_impl_.dummy_pad_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramNoConnection::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CMsgSteamDatagramNoConnection& this_ = static_cast<const CMsgSteamDatagramNoConnection&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramNoConnection::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CMsgSteamDatagramNoConnection& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramNoConnection)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional uint32 legacy_gameserver_relay_session_id = 2;
  if ((cached_has_bits & 0x00000020u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this_._internal_legacy_gameserver_relay_session_id(), target);
  }

  // optional fixed64 legacy_from_steam_id = 3;
  if ((cached_has_bits & 0x00000010u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        3, this_._internal_legacy_from_steam_id(), target);
  }

  // optional bool end_to_end = 4;
  if ((cached_has_bits & 0x00000800u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this_._internal_end_to_end(), target);
  }

  // optional fixed32 to_connection_id = 5;
  if ((cached_has_bits & 0x00000040u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        5, this_._internal_to_connection_id(), target);
  }

  // optional fixed32 from_connection_id = 6;
  if ((cached_has_bits & 0x00000080u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        6, this_._internal_from_connection_id(), target);
  }

  // optional string from_identity_string = 7;
  if ((cached_has_bits & 0x00000001u) != 0) {
    const std::string& _s = this_._internal_from_identity_string();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CMsgSteamDatagramNoConnection.from_identity_string");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // optional fixed32 to_relay_session_id = 9;
  if ((cached_has_bits & 0x00000100u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        9, this_._internal_to_relay_session_id(), target);
  }

  // optional fixed32 from_relay_session_id = 10;
  if ((cached_has_bits & 0x00000400u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        10, this_._internal_from_relay_session_id(), target);
  }

  // optional fixed64 routing_secret = 11;
  if ((cached_has_bits & 0x00000200u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        11, this_._internal_routing_secret(), target);
  }

  // optional bool not_primary_session = 12;
  if ((cached_has_bits & 0x00001000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        12, this_._internal_not_primary_session(), target);
  }

  // optional .CMsgSteamDatagramConnectionQuality quality_relay = 13;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        13, *this_._impl_.quality_relay_, this_._impl_.quality_relay_->GetCachedSize(), target,
        stream);
  }

  // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 14;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        14, *this_._impl_.quality_e2e_, this_._impl_.quality_e2e_->GetCachedSize(), target,
        stream);
  }

  // optional bool not_primary_transport = 15;
  if ((cached_has_bits & 0x00002000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        15, this_._internal_not_primary_transport(), target);
  }

  // optional .CMsgSteamDatagramP2PRoutingSummary p2p_routing_summary = 16;
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        16, *this_._impl_.p2p_routing_summary_, this_._impl_.p2p_routing_summary_->GetCachedSize(), target,
        stream);
  }

  // optional bool relay_override_active = 17;
  if ((cached_has_bits & 0x00004000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        17, this_._internal_relay_override_active(), target);
  }

  // optional fixed32 dummy_pad = 1023;
  if ((cached_has_bits & 0x00008000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        1023, this_._internal_dummy_pad(), target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramNoConnection)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CMsgSteamDatagramNoConnection::ByteSizeLong(const MessageLite& base) {
  const CMsgSteamDatagramNoConnection& this_ = static_cast<const CMsgSteamDatagramNoConnection&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t CMsgSteamDatagramNoConnection::ByteSizeLong() const {
  const CMsgSteamDatagramNoConnection& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramNoConnection)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += ::absl::popcount(0x00000210u & cached_has_bits) * 9;
  total_size += static_cast<bool>(0x00008000u & cached_has_bits) * 6;
  total_size += ::absl::popcount(0x000005c0u & cached_has_bits) * 5;
  total_size += static_cast<bool>(0x00004000u & cached_has_bits) * 3;
  total_size += ::absl::popcount(0x00003800u & cached_has_bits) * 2;
  if ((cached_has_bits & 0x0000002fu) != 0) {
    // optional string from_identity_string = 7;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_from_identity_string());
    }
    // optional .CMsgSteamDatagramConnectionQuality quality_relay = 13;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.quality_relay_);
    }
    // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 14;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.quality_e2e_);
    }
    // optional .CMsgSteamDatagramP2PRoutingSummary p2p_routing_summary = 16;
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += 2 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.p2p_routing_summary_);
    }
    // optional uint32 legacy_gameserver_relay_session_id = 2;
    if ((cached_has_bits & 0x00000020u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_legacy_gameserver_relay_session_id());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void CMsgSteamDatagramNoConnection::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramNoConnection*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramNoConnection&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramNoConnection)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_internal_set_from_identity_string(from._internal_from_identity_string());
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.quality_relay_ != nullptr);
      if (_this->_impl_.quality_relay_ == nullptr) {
        _this->_impl_.quality_relay_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.quality_relay_);
      } else {
        _this->_impl_.quality_relay_->MergeFrom(*from._impl_.quality_relay_);
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(from._impl_.quality_e2e_ != nullptr);
      if (_this->_impl_.quality_e2e_ == nullptr) {
        _this->_impl_.quality_e2e_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.quality_e2e_);
      } else {
        _this->_impl_.quality_e2e_->MergeFrom(*from._impl_.quality_e2e_);
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      ABSL_DCHECK(from._impl_.p2p_routing_summary_ != nullptr);
      if (_this->_impl_.p2p_routing_summary_ == nullptr) {
        _this->_impl_.p2p_routing_summary_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.p2p_routing_summary_);
      } else {
        _this->_impl_.p2p_routing_summary_->MergeFrom(*from._impl_.p2p_routing_summary_);
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _this->_impl_.legacy_from_steam_id_ = from._impl_.legacy_from_steam_id_;
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      _this->_impl_.legacy_gameserver_relay_session_id_ = from._impl_.legacy_gameserver_relay_session_id_;
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      _this->_impl_.to_connection_id_ = from._impl_.to_connection_id_;
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      _this->_impl_.from_connection_id_ = from._impl_.from_connection_id_;
    }
  }
  if ((cached_has_bits & 0x0000ff00u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      _this->_impl_.to_relay_session_id_ = from._impl_.to_relay_session_id_;
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      _this->_impl_.routing_secret_ = from._impl_.routing_secret_;
    }
    if ((cached_has_bits & 0x00000400u) != 0) {
      _this->_impl_.from_relay_session_id_ = from._impl_.from_relay_session_id_;
    }
    if ((cached_has_bits & 0x00000800u) != 0) {
      _this->_impl_.end_to_end_ = from._impl_.end_to_end_;
    }
    if ((cached_has_bits & 0x00001000u) != 0) {
      _this->_impl_.not_primary_session_ = from._impl_.not_primary_session_;
    }
    if ((cached_has_bits & 0x00002000u) != 0) {
      _this->_impl_.not_primary_transport_ = from._impl_.not_primary_transport_;
    }
    if ((cached_has_bits & 0x00004000u) != 0) {
      _this->_impl_.relay_override_active_ = from._impl_.relay_override_active_;
    }
    if ((cached_has_bits & 0x00008000u) != 0) {
      _this->_impl_.dummy_pad_ = from._impl_.dummy_pad_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramNoConnection::CopyFrom(const CMsgSteamDatagramNoConnection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramNoConnection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CMsgSteamDatagramNoConnection::InternalSwap(CMsgSteamDatagramNoConnection* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.from_identity_string_, &other->_impl_.from_identity_string_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_.dummy_pad_)
      + sizeof(CMsgSteamDatagramNoConnection::_impl_.dummy_pad_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramNoConnection, _impl_.quality_relay_)>(
          reinterpret_cast<char*>(&_impl_.quality_relay_),
          reinterpret_cast<char*>(&other->_impl_.quality_relay_));
}

::google::protobuf::Metadata CMsgSteamDatagramNoConnection::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CMsgSteamDatagramGameserverSessionRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CMsgSteamDatagramGameserverSessionRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionRequest, _impl_._has_bits_);
};

void CMsgSteamDatagramGameserverSessionRequest::clear_dev_client_cert() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.dev_client_cert_ != nullptr) _impl_.dev_client_cert_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
CMsgSteamDatagramGameserverSessionRequest::CMsgSteamDatagramGameserverSessionRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramGameserverSessionRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramGameserverSessionRequest)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramGameserverSessionRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::CMsgSteamDatagramGameserverSessionRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        ticket_(arena, from.ticket_),
        platform_(arena, from.platform_),
        build_(arena, from.build_),
        dev_gameserver_identity_(arena, from.dev_gameserver_identity_) {}

CMsgSteamDatagramGameserverSessionRequest::CMsgSteamDatagramGameserverSessionRequest(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const CMsgSteamDatagramGameserverSessionRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramGameserverSessionRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CMsgSteamDatagramGameserverSessionRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.dev_client_cert_ = ((cached_has_bits & 0x00000010u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.dev_client_cert_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, challenge_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, challenge_),
           offsetof(Impl_, server_connection_id_) -
               offsetof(Impl_, challenge_) +
               sizeof(Impl_::server_connection_id_));

  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramGameserverSessionRequest)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramGameserverSessionRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        ticket_(arena),
        platform_(arena),
        build_(arena),
        dev_gameserver_identity_(arena) {}

inline void CMsgSteamDatagramGameserverSessionRequest::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, dev_client_cert_),
           0,
           offsetof(Impl_, server_connection_id_) -
               offsetof(Impl_, dev_client_cert_) +
               sizeof(Impl_::server_connection_id_));
}
CMsgSteamDatagramGameserverSessionRequest::~CMsgSteamDatagramGameserverSessionRequest() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramGameserverSessionRequest)
  SharedDtor(*this);
}
inline void CMsgSteamDatagramGameserverSessionRequest::SharedDtor(MessageLite& self) {
  CMsgSteamDatagramGameserverSessionRequest& this_ = static_cast<CMsgSteamDatagramGameserverSessionRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.ticket_.Destroy();
  this_._impl_.platform_.Destroy();
  this_._impl_.build_.Destroy();
  this_._impl_.dev_gameserver_identity_.Destroy();
  delete this_._impl_.dev_client_cert_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CMsgSteamDatagramGameserverSessionRequest::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CMsgSteamDatagramGameserverSessionRequest(arena);
}
constexpr auto CMsgSteamDatagramGameserverSessionRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(CMsgSteamDatagramGameserverSessionRequest),
                                            alignof(CMsgSteamDatagramGameserverSessionRequest));
}
constexpr auto CMsgSteamDatagramGameserverSessionRequest::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CMsgSteamDatagramGameserverSessionRequest_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CMsgSteamDatagramGameserverSessionRequest::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CMsgSteamDatagramGameserverSessionRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CMsgSteamDatagramGameserverSessionRequest::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CMsgSteamDatagramGameserverSessionRequest>(), &CMsgSteamDatagramGameserverSessionRequest::ByteSizeLong,
              &CMsgSteamDatagramGameserverSessionRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionRequest, _impl_._cached_size_),
          false,
      },
      &CMsgSteamDatagramGameserverSessionRequest::kDescriptorMethods,
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        CMsgSteamDatagramGameserverSessionRequest_class_data_ =
            CMsgSteamDatagramGameserverSessionRequest::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL CMsgSteamDatagramGameserverSessionRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CMsgSteamDatagramGameserverSessionRequest_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CMsgSteamDatagramGameserverSessionRequest_class_data_.tc_table);
  return CMsgSteamDatagramGameserverSessionRequest_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 11, 1, 94, 7>
CMsgSteamDatagramGameserverSessionRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionRequest, _impl_._has_bits_),
    0, // no _extensions_
    101, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966274,  // skipmap
    offsetof(decltype(_table_), field_entries),
    11,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    CMsgSteamDatagramGameserverSessionRequest_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CMsgSteamDatagramGameserverSessionRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional bytes ticket = 1;
    {::_pbi::TcParser::FastBS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionRequest, _impl_.ticket_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional fixed32 challenge_time = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 6, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionRequest, _impl_.challenge_time_)}},
    // optional fixed64 challenge = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 5, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionRequest, _impl_.challenge_)}},
    // optional fixed32 client_connection_id = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 7, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionRequest, _impl_.client_connection_id_)}},
    // optional uint64 network_config_version = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(CMsgSteamDatagramGameserverSessionRequest, _impl_.network_config_version_), 8>(),
     {48, 8, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionRequest, _impl_.network_config_version_)}},
    // optional uint32 protocol_version = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramGameserverSessionRequest, _impl_.protocol_version_), 9>(),
     {56, 9, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionRequest, _impl_.protocol_version_)}},
    // optional fixed32 server_connection_id = 8;
    {::_pbi::TcParser::FastF32S1,
     {69, 10, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionRequest, _impl_.server_connection_id_)}},
    // optional string platform = 9;
    {::_pbi::TcParser::FastSS1,
     {74, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionRequest, _impl_.platform_)}},
    // optional string build = 10;
    {::_pbi::TcParser::FastSS1,
     {82, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionRequest, _impl_.build_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    100, 0, 1,
    65532, 9,
    65535, 65535
  }}, {{
    // optional bytes ticket = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionRequest, _impl_.ticket_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional fixed32 challenge_time = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionRequest, _impl_.challenge_time_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional fixed64 challenge = 4;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionRequest, _impl_.challenge_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
    // optional fixed32 client_connection_id = 5;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionRequest, _impl_.client_connection_id_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional uint64 network_config_version = 6;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionRequest, _impl_.network_config_version_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // optional uint32 protocol_version = 7;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionRequest, _impl_.protocol_version_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional fixed32 server_connection_id = 8;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionRequest, _impl_.server_connection_id_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional string platform = 9;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionRequest, _impl_.platform_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional string build = 10;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionRequest, _impl_.build_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional string dev_gameserver_identity = 100;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionRequest, _impl_.dev_gameserver_identity_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional .CMsgSteamDatagramCertificateSigned dev_client_cert = 101;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionRequest, _impl_.dev_client_cert_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::CMsgSteamDatagramCertificateSigned>()},
  }},
  {{
    "\51\0\0\0\0\0\0\0\10\5\27\0\0\0\0\0"
    "CMsgSteamDatagramGameserverSessionRequest"
    "platform"
    "build"
    "dev_gameserver_identity"
  }},
};
PROTOBUF_NOINLINE void CMsgSteamDatagramGameserverSessionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramGameserverSessionRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.ticket_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.platform_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _impl_.build_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _impl_.dev_gameserver_identity_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      ABSL_DCHECK(_impl_.dev_client_cert_ != nullptr);
      _impl_.dev_client_cert_->Clear();
    }
  }
  if ((cached_has_bits & 0x000000e0u) != 0) {
    ::memset(&_impl_.challenge_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.client_connection_id_) -
        reinterpret_cast<char*>(&_impl_.challenge_)) + sizeof(_impl_.client_connection_id_));
  }
  if ((cached_has_bits & 0x00000700u) != 0) {
    ::memset(&_impl_.network_config_version_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.server_connection_id_) -
        reinterpret_cast<char*>(&_impl_.network_config_version_)) + sizeof(_impl_.server_connection_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramGameserverSessionRequest::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CMsgSteamDatagramGameserverSessionRequest& this_ = static_cast<const CMsgSteamDatagramGameserverSessionRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramGameserverSessionRequest::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CMsgSteamDatagramGameserverSessionRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramGameserverSessionRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional bytes ticket = 1;
  if ((cached_has_bits & 0x00000001u) != 0) {
    const std::string& _s = this_._internal_ticket();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  // optional fixed32 challenge_time = 3;
  if ((cached_has_bits & 0x00000040u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        3, this_._internal_challenge_time(), target);
  }

  // optional fixed64 challenge = 4;
  if ((cached_has_bits & 0x00000020u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        4, this_._internal_challenge(), target);
  }

  // optional fixed32 client_connection_id = 5;
  if ((cached_has_bits & 0x00000080u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        5, this_._internal_client_connection_id(), target);
  }

  // optional uint64 network_config_version = 6;
  if ((cached_has_bits & 0x00000100u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        6, this_._internal_network_config_version(), target);
  }

  // optional uint32 protocol_version = 7;
  if ((cached_has_bits & 0x00000200u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        7, this_._internal_protocol_version(), target);
  }

  // optional fixed32 server_connection_id = 8;
  if ((cached_has_bits & 0x00000400u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        8, this_._internal_server_connection_id(), target);
  }

  // optional string platform = 9;
  if ((cached_has_bits & 0x00000002u) != 0) {
    const std::string& _s = this_._internal_platform();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CMsgSteamDatagramGameserverSessionRequest.platform");
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  // optional string build = 10;
  if ((cached_has_bits & 0x00000004u) != 0) {
    const std::string& _s = this_._internal_build();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CMsgSteamDatagramGameserverSessionRequest.build");
    target = stream->WriteStringMaybeAliased(10, _s, target);
  }

  // optional string dev_gameserver_identity = 100;
  if ((cached_has_bits & 0x00000008u) != 0) {
    const std::string& _s = this_._internal_dev_gameserver_identity();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CMsgSteamDatagramGameserverSessionRequest.dev_gameserver_identity");
    target = stream->WriteStringMaybeAliased(100, _s, target);
  }

  // optional .CMsgSteamDatagramCertificateSigned dev_client_cert = 101;
  if ((cached_has_bits & 0x00000010u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        101, *this_._impl_.dev_client_cert_, this_._impl_.dev_client_cert_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramGameserverSessionRequest)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CMsgSteamDatagramGameserverSessionRequest::ByteSizeLong(const MessageLite& base) {
  const CMsgSteamDatagramGameserverSessionRequest& this_ = static_cast<const CMsgSteamDatagramGameserverSessionRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t CMsgSteamDatagramGameserverSessionRequest::ByteSizeLong() const {
  const CMsgSteamDatagramGameserverSessionRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramGameserverSessionRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += static_cast<bool>(0x00000020u & cached_has_bits) * 9;
  total_size += ::absl::popcount(0x000004c0u & cached_has_bits) * 5;
  if ((cached_has_bits & 0x0000001fu) != 0) {
    // optional bytes ticket = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this_._internal_ticket());
    }
    // optional string platform = 9;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_platform());
    }
    // optional string build = 10;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_build());
    }
    // optional string dev_gameserver_identity = 100;
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_dev_gameserver_identity());
    }
    // optional .CMsgSteamDatagramCertificateSigned dev_client_cert = 101;
    if ((cached_has_bits & 0x00000010u) != 0) {
      total_size += 2 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.dev_client_cert_);
    }
  }
  if ((cached_has_bits & 0x00000300u) != 0) {
    // optional uint64 network_config_version = 6;
    if ((cached_has_bits & 0x00000100u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this_._internal_network_config_version());
    }
    // optional uint32 protocol_version = 7;
    if ((cached_has_bits & 0x00000200u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_protocol_version());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void CMsgSteamDatagramGameserverSessionRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramGameserverSessionRequest*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramGameserverSessionRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramGameserverSessionRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_internal_set_ticket(from._internal_ticket());
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_internal_set_platform(from._internal_platform());
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_internal_set_build(from._internal_build());
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _this->_internal_set_dev_gameserver_identity(from._internal_dev_gameserver_identity());
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      ABSL_DCHECK(from._impl_.dev_client_cert_ != nullptr);
      if (_this->_impl_.dev_client_cert_ == nullptr) {
        _this->_impl_.dev_client_cert_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.dev_client_cert_);
      } else {
        _this->_impl_.dev_client_cert_->MergeFrom(*from._impl_.dev_client_cert_);
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      _this->_impl_.challenge_ = from._impl_.challenge_;
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      _this->_impl_.challenge_time_ = from._impl_.challenge_time_;
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      _this->_impl_.client_connection_id_ = from._impl_.client_connection_id_;
    }
  }
  if ((cached_has_bits & 0x00000700u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      _this->_impl_.network_config_version_ = from._impl_.network_config_version_;
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      _this->_impl_.protocol_version_ = from._impl_.protocol_version_;
    }
    if ((cached_has_bits & 0x00000400u) != 0) {
      _this->_impl_.server_connection_id_ = from._impl_.server_connection_id_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramGameserverSessionRequest::CopyFrom(const CMsgSteamDatagramGameserverSessionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramGameserverSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CMsgSteamDatagramGameserverSessionRequest::InternalSwap(CMsgSteamDatagramGameserverSessionRequest* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ticket_, &other->_impl_.ticket_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.platform_, &other->_impl_.platform_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.build_, &other->_impl_.build_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.dev_gameserver_identity_, &other->_impl_.dev_gameserver_identity_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionRequest, _impl_.server_connection_id_)
      + sizeof(CMsgSteamDatagramGameserverSessionRequest::_impl_.server_connection_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionRequest, _impl_.dev_client_cert_)>(
          reinterpret_cast<char*>(&_impl_.dev_client_cert_),
          reinterpret_cast<char*>(&other->_impl_.dev_client_cert_));
}

::google::protobuf::Metadata CMsgSteamDatagramGameserverSessionRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CMsgSteamDatagramGameserverSessionEstablished::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CMsgSteamDatagramGameserverSessionEstablished>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionEstablished, _impl_._has_bits_);
};

CMsgSteamDatagramGameserverSessionEstablished::CMsgSteamDatagramGameserverSessionEstablished(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramGameserverSessionEstablished_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramGameserverSessionEstablished)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramGameserverSessionEstablished::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::CMsgSteamDatagramGameserverSessionEstablished& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        gameserver_identity_string_(arena, from.gameserver_identity_string_),
        dummy_legacy_identity_binary_(arena, from.dummy_legacy_identity_binary_) {}

CMsgSteamDatagramGameserverSessionEstablished::CMsgSteamDatagramGameserverSessionEstablished(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const CMsgSteamDatagramGameserverSessionEstablished& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramGameserverSessionEstablished_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CMsgSteamDatagramGameserverSessionEstablished* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, connection_id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, connection_id_),
           offsetof(Impl_, seq_num_r2c_) -
               offsetof(Impl_, connection_id_) +
               sizeof(Impl_::seq_num_r2c_));

  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramGameserverSessionEstablished)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramGameserverSessionEstablished::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        gameserver_identity_string_(arena),
        dummy_legacy_identity_binary_(arena) {}

inline void CMsgSteamDatagramGameserverSessionEstablished::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, connection_id_),
           0,
           offsetof(Impl_, seq_num_r2c_) -
               offsetof(Impl_, connection_id_) +
               sizeof(Impl_::seq_num_r2c_));
}
CMsgSteamDatagramGameserverSessionEstablished::~CMsgSteamDatagramGameserverSessionEstablished() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramGameserverSessionEstablished)
  SharedDtor(*this);
}
inline void CMsgSteamDatagramGameserverSessionEstablished::SharedDtor(MessageLite& self) {
  CMsgSteamDatagramGameserverSessionEstablished& this_ = static_cast<CMsgSteamDatagramGameserverSessionEstablished&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.gameserver_identity_string_.Destroy();
  this_._impl_.dummy_legacy_identity_binary_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CMsgSteamDatagramGameserverSessionEstablished::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CMsgSteamDatagramGameserverSessionEstablished(arena);
}
constexpr auto CMsgSteamDatagramGameserverSessionEstablished::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(CMsgSteamDatagramGameserverSessionEstablished),
                                            alignof(CMsgSteamDatagramGameserverSessionEstablished));
}
constexpr auto CMsgSteamDatagramGameserverSessionEstablished::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CMsgSteamDatagramGameserverSessionEstablished_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CMsgSteamDatagramGameserverSessionEstablished::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CMsgSteamDatagramGameserverSessionEstablished>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CMsgSteamDatagramGameserverSessionEstablished::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CMsgSteamDatagramGameserverSessionEstablished>(), &CMsgSteamDatagramGameserverSessionEstablished::ByteSizeLong,
              &CMsgSteamDatagramGameserverSessionEstablished::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionEstablished, _impl_._cached_size_),
          false,
      },
      &CMsgSteamDatagramGameserverSessionEstablished::kDescriptorMethods,
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        CMsgSteamDatagramGameserverSessionEstablished_class_data_ =
            CMsgSteamDatagramGameserverSessionEstablished::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL CMsgSteamDatagramGameserverSessionEstablished::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CMsgSteamDatagramGameserverSessionEstablished_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CMsgSteamDatagramGameserverSessionEstablished_class_data_.tc_table);
  return CMsgSteamDatagramGameserverSessionEstablished_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 80, 2>
CMsgSteamDatagramGameserverSessionEstablished::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionEstablished, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967184,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    CMsgSteamDatagramGameserverSessionEstablished_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CMsgSteamDatagramGameserverSessionEstablished>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional fixed32 connection_id = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionEstablished, _impl_.connection_id_)}},
    // optional string gameserver_identity_string = 2;
    {::_pbi::TcParser::FastSS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionEstablished, _impl_.gameserver_identity_string_)}},
    // optional fixed64 legacy_gameserver_steamid = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 4, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionEstablished, _impl_.legacy_gameserver_steamid_)}},
    // optional uint32 seconds_until_shutdown = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramGameserverSessionEstablished, _impl_.seconds_until_shutdown_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionEstablished, _impl_.seconds_until_shutdown_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional uint32 seq_num_r2c = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramGameserverSessionEstablished, _impl_.seq_num_r2c_), 5>(),
     {48, 5, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionEstablished, _impl_.seq_num_r2c_)}},
    // optional bytes dummy_legacy_identity_binary = 7;
    {::_pbi::TcParser::FastBS1,
     {58, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionEstablished, _impl_.dummy_legacy_identity_binary_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional fixed32 connection_id = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionEstablished, _impl_.connection_id_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional string gameserver_identity_string = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionEstablished, _impl_.gameserver_identity_string_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional fixed64 legacy_gameserver_steamid = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionEstablished, _impl_.legacy_gameserver_steamid_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
    // optional uint32 seconds_until_shutdown = 4;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionEstablished, _impl_.seconds_until_shutdown_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 seq_num_r2c = 6;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionEstablished, _impl_.seq_num_r2c_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional bytes dummy_legacy_identity_binary = 7;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionEstablished, _impl_.dummy_legacy_identity_binary_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\55\0\32\0\0\0\0\0"
    "CMsgSteamDatagramGameserverSessionEstablished"
    "gameserver_identity_string"
  }},
};
PROTOBUF_NOINLINE void CMsgSteamDatagramGameserverSessionEstablished::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramGameserverSessionEstablished)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.gameserver_identity_string_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.dummy_legacy_identity_binary_.ClearNonDefaultToEmpty();
    }
  }
  if ((cached_has_bits & 0x0000003cu) != 0) {
    ::memset(&_impl_.connection_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.seq_num_r2c_) -
        reinterpret_cast<char*>(&_impl_.connection_id_)) + sizeof(_impl_.seq_num_r2c_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramGameserverSessionEstablished::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CMsgSteamDatagramGameserverSessionEstablished& this_ = static_cast<const CMsgSteamDatagramGameserverSessionEstablished&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramGameserverSessionEstablished::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CMsgSteamDatagramGameserverSessionEstablished& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramGameserverSessionEstablished)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional fixed32 connection_id = 1;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        1, this_._internal_connection_id(), target);
  }

  // optional string gameserver_identity_string = 2;
  if ((cached_has_bits & 0x00000001u) != 0) {
    const std::string& _s = this_._internal_gameserver_identity_string();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CMsgSteamDatagramGameserverSessionEstablished.gameserver_identity_string");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional fixed64 legacy_gameserver_steamid = 3;
  if ((cached_has_bits & 0x00000010u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        3, this_._internal_legacy_gameserver_steamid(), target);
  }

  // optional uint32 seconds_until_shutdown = 4;
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this_._internal_seconds_until_shutdown(), target);
  }

  // optional uint32 seq_num_r2c = 6;
  if ((cached_has_bits & 0x00000020u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this_._internal_seq_num_r2c(), target);
  }

  // optional bytes dummy_legacy_identity_binary = 7;
  if ((cached_has_bits & 0x00000002u) != 0) {
    const std::string& _s = this_._internal_dummy_legacy_identity_binary();
    target = stream->WriteBytesMaybeAliased(7, _s, target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramGameserverSessionEstablished)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CMsgSteamDatagramGameserverSessionEstablished::ByteSizeLong(const MessageLite& base) {
  const CMsgSteamDatagramGameserverSessionEstablished& this_ = static_cast<const CMsgSteamDatagramGameserverSessionEstablished&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t CMsgSteamDatagramGameserverSessionEstablished::ByteSizeLong() const {
  const CMsgSteamDatagramGameserverSessionEstablished& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramGameserverSessionEstablished)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += static_cast<bool>(0x00000010u & cached_has_bits) * 9;
  total_size += static_cast<bool>(0x00000004u & cached_has_bits) * 5;
  if ((cached_has_bits & 0x0000002bu) != 0) {
    // optional string gameserver_identity_string = 2;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_gameserver_identity_string());
    }
    // optional bytes dummy_legacy_identity_binary = 7;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this_._internal_dummy_legacy_identity_binary());
    }
    // optional uint32 seconds_until_shutdown = 4;
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_seconds_until_shutdown());
    }
    // optional uint32 seq_num_r2c = 6;
    if ((cached_has_bits & 0x00000020u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_seq_num_r2c());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void CMsgSteamDatagramGameserverSessionEstablished::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramGameserverSessionEstablished*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramGameserverSessionEstablished&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramGameserverSessionEstablished)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_internal_set_gameserver_identity_string(from._internal_gameserver_identity_string());
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_internal_set_dummy_legacy_identity_binary(from._internal_dummy_legacy_identity_binary());
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_impl_.connection_id_ = from._impl_.connection_id_;
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _this->_impl_.seconds_until_shutdown_ = from._impl_.seconds_until_shutdown_;
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _this->_impl_.legacy_gameserver_steamid_ = from._impl_.legacy_gameserver_steamid_;
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      _this->_impl_.seq_num_r2c_ = from._impl_.seq_num_r2c_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramGameserverSessionEstablished::CopyFrom(const CMsgSteamDatagramGameserverSessionEstablished& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramGameserverSessionEstablished)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CMsgSteamDatagramGameserverSessionEstablished::InternalSwap(CMsgSteamDatagramGameserverSessionEstablished* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.gameserver_identity_string_, &other->_impl_.gameserver_identity_string_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.dummy_legacy_identity_binary_, &other->_impl_.dummy_legacy_identity_binary_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionEstablished, _impl_.seq_num_r2c_)
      + sizeof(CMsgSteamDatagramGameserverSessionEstablished::_impl_.seq_num_r2c_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramGameserverSessionEstablished, _impl_.connection_id_)>(
          reinterpret_cast<char*>(&_impl_.connection_id_),
          reinterpret_cast<char*>(&other->_impl_.connection_id_));
}

::google::protobuf::Metadata CMsgSteamDatagramGameserverSessionEstablished::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CMsgSteamDatagramConnectionStatsClientToRouter::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CMsgSteamDatagramConnectionStatsClientToRouter>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsClientToRouter, _impl_._has_bits_);
};

void CMsgSteamDatagramConnectionStatsClientToRouter::clear_quality_relay() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.quality_relay_ != nullptr) _impl_.quality_relay_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CMsgSteamDatagramConnectionStatsClientToRouter::clear_quality_e2e() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.quality_e2e_ != nullptr) _impl_.quality_e2e_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CMsgSteamDatagramConnectionStatsClientToRouter::CMsgSteamDatagramConnectionStatsClientToRouter(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramConnectionStatsClientToRouter_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramConnectionStatsClientToRouter)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramConnectionStatsClientToRouter::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::CMsgSteamDatagramConnectionStatsClientToRouter& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        ack_relay_{visibility, arena, from.ack_relay_},
        legacy_ack_e2e_{visibility, arena, from.legacy_ack_e2e_} {}

CMsgSteamDatagramConnectionStatsClientToRouter::CMsgSteamDatagramConnectionStatsClientToRouter(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const CMsgSteamDatagramConnectionStatsClientToRouter& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramConnectionStatsClientToRouter_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CMsgSteamDatagramConnectionStatsClientToRouter* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.quality_relay_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.quality_relay_)
                : nullptr;
  _impl_.quality_e2e_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.quality_e2e_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, flags_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, flags_),
           offsetof(Impl_, seq_num_e2e_) -
               offsetof(Impl_, flags_) +
               sizeof(Impl_::seq_num_e2e_));

  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramConnectionStatsClientToRouter)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramConnectionStatsClientToRouter::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        ack_relay_{visibility, arena},
        legacy_ack_e2e_{visibility, arena} {}

inline void CMsgSteamDatagramConnectionStatsClientToRouter::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, quality_relay_),
           0,
           offsetof(Impl_, seq_num_e2e_) -
               offsetof(Impl_, quality_relay_) +
               sizeof(Impl_::seq_num_e2e_));
}
CMsgSteamDatagramConnectionStatsClientToRouter::~CMsgSteamDatagramConnectionStatsClientToRouter() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramConnectionStatsClientToRouter)
  SharedDtor(*this);
}
inline void CMsgSteamDatagramConnectionStatsClientToRouter::SharedDtor(MessageLite& self) {
  CMsgSteamDatagramConnectionStatsClientToRouter& this_ = static_cast<CMsgSteamDatagramConnectionStatsClientToRouter&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.quality_relay_;
  delete this_._impl_.quality_e2e_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CMsgSteamDatagramConnectionStatsClientToRouter::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CMsgSteamDatagramConnectionStatsClientToRouter(arena);
}
constexpr auto CMsgSteamDatagramConnectionStatsClientToRouter::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsClientToRouter, _impl_.ack_relay_) +
          decltype(CMsgSteamDatagramConnectionStatsClientToRouter::_impl_.ack_relay_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsClientToRouter, _impl_.legacy_ack_e2e_) +
          decltype(CMsgSteamDatagramConnectionStatsClientToRouter::_impl_.legacy_ack_e2e_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(CMsgSteamDatagramConnectionStatsClientToRouter), alignof(CMsgSteamDatagramConnectionStatsClientToRouter), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&CMsgSteamDatagramConnectionStatsClientToRouter::PlacementNew_,
                                 sizeof(CMsgSteamDatagramConnectionStatsClientToRouter),
                                 alignof(CMsgSteamDatagramConnectionStatsClientToRouter));
  }
}
constexpr auto CMsgSteamDatagramConnectionStatsClientToRouter::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CMsgSteamDatagramConnectionStatsClientToRouter_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CMsgSteamDatagramConnectionStatsClientToRouter::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CMsgSteamDatagramConnectionStatsClientToRouter>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CMsgSteamDatagramConnectionStatsClientToRouter::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CMsgSteamDatagramConnectionStatsClientToRouter>(), &CMsgSteamDatagramConnectionStatsClientToRouter::ByteSizeLong,
              &CMsgSteamDatagramConnectionStatsClientToRouter::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsClientToRouter, _impl_._cached_size_),
          false,
      },
      &CMsgSteamDatagramConnectionStatsClientToRouter::kDescriptorMethods,
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        CMsgSteamDatagramConnectionStatsClientToRouter_class_data_ =
            CMsgSteamDatagramConnectionStatsClientToRouter::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL CMsgSteamDatagramConnectionStatsClientToRouter::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CMsgSteamDatagramConnectionStatsClientToRouter_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CMsgSteamDatagramConnectionStatsClientToRouter_class_data_.tc_table);
  return CMsgSteamDatagramConnectionStatsClientToRouter_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 8, 2, 0, 2>
CMsgSteamDatagramConnectionStatsClientToRouter::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsClientToRouter, _impl_._has_bits_),
    0, // no _extensions_
    10, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966340,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    CMsgSteamDatagramConnectionStatsClientToRouter_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CMsgSteamDatagramConnectionStatsClientToRouter>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsClientToRouter, _impl_.quality_relay_)}},
    // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsClientToRouter, _impl_.quality_e2e_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // repeated fixed32 ack_relay = 4;
    {::_pbi::TcParser::FastF32R1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsClientToRouter, _impl_.ack_relay_)}},
    // repeated fixed32 legacy_ack_e2e = 5;
    {::_pbi::TcParser::FastF32R1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsClientToRouter, _impl_.legacy_ack_e2e_)}},
    // optional uint32 flags = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectionStatsClientToRouter, _impl_.flags_), 2>(),
     {48, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsClientToRouter, _impl_.flags_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional fixed32 client_connection_id = 8;
    {::_pbi::TcParser::FastF32S1,
     {69, 3, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsClientToRouter, _impl_.client_connection_id_)}},
    // optional uint32 seq_num_c2r = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectionStatsClientToRouter, _impl_.seq_num_c2r_), 4>(),
     {72, 4, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsClientToRouter, _impl_.seq_num_c2r_)}},
    // optional uint32 seq_num_e2e = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectionStatsClientToRouter, _impl_.seq_num_e2e_), 5>(),
     {80, 5, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsClientToRouter, _impl_.seq_num_e2e_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsClientToRouter, _impl_.quality_relay_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsClientToRouter, _impl_.quality_e2e_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated fixed32 ack_relay = 4;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsClientToRouter, _impl_.ack_relay_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kFixed32)},
    // repeated fixed32 legacy_ack_e2e = 5;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsClientToRouter, _impl_.legacy_ack_e2e_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kFixed32)},
    // optional uint32 flags = 6;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsClientToRouter, _impl_.flags_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional fixed32 client_connection_id = 8;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsClientToRouter, _impl_.client_connection_id_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional uint32 seq_num_c2r = 9;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsClientToRouter, _impl_.seq_num_c2r_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 seq_num_e2e = 10;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsClientToRouter, _impl_.seq_num_e2e_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::CMsgSteamDatagramConnectionQuality>()},
      {::_pbi::TcParser::GetTable<::CMsgSteamDatagramConnectionQuality>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void CMsgSteamDatagramConnectionStatsClientToRouter::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramConnectionStatsClientToRouter)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ack_relay_.Clear();
  _impl_.legacy_ack_e2e_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.quality_relay_ != nullptr);
      _impl_.quality_relay_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.quality_e2e_ != nullptr);
      _impl_.quality_e2e_->Clear();
    }
  }
  if ((cached_has_bits & 0x0000003cu) != 0) {
    ::memset(&_impl_.flags_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.seq_num_e2e_) -
        reinterpret_cast<char*>(&_impl_.flags_)) + sizeof(_impl_.seq_num_e2e_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramConnectionStatsClientToRouter::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CMsgSteamDatagramConnectionStatsClientToRouter& this_ = static_cast<const CMsgSteamDatagramConnectionStatsClientToRouter&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramConnectionStatsClientToRouter::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CMsgSteamDatagramConnectionStatsClientToRouter& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramConnectionStatsClientToRouter)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.quality_relay_, this_._impl_.quality_relay_->GetCachedSize(), target,
        stream);
  }

  // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.quality_e2e_, this_._impl_.quality_e2e_->GetCachedSize(), target,
        stream);
  }

  // repeated fixed32 ack_relay = 4;
  for (int i = 0, n = this_._internal_ack_relay_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        4, this_._internal_ack_relay().Get(i), target);
  }

  // repeated fixed32 legacy_ack_e2e = 5;
  for (int i = 0, n = this_._internal_legacy_ack_e2e_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        5, this_._internal_legacy_ack_e2e().Get(i), target);
  }

  // optional uint32 flags = 6;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this_._internal_flags(), target);
  }

  // optional fixed32 client_connection_id = 8;
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        8, this_._internal_client_connection_id(), target);
  }

  // optional uint32 seq_num_c2r = 9;
  if ((cached_has_bits & 0x00000010u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        9, this_._internal_seq_num_c2r(), target);
  }

  // optional uint32 seq_num_e2e = 10;
  if ((cached_has_bits & 0x00000020u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        10, this_._internal_seq_num_e2e(), target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramConnectionStatsClientToRouter)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CMsgSteamDatagramConnectionStatsClientToRouter::ByteSizeLong(const MessageLite& base) {
  const CMsgSteamDatagramConnectionStatsClientToRouter& this_ = static_cast<const CMsgSteamDatagramConnectionStatsClientToRouter&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t CMsgSteamDatagramConnectionStatsClientToRouter::ByteSizeLong() const {
  const CMsgSteamDatagramConnectionStatsClientToRouter& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramConnectionStatsClientToRouter)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated fixed32 ack_relay = 4;
    {
      std::size_t data_size = std::size_t{4} *
          ::_pbi::FromIntSize(this_._internal_ack_relay_size());
      std::size_t tag_size = std::size_t{1} *
          ::_pbi::FromIntSize(this_._internal_ack_relay_size());
      total_size += tag_size + data_size;
    }
    // repeated fixed32 legacy_ack_e2e = 5;
    {
      std::size_t data_size = std::size_t{4} *
          ::_pbi::FromIntSize(this_._internal_legacy_ack_e2e_size());
      std::size_t tag_size = std::size_t{1} *
          ::_pbi::FromIntSize(this_._internal_legacy_ack_e2e_size());
      total_size += tag_size + data_size;
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += static_cast<bool>(0x00000008u & cached_has_bits) * 5;
  if ((cached_has_bits & 0x00000037u) != 0) {
    // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.quality_relay_);
    }
    // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.quality_e2e_);
    }
    // optional uint32 flags = 6;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_flags());
    }
    // optional uint32 seq_num_c2r = 9;
    if ((cached_has_bits & 0x00000010u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_seq_num_c2r());
    }
    // optional uint32 seq_num_e2e = 10;
    if ((cached_has_bits & 0x00000020u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_seq_num_e2e());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void CMsgSteamDatagramConnectionStatsClientToRouter::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramConnectionStatsClientToRouter*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramConnectionStatsClientToRouter&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramConnectionStatsClientToRouter)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_ack_relay()->MergeFrom(from._internal_ack_relay());
  _this->_internal_mutable_legacy_ack_e2e()->MergeFrom(from._internal_legacy_ack_e2e());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.quality_relay_ != nullptr);
      if (_this->_impl_.quality_relay_ == nullptr) {
        _this->_impl_.quality_relay_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.quality_relay_);
      } else {
        _this->_impl_.quality_relay_->MergeFrom(*from._impl_.quality_relay_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.quality_e2e_ != nullptr);
      if (_this->_impl_.quality_e2e_ == nullptr) {
        _this->_impl_.quality_e2e_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.quality_e2e_);
      } else {
        _this->_impl_.quality_e2e_->MergeFrom(*from._impl_.quality_e2e_);
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_impl_.flags_ = from._impl_.flags_;
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _this->_impl_.client_connection_id_ = from._impl_.client_connection_id_;
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _this->_impl_.seq_num_c2r_ = from._impl_.seq_num_c2r_;
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      _this->_impl_.seq_num_e2e_ = from._impl_.seq_num_e2e_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramConnectionStatsClientToRouter::CopyFrom(const CMsgSteamDatagramConnectionStatsClientToRouter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramConnectionStatsClientToRouter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CMsgSteamDatagramConnectionStatsClientToRouter::InternalSwap(CMsgSteamDatagramConnectionStatsClientToRouter* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.ack_relay_.InternalSwap(&other->_impl_.ack_relay_);
  _impl_.legacy_ack_e2e_.InternalSwap(&other->_impl_.legacy_ack_e2e_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsClientToRouter, _impl_.seq_num_e2e_)
      + sizeof(CMsgSteamDatagramConnectionStatsClientToRouter::_impl_.seq_num_e2e_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsClientToRouter, _impl_.quality_relay_)>(
          reinterpret_cast<char*>(&_impl_.quality_relay_),
          reinterpret_cast<char*>(&other->_impl_.quality_relay_));
}

::google::protobuf::Metadata CMsgSteamDatagramConnectionStatsClientToRouter::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CMsgSteamDatagramConnectionStatsRouterToClient::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CMsgSteamDatagramConnectionStatsRouterToClient>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, _impl_._has_bits_);
};

void CMsgSteamDatagramConnectionStatsRouterToClient::clear_quality_relay() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.quality_relay_ != nullptr) _impl_.quality_relay_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CMsgSteamDatagramConnectionStatsRouterToClient::clear_quality_e2e() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.quality_e2e_ != nullptr) _impl_.quality_e2e_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CMsgSteamDatagramConnectionStatsRouterToClient::CMsgSteamDatagramConnectionStatsRouterToClient(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramConnectionStatsRouterToClient_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramConnectionStatsRouterToClient)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramConnectionStatsRouterToClient::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::CMsgSteamDatagramConnectionStatsRouterToClient& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        ack_relay_{visibility, arena, from.ack_relay_},
        legacy_ack_e2e_{visibility, arena, from.legacy_ack_e2e_} {}

CMsgSteamDatagramConnectionStatsRouterToClient::CMsgSteamDatagramConnectionStatsRouterToClient(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const CMsgSteamDatagramConnectionStatsRouterToClient& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramConnectionStatsRouterToClient_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CMsgSteamDatagramConnectionStatsRouterToClient* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.quality_relay_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.quality_relay_)
                : nullptr;
  _impl_.quality_e2e_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.quality_e2e_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, seconds_until_shutdown_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, seconds_until_shutdown_),
           offsetof(Impl_, flags_) -
               offsetof(Impl_, seconds_until_shutdown_) +
               sizeof(Impl_::flags_));

  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramConnectionStatsRouterToClient)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramConnectionStatsRouterToClient::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        ack_relay_{visibility, arena},
        legacy_ack_e2e_{visibility, arena} {}

inline void CMsgSteamDatagramConnectionStatsRouterToClient::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, quality_relay_),
           0,
           offsetof(Impl_, flags_) -
               offsetof(Impl_, quality_relay_) +
               sizeof(Impl_::flags_));
}
CMsgSteamDatagramConnectionStatsRouterToClient::~CMsgSteamDatagramConnectionStatsRouterToClient() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramConnectionStatsRouterToClient)
  SharedDtor(*this);
}
inline void CMsgSteamDatagramConnectionStatsRouterToClient::SharedDtor(MessageLite& self) {
  CMsgSteamDatagramConnectionStatsRouterToClient& this_ = static_cast<CMsgSteamDatagramConnectionStatsRouterToClient&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.quality_relay_;
  delete this_._impl_.quality_e2e_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CMsgSteamDatagramConnectionStatsRouterToClient::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CMsgSteamDatagramConnectionStatsRouterToClient(arena);
}
constexpr auto CMsgSteamDatagramConnectionStatsRouterToClient::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.ack_relay_) +
          decltype(CMsgSteamDatagramConnectionStatsRouterToClient::_impl_.ack_relay_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.legacy_ack_e2e_) +
          decltype(CMsgSteamDatagramConnectionStatsRouterToClient::_impl_.legacy_ack_e2e_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(CMsgSteamDatagramConnectionStatsRouterToClient), alignof(CMsgSteamDatagramConnectionStatsRouterToClient), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&CMsgSteamDatagramConnectionStatsRouterToClient::PlacementNew_,
                                 sizeof(CMsgSteamDatagramConnectionStatsRouterToClient),
                                 alignof(CMsgSteamDatagramConnectionStatsRouterToClient));
  }
}
constexpr auto CMsgSteamDatagramConnectionStatsRouterToClient::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CMsgSteamDatagramConnectionStatsRouterToClient_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CMsgSteamDatagramConnectionStatsRouterToClient::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CMsgSteamDatagramConnectionStatsRouterToClient>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CMsgSteamDatagramConnectionStatsRouterToClient::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CMsgSteamDatagramConnectionStatsRouterToClient>(), &CMsgSteamDatagramConnectionStatsRouterToClient::ByteSizeLong,
              &CMsgSteamDatagramConnectionStatsRouterToClient::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, _impl_._cached_size_),
          false,
      },
      &CMsgSteamDatagramConnectionStatsRouterToClient::kDescriptorMethods,
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        CMsgSteamDatagramConnectionStatsRouterToClient_class_data_ =
            CMsgSteamDatagramConnectionStatsRouterToClient::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL CMsgSteamDatagramConnectionStatsRouterToClient::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CMsgSteamDatagramConnectionStatsRouterToClient_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CMsgSteamDatagramConnectionStatsRouterToClient_class_data_.tc_table);
  return CMsgSteamDatagramConnectionStatsRouterToClient_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 12, 2, 0, 2>
CMsgSteamDatagramConnectionStatsRouterToClient::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, _impl_._has_bits_),
    0, // no _extensions_
    15, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294934556,  // skipmap
    offsetof(decltype(_table_), field_entries),
    12,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    CMsgSteamDatagramConnectionStatsRouterToClient_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CMsgSteamDatagramConnectionStatsRouterToClient>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.quality_relay_)}},
    // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.quality_e2e_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional uint32 seconds_until_shutdown = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.seconds_until_shutdown_), 2>(),
     {48, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.seconds_until_shutdown_)}},
    // optional fixed32 client_connection_id = 7;
    {::_pbi::TcParser::FastF32S1,
     {61, 3, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.client_connection_id_)}},
    // optional uint32 seq_num_r2c = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.seq_num_r2c_), 4>(),
     {64, 4, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.seq_num_r2c_)}},
    // optional uint32 seq_num_e2e = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.seq_num_e2e_), 5>(),
     {72, 5, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.seq_num_e2e_)}},
    // optional fixed32 migrate_request_ip = 10;
    {::_pbi::TcParser::FastF32S1,
     {85, 6, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.migrate_request_ip_)}},
    // optional uint32 migrate_request_port = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.migrate_request_port_), 7>(),
     {88, 7, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.migrate_request_port_)}},
    // optional uint32 scoring_penalty_relay_cluster = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.scoring_penalty_relay_cluster_), 8>(),
     {96, 8, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.scoring_penalty_relay_cluster_)}},
    // repeated fixed32 ack_relay = 13;
    {::_pbi::TcParser::FastF32R1,
     {109, 63, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.ack_relay_)}},
    // repeated fixed32 legacy_ack_e2e = 14;
    {::_pbi::TcParser::FastF32R1,
     {117, 63, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.legacy_ack_e2e_)}},
    // optional uint32 flags = 15;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.flags_), 9>(),
     {120, 9, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.flags_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.quality_relay_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.quality_e2e_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional uint32 seconds_until_shutdown = 6;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.seconds_until_shutdown_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional fixed32 client_connection_id = 7;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.client_connection_id_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional uint32 seq_num_r2c = 8;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.seq_num_r2c_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 seq_num_e2e = 9;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.seq_num_e2e_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional fixed32 migrate_request_ip = 10;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.migrate_request_ip_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional uint32 migrate_request_port = 11;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.migrate_request_port_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 scoring_penalty_relay_cluster = 12;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.scoring_penalty_relay_cluster_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // repeated fixed32 ack_relay = 13;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.ack_relay_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kFixed32)},
    // repeated fixed32 legacy_ack_e2e = 14;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.legacy_ack_e2e_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kFixed32)},
    // optional uint32 flags = 15;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.flags_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::CMsgSteamDatagramConnectionQuality>()},
      {::_pbi::TcParser::GetTable<::CMsgSteamDatagramConnectionQuality>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void CMsgSteamDatagramConnectionStatsRouterToClient::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramConnectionStatsRouterToClient)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ack_relay_.Clear();
  _impl_.legacy_ack_e2e_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.quality_relay_ != nullptr);
      _impl_.quality_relay_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.quality_e2e_ != nullptr);
      _impl_.quality_e2e_->Clear();
    }
  }
  if ((cached_has_bits & 0x000000fcu) != 0) {
    ::memset(&_impl_.seconds_until_shutdown_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.migrate_request_port_) -
        reinterpret_cast<char*>(&_impl_.seconds_until_shutdown_)) + sizeof(_impl_.migrate_request_port_));
  }
  if ((cached_has_bits & 0x00000300u) != 0) {
    ::memset(&_impl_.scoring_penalty_relay_cluster_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.flags_) -
        reinterpret_cast<char*>(&_impl_.scoring_penalty_relay_cluster_)) + sizeof(_impl_.flags_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramConnectionStatsRouterToClient::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CMsgSteamDatagramConnectionStatsRouterToClient& this_ = static_cast<const CMsgSteamDatagramConnectionStatsRouterToClient&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramConnectionStatsRouterToClient::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CMsgSteamDatagramConnectionStatsRouterToClient& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramConnectionStatsRouterToClient)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.quality_relay_, this_._impl_.quality_relay_->GetCachedSize(), target,
        stream);
  }

  // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.quality_e2e_, this_._impl_.quality_e2e_->GetCachedSize(), target,
        stream);
  }

  // optional uint32 seconds_until_shutdown = 6;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this_._internal_seconds_until_shutdown(), target);
  }

  // optional fixed32 client_connection_id = 7;
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        7, this_._internal_client_connection_id(), target);
  }

  // optional uint32 seq_num_r2c = 8;
  if ((cached_has_bits & 0x00000010u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        8, this_._internal_seq_num_r2c(), target);
  }

  // optional uint32 seq_num_e2e = 9;
  if ((cached_has_bits & 0x00000020u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        9, this_._internal_seq_num_e2e(), target);
  }

  // optional fixed32 migrate_request_ip = 10;
  if ((cached_has_bits & 0x00000040u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        10, this_._internal_migrate_request_ip(), target);
  }

  // optional uint32 migrate_request_port = 11;
  if ((cached_has_bits & 0x00000080u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        11, this_._internal_migrate_request_port(), target);
  }

  // optional uint32 scoring_penalty_relay_cluster = 12;
  if ((cached_has_bits & 0x00000100u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        12, this_._internal_scoring_penalty_relay_cluster(), target);
  }

  // repeated fixed32 ack_relay = 13;
  for (int i = 0, n = this_._internal_ack_relay_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        13, this_._internal_ack_relay().Get(i), target);
  }

  // repeated fixed32 legacy_ack_e2e = 14;
  for (int i = 0, n = this_._internal_legacy_ack_e2e_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        14, this_._internal_legacy_ack_e2e().Get(i), target);
  }

  // optional uint32 flags = 15;
  if ((cached_has_bits & 0x00000200u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        15, this_._internal_flags(), target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramConnectionStatsRouterToClient)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CMsgSteamDatagramConnectionStatsRouterToClient::ByteSizeLong(const MessageLite& base) {
  const CMsgSteamDatagramConnectionStatsRouterToClient& this_ = static_cast<const CMsgSteamDatagramConnectionStatsRouterToClient&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t CMsgSteamDatagramConnectionStatsRouterToClient::ByteSizeLong() const {
  const CMsgSteamDatagramConnectionStatsRouterToClient& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramConnectionStatsRouterToClient)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated fixed32 ack_relay = 13;
    {
      std::size_t data_size = std::size_t{4} *
          ::_pbi::FromIntSize(this_._internal_ack_relay_size());
      std::size_t tag_size = std::size_t{1} *
          ::_pbi::FromIntSize(this_._internal_ack_relay_size());
      total_size += tag_size + data_size;
    }
    // repeated fixed32 legacy_ack_e2e = 14;
    {
      std::size_t data_size = std::size_t{4} *
          ::_pbi::FromIntSize(this_._internal_legacy_ack_e2e_size());
      std::size_t tag_size = std::size_t{1} *
          ::_pbi::FromIntSize(this_._internal_legacy_ack_e2e_size());
      total_size += tag_size + data_size;
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += ::absl::popcount(0x00000048u & cached_has_bits) * 5;
  if ((cached_has_bits & 0x000000b7u) != 0) {
    // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.quality_relay_);
    }
    // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.quality_e2e_);
    }
    // optional uint32 seconds_until_shutdown = 6;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_seconds_until_shutdown());
    }
    // optional uint32 seq_num_r2c = 8;
    if ((cached_has_bits & 0x00000010u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_seq_num_r2c());
    }
    // optional uint32 seq_num_e2e = 9;
    if ((cached_has_bits & 0x00000020u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_seq_num_e2e());
    }
    // optional uint32 migrate_request_port = 11;
    if ((cached_has_bits & 0x00000080u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_migrate_request_port());
    }
  }
  if ((cached_has_bits & 0x00000300u) != 0) {
    // optional uint32 scoring_penalty_relay_cluster = 12;
    if ((cached_has_bits & 0x00000100u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_scoring_penalty_relay_cluster());
    }
    // optional uint32 flags = 15;
    if ((cached_has_bits & 0x00000200u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_flags());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void CMsgSteamDatagramConnectionStatsRouterToClient::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramConnectionStatsRouterToClient*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramConnectionStatsRouterToClient&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramConnectionStatsRouterToClient)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_ack_relay()->MergeFrom(from._internal_ack_relay());
  _this->_internal_mutable_legacy_ack_e2e()->MergeFrom(from._internal_legacy_ack_e2e());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.quality_relay_ != nullptr);
      if (_this->_impl_.quality_relay_ == nullptr) {
        _this->_impl_.quality_relay_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.quality_relay_);
      } else {
        _this->_impl_.quality_relay_->MergeFrom(*from._impl_.quality_relay_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.quality_e2e_ != nullptr);
      if (_this->_impl_.quality_e2e_ == nullptr) {
        _this->_impl_.quality_e2e_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.quality_e2e_);
      } else {
        _this->_impl_.quality_e2e_->MergeFrom(*from._impl_.quality_e2e_);
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_impl_.seconds_until_shutdown_ = from._impl_.seconds_until_shutdown_;
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _this->_impl_.client_connection_id_ = from._impl_.client_connection_id_;
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _this->_impl_.seq_num_r2c_ = from._impl_.seq_num_r2c_;
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      _this->_impl_.seq_num_e2e_ = from._impl_.seq_num_e2e_;
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      _this->_impl_.migrate_request_ip_ = from._impl_.migrate_request_ip_;
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      _this->_impl_.migrate_request_port_ = from._impl_.migrate_request_port_;
    }
  }
  if ((cached_has_bits & 0x00000300u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      _this->_impl_.scoring_penalty_relay_cluster_ = from._impl_.scoring_penalty_relay_cluster_;
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      _this->_impl_.flags_ = from._impl_.flags_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramConnectionStatsRouterToClient::CopyFrom(const CMsgSteamDatagramConnectionStatsRouterToClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramConnectionStatsRouterToClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CMsgSteamDatagramConnectionStatsRouterToClient::InternalSwap(CMsgSteamDatagramConnectionStatsRouterToClient* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.ack_relay_.InternalSwap(&other->_impl_.ack_relay_);
  _impl_.legacy_ack_e2e_.InternalSwap(&other->_impl_.legacy_ack_e2e_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.flags_)
      + sizeof(CMsgSteamDatagramConnectionStatsRouterToClient::_impl_.flags_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToClient, _impl_.quality_relay_)>(
          reinterpret_cast<char*>(&_impl_.quality_relay_),
          reinterpret_cast<char*>(&other->_impl_.quality_relay_));
}

::google::protobuf::Metadata CMsgSteamDatagramConnectionStatsRouterToClient::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CMsgSteamDatagramConnectionStatsRouterToServer::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CMsgSteamDatagramConnectionStatsRouterToServer>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, _impl_._has_bits_);
};

void CMsgSteamDatagramConnectionStatsRouterToServer::clear_quality_relay() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.quality_relay_ != nullptr) _impl_.quality_relay_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CMsgSteamDatagramConnectionStatsRouterToServer::clear_quality_e2e() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.quality_e2e_ != nullptr) _impl_.quality_e2e_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CMsgSteamDatagramConnectionStatsRouterToServer::CMsgSteamDatagramConnectionStatsRouterToServer(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramConnectionStatsRouterToServer_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramConnectionStatsRouterToServer)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramConnectionStatsRouterToServer::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::CMsgSteamDatagramConnectionStatsRouterToServer& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        ack_relay_{visibility, arena, from.ack_relay_},
        legacy_ack_e2e_{visibility, arena, from.legacy_ack_e2e_},
        client_identity_string_(arena, from.client_identity_string_) {}

CMsgSteamDatagramConnectionStatsRouterToServer::CMsgSteamDatagramConnectionStatsRouterToServer(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const CMsgSteamDatagramConnectionStatsRouterToServer& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramConnectionStatsRouterToServer_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CMsgSteamDatagramConnectionStatsRouterToServer* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.quality_relay_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.quality_relay_)
                : nullptr;
  _impl_.quality_e2e_ = ((cached_has_bits & 0x00000004u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.quality_e2e_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, seq_num_r2s_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, seq_num_r2s_),
           offsetof(Impl_, routing_secret_) -
               offsetof(Impl_, seq_num_r2s_) +
               sizeof(Impl_::routing_secret_));

  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramConnectionStatsRouterToServer)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramConnectionStatsRouterToServer::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        ack_relay_{visibility, arena},
        legacy_ack_e2e_{visibility, arena},
        client_identity_string_(arena) {}

inline void CMsgSteamDatagramConnectionStatsRouterToServer::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, quality_relay_),
           0,
           offsetof(Impl_, routing_secret_) -
               offsetof(Impl_, quality_relay_) +
               sizeof(Impl_::routing_secret_));
}
CMsgSteamDatagramConnectionStatsRouterToServer::~CMsgSteamDatagramConnectionStatsRouterToServer() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramConnectionStatsRouterToServer)
  SharedDtor(*this);
}
inline void CMsgSteamDatagramConnectionStatsRouterToServer::SharedDtor(MessageLite& self) {
  CMsgSteamDatagramConnectionStatsRouterToServer& this_ = static_cast<CMsgSteamDatagramConnectionStatsRouterToServer&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.client_identity_string_.Destroy();
  delete this_._impl_.quality_relay_;
  delete this_._impl_.quality_e2e_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CMsgSteamDatagramConnectionStatsRouterToServer::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CMsgSteamDatagramConnectionStatsRouterToServer(arena);
}
constexpr auto CMsgSteamDatagramConnectionStatsRouterToServer::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.ack_relay_) +
          decltype(CMsgSteamDatagramConnectionStatsRouterToServer::_impl_.ack_relay_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.legacy_ack_e2e_) +
          decltype(CMsgSteamDatagramConnectionStatsRouterToServer::_impl_.legacy_ack_e2e_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(CMsgSteamDatagramConnectionStatsRouterToServer), alignof(CMsgSteamDatagramConnectionStatsRouterToServer), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&CMsgSteamDatagramConnectionStatsRouterToServer::PlacementNew_,
                                 sizeof(CMsgSteamDatagramConnectionStatsRouterToServer),
                                 alignof(CMsgSteamDatagramConnectionStatsRouterToServer));
  }
}
constexpr auto CMsgSteamDatagramConnectionStatsRouterToServer::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CMsgSteamDatagramConnectionStatsRouterToServer_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CMsgSteamDatagramConnectionStatsRouterToServer::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CMsgSteamDatagramConnectionStatsRouterToServer>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CMsgSteamDatagramConnectionStatsRouterToServer::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CMsgSteamDatagramConnectionStatsRouterToServer>(), &CMsgSteamDatagramConnectionStatsRouterToServer::ByteSizeLong,
              &CMsgSteamDatagramConnectionStatsRouterToServer::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, _impl_._cached_size_),
          false,
      },
      &CMsgSteamDatagramConnectionStatsRouterToServer::kDescriptorMethods,
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        CMsgSteamDatagramConnectionStatsRouterToServer_class_data_ =
            CMsgSteamDatagramConnectionStatsRouterToServer::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL CMsgSteamDatagramConnectionStatsRouterToServer::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CMsgSteamDatagramConnectionStatsRouterToServer_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CMsgSteamDatagramConnectionStatsRouterToServer_class_data_.tc_table);
  return CMsgSteamDatagramConnectionStatsRouterToServer_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 13, 2, 85, 2>
CMsgSteamDatagramConnectionStatsRouterToServer::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, _impl_._has_bits_),
    0, // no _extensions_
    15, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294934540,  // skipmap
    offsetof(decltype(_table_), field_entries),
    13,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    CMsgSteamDatagramConnectionStatsRouterToServer_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CMsgSteamDatagramConnectionStatsRouterToServer>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.quality_relay_)}},
    // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 2, 1, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.quality_e2e_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional uint32 seq_num_r2s = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.seq_num_r2s_), 3>(),
     {40, 3, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.seq_num_r2s_)}},
    // optional uint32 seq_num_e2e = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.seq_num_e2e_), 4>(),
     {48, 4, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.seq_num_e2e_)}},
    // optional fixed64 legacy_client_steam_id = 7;
    {::_pbi::TcParser::FastF64S1,
     {57, 5, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.legacy_client_steam_id_)}},
    // optional uint32 relay_session_id = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.relay_session_id_), 6>(),
     {64, 6, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.relay_session_id_)}},
    // optional fixed32 client_connection_id = 9;
    {::_pbi::TcParser::FastF32S1,
     {77, 7, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.client_connection_id_)}},
    // repeated fixed32 ack_relay = 10;
    {::_pbi::TcParser::FastF32R1,
     {85, 63, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.ack_relay_)}},
    // repeated fixed32 legacy_ack_e2e = 11;
    {::_pbi::TcParser::FastF32R1,
     {93, 63, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.legacy_ack_e2e_)}},
    // optional uint32 flags = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.flags_), 8>(),
     {96, 8, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.flags_)}},
    // optional fixed32 server_connection_id = 13;
    {::_pbi::TcParser::FastF32S1,
     {109, 9, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.server_connection_id_)}},
    // optional fixed64 routing_secret = 14;
    {::_pbi::TcParser::FastF64S1,
     {113, 10, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.routing_secret_)}},
    // optional string client_identity_string = 15;
    {::_pbi::TcParser::FastSS1,
     {122, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.client_identity_string_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.quality_relay_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.quality_e2e_), _Internal::kHasBitsOffset + 2, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional uint32 seq_num_r2s = 5;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.seq_num_r2s_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 seq_num_e2e = 6;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.seq_num_e2e_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional fixed64 legacy_client_steam_id = 7;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.legacy_client_steam_id_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
    // optional uint32 relay_session_id = 8;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.relay_session_id_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional fixed32 client_connection_id = 9;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.client_connection_id_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // repeated fixed32 ack_relay = 10;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.ack_relay_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kFixed32)},
    // repeated fixed32 legacy_ack_e2e = 11;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.legacy_ack_e2e_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kFixed32)},
    // optional uint32 flags = 12;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.flags_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional fixed32 server_connection_id = 13;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.server_connection_id_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional fixed64 routing_secret = 14;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.routing_secret_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
    // optional string client_identity_string = 15;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.client_identity_string_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::CMsgSteamDatagramConnectionQuality>()},
      {::_pbi::TcParser::GetTable<::CMsgSteamDatagramConnectionQuality>()},
  }},
  {{
    "\56\0\0\0\0\0\0\0\0\0\0\0\0\26\0\0"
    "CMsgSteamDatagramConnectionStatsRouterToServer"
    "client_identity_string"
  }},
};
PROTOBUF_NOINLINE void CMsgSteamDatagramConnectionStatsRouterToServer::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramConnectionStatsRouterToServer)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ack_relay_.Clear();
  _impl_.legacy_ack_e2e_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.client_identity_string_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.quality_relay_ != nullptr);
      _impl_.quality_relay_->Clear();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(_impl_.quality_e2e_ != nullptr);
      _impl_.quality_e2e_->Clear();
    }
  }
  if ((cached_has_bits & 0x000000f8u) != 0) {
    ::memset(&_impl_.seq_num_r2s_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.client_connection_id_) -
        reinterpret_cast<char*>(&_impl_.seq_num_r2s_)) + sizeof(_impl_.client_connection_id_));
  }
  if ((cached_has_bits & 0x00000700u) != 0) {
    ::memset(&_impl_.flags_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.routing_secret_) -
        reinterpret_cast<char*>(&_impl_.flags_)) + sizeof(_impl_.routing_secret_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramConnectionStatsRouterToServer::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CMsgSteamDatagramConnectionStatsRouterToServer& this_ = static_cast<const CMsgSteamDatagramConnectionStatsRouterToServer&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramConnectionStatsRouterToServer::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CMsgSteamDatagramConnectionStatsRouterToServer& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramConnectionStatsRouterToServer)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.quality_relay_, this_._impl_.quality_relay_->GetCachedSize(), target,
        stream);
  }

  // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.quality_e2e_, this_._impl_.quality_e2e_->GetCachedSize(), target,
        stream);
  }

  // optional uint32 seq_num_r2s = 5;
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this_._internal_seq_num_r2s(), target);
  }

  // optional uint32 seq_num_e2e = 6;
  if ((cached_has_bits & 0x00000010u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this_._internal_seq_num_e2e(), target);
  }

  // optional fixed64 legacy_client_steam_id = 7;
  if ((cached_has_bits & 0x00000020u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        7, this_._internal_legacy_client_steam_id(), target);
  }

  // optional uint32 relay_session_id = 8;
  if ((cached_has_bits & 0x00000040u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        8, this_._internal_relay_session_id(), target);
  }

  // optional fixed32 client_connection_id = 9;
  if ((cached_has_bits & 0x00000080u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        9, this_._internal_client_connection_id(), target);
  }

  // repeated fixed32 ack_relay = 10;
  for (int i = 0, n = this_._internal_ack_relay_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        10, this_._internal_ack_relay().Get(i), target);
  }

  // repeated fixed32 legacy_ack_e2e = 11;
  for (int i = 0, n = this_._internal_legacy_ack_e2e_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        11, this_._internal_legacy_ack_e2e().Get(i), target);
  }

  // optional uint32 flags = 12;
  if ((cached_has_bits & 0x00000100u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        12, this_._internal_flags(), target);
  }

  // optional fixed32 server_connection_id = 13;
  if ((cached_has_bits & 0x00000200u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        13, this_._internal_server_connection_id(), target);
  }

  // optional fixed64 routing_secret = 14;
  if ((cached_has_bits & 0x00000400u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        14, this_._internal_routing_secret(), target);
  }

  // optional string client_identity_string = 15;
  if ((cached_has_bits & 0x00000001u) != 0) {
    const std::string& _s = this_._internal_client_identity_string();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CMsgSteamDatagramConnectionStatsRouterToServer.client_identity_string");
    target = stream->WriteStringMaybeAliased(15, _s, target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramConnectionStatsRouterToServer)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CMsgSteamDatagramConnectionStatsRouterToServer::ByteSizeLong(const MessageLite& base) {
  const CMsgSteamDatagramConnectionStatsRouterToServer& this_ = static_cast<const CMsgSteamDatagramConnectionStatsRouterToServer&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t CMsgSteamDatagramConnectionStatsRouterToServer::ByteSizeLong() const {
  const CMsgSteamDatagramConnectionStatsRouterToServer& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramConnectionStatsRouterToServer)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated fixed32 ack_relay = 10;
    {
      std::size_t data_size = std::size_t{4} *
          ::_pbi::FromIntSize(this_._internal_ack_relay_size());
      std::size_t tag_size = std::size_t{1} *
          ::_pbi::FromIntSize(this_._internal_ack_relay_size());
      total_size += tag_size + data_size;
    }
    // repeated fixed32 legacy_ack_e2e = 11;
    {
      std::size_t data_size = std::size_t{4} *
          ::_pbi::FromIntSize(this_._internal_legacy_ack_e2e_size());
      std::size_t tag_size = std::size_t{1} *
          ::_pbi::FromIntSize(this_._internal_legacy_ack_e2e_size());
      total_size += tag_size + data_size;
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += ::absl::popcount(0x00000420u & cached_has_bits) * 9;
  total_size += ::absl::popcount(0x00000280u & cached_has_bits) * 5;
  if ((cached_has_bits & 0x0000005fu) != 0) {
    // optional string client_identity_string = 15;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_client_identity_string());
    }
    // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.quality_relay_);
    }
    // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.quality_e2e_);
    }
    // optional uint32 seq_num_r2s = 5;
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_seq_num_r2s());
    }
    // optional uint32 seq_num_e2e = 6;
    if ((cached_has_bits & 0x00000010u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_seq_num_e2e());
    }
    // optional uint32 relay_session_id = 8;
    if ((cached_has_bits & 0x00000040u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_relay_session_id());
    }
  }
   {
    // optional uint32 flags = 12;
    if ((cached_has_bits & 0x00000100u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_flags());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void CMsgSteamDatagramConnectionStatsRouterToServer::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramConnectionStatsRouterToServer*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramConnectionStatsRouterToServer&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramConnectionStatsRouterToServer)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_ack_relay()->MergeFrom(from._internal_ack_relay());
  _this->_internal_mutable_legacy_ack_e2e()->MergeFrom(from._internal_legacy_ack_e2e());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_internal_set_client_identity_string(from._internal_client_identity_string());
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.quality_relay_ != nullptr);
      if (_this->_impl_.quality_relay_ == nullptr) {
        _this->_impl_.quality_relay_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.quality_relay_);
      } else {
        _this->_impl_.quality_relay_->MergeFrom(*from._impl_.quality_relay_);
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(from._impl_.quality_e2e_ != nullptr);
      if (_this->_impl_.quality_e2e_ == nullptr) {
        _this->_impl_.quality_e2e_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.quality_e2e_);
      } else {
        _this->_impl_.quality_e2e_->MergeFrom(*from._impl_.quality_e2e_);
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _this->_impl_.seq_num_r2s_ = from._impl_.seq_num_r2s_;
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _this->_impl_.seq_num_e2e_ = from._impl_.seq_num_e2e_;
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      _this->_impl_.legacy_client_steam_id_ = from._impl_.legacy_client_steam_id_;
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      _this->_impl_.relay_session_id_ = from._impl_.relay_session_id_;
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      _this->_impl_.client_connection_id_ = from._impl_.client_connection_id_;
    }
  }
  if ((cached_has_bits & 0x00000700u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      _this->_impl_.flags_ = from._impl_.flags_;
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      _this->_impl_.server_connection_id_ = from._impl_.server_connection_id_;
    }
    if ((cached_has_bits & 0x00000400u) != 0) {
      _this->_impl_.routing_secret_ = from._impl_.routing_secret_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramConnectionStatsRouterToServer::CopyFrom(const CMsgSteamDatagramConnectionStatsRouterToServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramConnectionStatsRouterToServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CMsgSteamDatagramConnectionStatsRouterToServer::InternalSwap(CMsgSteamDatagramConnectionStatsRouterToServer* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.ack_relay_.InternalSwap(&other->_impl_.ack_relay_);
  _impl_.legacy_ack_e2e_.InternalSwap(&other->_impl_.legacy_ack_e2e_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.client_identity_string_, &other->_impl_.client_identity_string_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.routing_secret_)
      + sizeof(CMsgSteamDatagramConnectionStatsRouterToServer::_impl_.routing_secret_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsRouterToServer, _impl_.quality_relay_)>(
          reinterpret_cast<char*>(&_impl_.quality_relay_),
          reinterpret_cast<char*>(&other->_impl_.quality_relay_));
}

::google::protobuf::Metadata CMsgSteamDatagramConnectionStatsRouterToServer::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CMsgSteamDatagramConnectionStatsServerToRouter::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CMsgSteamDatagramConnectionStatsServerToRouter>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, _impl_._has_bits_);
};

void CMsgSteamDatagramConnectionStatsServerToRouter::clear_quality_relay() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.quality_relay_ != nullptr) _impl_.quality_relay_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CMsgSteamDatagramConnectionStatsServerToRouter::clear_quality_e2e() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.quality_e2e_ != nullptr) _impl_.quality_e2e_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
CMsgSteamDatagramConnectionStatsServerToRouter::CMsgSteamDatagramConnectionStatsServerToRouter(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramConnectionStatsServerToRouter_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramConnectionStatsServerToRouter)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramConnectionStatsServerToRouter::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::CMsgSteamDatagramConnectionStatsServerToRouter& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        ack_relay_{visibility, arena, from.ack_relay_},
        legacy_ack_e2e_{visibility, arena, from.legacy_ack_e2e_} {}

CMsgSteamDatagramConnectionStatsServerToRouter::CMsgSteamDatagramConnectionStatsServerToRouter(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const CMsgSteamDatagramConnectionStatsServerToRouter& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramConnectionStatsServerToRouter_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CMsgSteamDatagramConnectionStatsServerToRouter* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.quality_relay_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.quality_relay_)
                : nullptr;
  _impl_.quality_e2e_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.quality_e2e_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, seq_num_s2r_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, seq_num_s2r_),
           offsetof(Impl_, server_connection_id_) -
               offsetof(Impl_, seq_num_s2r_) +
               sizeof(Impl_::server_connection_id_));

  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramConnectionStatsServerToRouter)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramConnectionStatsServerToRouter::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        ack_relay_{visibility, arena},
        legacy_ack_e2e_{visibility, arena} {}

inline void CMsgSteamDatagramConnectionStatsServerToRouter::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, quality_relay_),
           0,
           offsetof(Impl_, server_connection_id_) -
               offsetof(Impl_, quality_relay_) +
               sizeof(Impl_::server_connection_id_));
}
CMsgSteamDatagramConnectionStatsServerToRouter::~CMsgSteamDatagramConnectionStatsServerToRouter() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramConnectionStatsServerToRouter)
  SharedDtor(*this);
}
inline void CMsgSteamDatagramConnectionStatsServerToRouter::SharedDtor(MessageLite& self) {
  CMsgSteamDatagramConnectionStatsServerToRouter& this_ = static_cast<CMsgSteamDatagramConnectionStatsServerToRouter&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.quality_relay_;
  delete this_._impl_.quality_e2e_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CMsgSteamDatagramConnectionStatsServerToRouter::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CMsgSteamDatagramConnectionStatsServerToRouter(arena);
}
constexpr auto CMsgSteamDatagramConnectionStatsServerToRouter::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.ack_relay_) +
          decltype(CMsgSteamDatagramConnectionStatsServerToRouter::_impl_.ack_relay_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.legacy_ack_e2e_) +
          decltype(CMsgSteamDatagramConnectionStatsServerToRouter::_impl_.legacy_ack_e2e_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(CMsgSteamDatagramConnectionStatsServerToRouter), alignof(CMsgSteamDatagramConnectionStatsServerToRouter), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&CMsgSteamDatagramConnectionStatsServerToRouter::PlacementNew_,
                                 sizeof(CMsgSteamDatagramConnectionStatsServerToRouter),
                                 alignof(CMsgSteamDatagramConnectionStatsServerToRouter));
  }
}
constexpr auto CMsgSteamDatagramConnectionStatsServerToRouter::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CMsgSteamDatagramConnectionStatsServerToRouter_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CMsgSteamDatagramConnectionStatsServerToRouter::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CMsgSteamDatagramConnectionStatsServerToRouter>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CMsgSteamDatagramConnectionStatsServerToRouter::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CMsgSteamDatagramConnectionStatsServerToRouter>(), &CMsgSteamDatagramConnectionStatsServerToRouter::ByteSizeLong,
              &CMsgSteamDatagramConnectionStatsServerToRouter::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, _impl_._cached_size_),
          false,
      },
      &CMsgSteamDatagramConnectionStatsServerToRouter::kDescriptorMethods,
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        CMsgSteamDatagramConnectionStatsServerToRouter_class_data_ =
            CMsgSteamDatagramConnectionStatsServerToRouter::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL CMsgSteamDatagramConnectionStatsServerToRouter::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CMsgSteamDatagramConnectionStatsServerToRouter_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CMsgSteamDatagramConnectionStatsServerToRouter_class_data_.tc_table);
  return CMsgSteamDatagramConnectionStatsServerToRouter_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 2, 0, 2>
CMsgSteamDatagramConnectionStatsServerToRouter::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, _impl_._has_bits_),
    0, // no _extensions_
    11, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294965264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    CMsgSteamDatagramConnectionStatsServerToRouter_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CMsgSteamDatagramConnectionStatsServerToRouter>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.quality_relay_)}},
    // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.quality_e2e_)}},
    // optional uint32 seq_num_s2r = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.seq_num_s2r_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.seq_num_s2r_)}},
    // optional uint32 seq_num_e2e = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.seq_num_e2e_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.seq_num_e2e_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional uint32 relay_session_id = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.relay_session_id_), 4>(),
     {48, 4, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.relay_session_id_)}},
    // optional fixed32 client_connection_id = 7;
    {::_pbi::TcParser::FastF32S1,
     {61, 5, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.client_connection_id_)}},
    // repeated fixed32 ack_relay = 8;
    {::_pbi::TcParser::FastF32R1,
     {69, 63, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.ack_relay_)}},
    // repeated fixed32 legacy_ack_e2e = 9;
    {::_pbi::TcParser::FastF32R1,
     {77, 63, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.legacy_ack_e2e_)}},
    // optional uint32 flags = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.flags_), 6>(),
     {80, 6, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.flags_)}},
    // optional fixed32 server_connection_id = 11;
    {::_pbi::TcParser::FastF32S1,
     {93, 7, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.server_connection_id_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.quality_relay_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.quality_e2e_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional uint32 seq_num_s2r = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.seq_num_s2r_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 seq_num_e2e = 4;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.seq_num_e2e_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 relay_session_id = 6;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.relay_session_id_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional fixed32 client_connection_id = 7;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.client_connection_id_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // repeated fixed32 ack_relay = 8;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.ack_relay_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kFixed32)},
    // repeated fixed32 legacy_ack_e2e = 9;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.legacy_ack_e2e_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kFixed32)},
    // optional uint32 flags = 10;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.flags_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional fixed32 server_connection_id = 11;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.server_connection_id_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::CMsgSteamDatagramConnectionQuality>()},
      {::_pbi::TcParser::GetTable<::CMsgSteamDatagramConnectionQuality>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void CMsgSteamDatagramConnectionStatsServerToRouter::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramConnectionStatsServerToRouter)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ack_relay_.Clear();
  _impl_.legacy_ack_e2e_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.quality_relay_ != nullptr);
      _impl_.quality_relay_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.quality_e2e_ != nullptr);
      _impl_.quality_e2e_->Clear();
    }
  }
  if ((cached_has_bits & 0x000000fcu) != 0) {
    ::memset(&_impl_.seq_num_s2r_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.server_connection_id_) -
        reinterpret_cast<char*>(&_impl_.seq_num_s2r_)) + sizeof(_impl_.server_connection_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramConnectionStatsServerToRouter::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CMsgSteamDatagramConnectionStatsServerToRouter& this_ = static_cast<const CMsgSteamDatagramConnectionStatsServerToRouter&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramConnectionStatsServerToRouter::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CMsgSteamDatagramConnectionStatsServerToRouter& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramConnectionStatsServerToRouter)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.quality_relay_, this_._impl_.quality_relay_->GetCachedSize(), target,
        stream);
  }

  // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.quality_e2e_, this_._impl_.quality_e2e_->GetCachedSize(), target,
        stream);
  }

  // optional uint32 seq_num_s2r = 3;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this_._internal_seq_num_s2r(), target);
  }

  // optional uint32 seq_num_e2e = 4;
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this_._internal_seq_num_e2e(), target);
  }

  // optional uint32 relay_session_id = 6;
  if ((cached_has_bits & 0x00000010u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this_._internal_relay_session_id(), target);
  }

  // optional fixed32 client_connection_id = 7;
  if ((cached_has_bits & 0x00000020u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        7, this_._internal_client_connection_id(), target);
  }

  // repeated fixed32 ack_relay = 8;
  for (int i = 0, n = this_._internal_ack_relay_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        8, this_._internal_ack_relay().Get(i), target);
  }

  // repeated fixed32 legacy_ack_e2e = 9;
  for (int i = 0, n = this_._internal_legacy_ack_e2e_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        9, this_._internal_legacy_ack_e2e().Get(i), target);
  }

  // optional uint32 flags = 10;
  if ((cached_has_bits & 0x00000040u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        10, this_._internal_flags(), target);
  }

  // optional fixed32 server_connection_id = 11;
  if ((cached_has_bits & 0x00000080u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        11, this_._internal_server_connection_id(), target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramConnectionStatsServerToRouter)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CMsgSteamDatagramConnectionStatsServerToRouter::ByteSizeLong(const MessageLite& base) {
  const CMsgSteamDatagramConnectionStatsServerToRouter& this_ = static_cast<const CMsgSteamDatagramConnectionStatsServerToRouter&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t CMsgSteamDatagramConnectionStatsServerToRouter::ByteSizeLong() const {
  const CMsgSteamDatagramConnectionStatsServerToRouter& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramConnectionStatsServerToRouter)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated fixed32 ack_relay = 8;
    {
      std::size_t data_size = std::size_t{4} *
          ::_pbi::FromIntSize(this_._internal_ack_relay_size());
      std::size_t tag_size = std::size_t{1} *
          ::_pbi::FromIntSize(this_._internal_ack_relay_size());
      total_size += tag_size + data_size;
    }
    // repeated fixed32 legacy_ack_e2e = 9;
    {
      std::size_t data_size = std::size_t{4} *
          ::_pbi::FromIntSize(this_._internal_legacy_ack_e2e_size());
      std::size_t tag_size = std::size_t{1} *
          ::_pbi::FromIntSize(this_._internal_legacy_ack_e2e_size());
      total_size += tag_size + data_size;
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += ::absl::popcount(0x000000a0u & cached_has_bits) * 5;
  if ((cached_has_bits & 0x0000005fu) != 0) {
    // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.quality_relay_);
    }
    // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.quality_e2e_);
    }
    // optional uint32 seq_num_s2r = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_seq_num_s2r());
    }
    // optional uint32 seq_num_e2e = 4;
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_seq_num_e2e());
    }
    // optional uint32 relay_session_id = 6;
    if ((cached_has_bits & 0x00000010u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_relay_session_id());
    }
    // optional uint32 flags = 10;
    if ((cached_has_bits & 0x00000040u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_flags());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void CMsgSteamDatagramConnectionStatsServerToRouter::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramConnectionStatsServerToRouter*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramConnectionStatsServerToRouter&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramConnectionStatsServerToRouter)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_ack_relay()->MergeFrom(from._internal_ack_relay());
  _this->_internal_mutable_legacy_ack_e2e()->MergeFrom(from._internal_legacy_ack_e2e());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.quality_relay_ != nullptr);
      if (_this->_impl_.quality_relay_ == nullptr) {
        _this->_impl_.quality_relay_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.quality_relay_);
      } else {
        _this->_impl_.quality_relay_->MergeFrom(*from._impl_.quality_relay_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.quality_e2e_ != nullptr);
      if (_this->_impl_.quality_e2e_ == nullptr) {
        _this->_impl_.quality_e2e_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.quality_e2e_);
      } else {
        _this->_impl_.quality_e2e_->MergeFrom(*from._impl_.quality_e2e_);
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_impl_.seq_num_s2r_ = from._impl_.seq_num_s2r_;
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _this->_impl_.seq_num_e2e_ = from._impl_.seq_num_e2e_;
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _this->_impl_.relay_session_id_ = from._impl_.relay_session_id_;
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      _this->_impl_.client_connection_id_ = from._impl_.client_connection_id_;
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      _this->_impl_.flags_ = from._impl_.flags_;
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      _this->_impl_.server_connection_id_ = from._impl_.server_connection_id_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramConnectionStatsServerToRouter::CopyFrom(const CMsgSteamDatagramConnectionStatsServerToRouter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramConnectionStatsServerToRouter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CMsgSteamDatagramConnectionStatsServerToRouter::InternalSwap(CMsgSteamDatagramConnectionStatsServerToRouter* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.ack_relay_.InternalSwap(&other->_impl_.ack_relay_);
  _impl_.legacy_ack_e2e_.InternalSwap(&other->_impl_.legacy_ack_e2e_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.server_connection_id_)
      + sizeof(CMsgSteamDatagramConnectionStatsServerToRouter::_impl_.server_connection_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsServerToRouter, _impl_.quality_relay_)>(
          reinterpret_cast<char*>(&_impl_.quality_relay_),
          reinterpret_cast<char*>(&other->_impl_.quality_relay_));
}

::google::protobuf::Metadata CMsgSteamDatagramConnectionStatsServerToRouter::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CMsgSteamDatagramP2PSessionRequestBody_EncryptedData::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CMsgSteamDatagramP2PSessionRequestBody_EncryptedData>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody_EncryptedData, _impl_._has_bits_);
};

CMsgSteamDatagramP2PSessionRequestBody_EncryptedData::CMsgSteamDatagramP2PSessionRequestBody_EncryptedData(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramP2PSessionRequestBody_EncryptedData_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramP2PSessionRequestBody.EncryptedData)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramP2PSessionRequestBody_EncryptedData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::CMsgSteamDatagramP2PSessionRequestBody_EncryptedData& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        peer_identity_string_(arena, from.peer_identity_string_) {}

CMsgSteamDatagramP2PSessionRequestBody_EncryptedData::CMsgSteamDatagramP2PSessionRequestBody_EncryptedData(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const CMsgSteamDatagramP2PSessionRequestBody_EncryptedData& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramP2PSessionRequestBody_EncryptedData_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CMsgSteamDatagramP2PSessionRequestBody_EncryptedData* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramP2PSessionRequestBody.EncryptedData)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramP2PSessionRequestBody_EncryptedData::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        peer_identity_string_(arena) {}

inline void CMsgSteamDatagramP2PSessionRequestBody_EncryptedData::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
CMsgSteamDatagramP2PSessionRequestBody_EncryptedData::~CMsgSteamDatagramP2PSessionRequestBody_EncryptedData() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramP2PSessionRequestBody.EncryptedData)
  SharedDtor(*this);
}
inline void CMsgSteamDatagramP2PSessionRequestBody_EncryptedData::SharedDtor(MessageLite& self) {
  CMsgSteamDatagramP2PSessionRequestBody_EncryptedData& this_ = static_cast<CMsgSteamDatagramP2PSessionRequestBody_EncryptedData&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.peer_identity_string_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CMsgSteamDatagramP2PSessionRequestBody_EncryptedData::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CMsgSteamDatagramP2PSessionRequestBody_EncryptedData(arena);
}
constexpr auto CMsgSteamDatagramP2PSessionRequestBody_EncryptedData::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(CMsgSteamDatagramP2PSessionRequestBody_EncryptedData),
                                            alignof(CMsgSteamDatagramP2PSessionRequestBody_EncryptedData));
}
constexpr auto CMsgSteamDatagramP2PSessionRequestBody_EncryptedData::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CMsgSteamDatagramP2PSessionRequestBody_EncryptedData_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CMsgSteamDatagramP2PSessionRequestBody_EncryptedData::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CMsgSteamDatagramP2PSessionRequestBody_EncryptedData>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CMsgSteamDatagramP2PSessionRequestBody_EncryptedData::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CMsgSteamDatagramP2PSessionRequestBody_EncryptedData>(), &CMsgSteamDatagramP2PSessionRequestBody_EncryptedData::ByteSizeLong,
              &CMsgSteamDatagramP2PSessionRequestBody_EncryptedData::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody_EncryptedData, _impl_._cached_size_),
          false,
      },
      &CMsgSteamDatagramP2PSessionRequestBody_EncryptedData::kDescriptorMethods,
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        CMsgSteamDatagramP2PSessionRequestBody_EncryptedData_class_data_ =
            CMsgSteamDatagramP2PSessionRequestBody_EncryptedData::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL CMsgSteamDatagramP2PSessionRequestBody_EncryptedData::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CMsgSteamDatagramP2PSessionRequestBody_EncryptedData_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CMsgSteamDatagramP2PSessionRequestBody_EncryptedData_class_data_.tc_table);
  return CMsgSteamDatagramP2PSessionRequestBody_EncryptedData_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 81, 2>
CMsgSteamDatagramP2PSessionRequestBody_EncryptedData::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody_EncryptedData, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    CMsgSteamDatagramP2PSessionRequestBody_EncryptedData_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CMsgSteamDatagramP2PSessionRequestBody_EncryptedData>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional string peer_identity_string = 1;
    {::_pbi::TcParser::FastSS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody_EncryptedData, _impl_.peer_identity_string_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string peer_identity_string = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody_EncryptedData, _impl_.peer_identity_string_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\64\24\0\0\0\0\0\0"
    "CMsgSteamDatagramP2PSessionRequestBody.EncryptedData"
    "peer_identity_string"
  }},
};
PROTOBUF_NOINLINE void CMsgSteamDatagramP2PSessionRequestBody_EncryptedData::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramP2PSessionRequestBody.EncryptedData)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _impl_.peer_identity_string_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramP2PSessionRequestBody_EncryptedData::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CMsgSteamDatagramP2PSessionRequestBody_EncryptedData& this_ = static_cast<const CMsgSteamDatagramP2PSessionRequestBody_EncryptedData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramP2PSessionRequestBody_EncryptedData::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CMsgSteamDatagramP2PSessionRequestBody_EncryptedData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramP2PSessionRequestBody.EncryptedData)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional string peer_identity_string = 1;
  if ((cached_has_bits & 0x00000001u) != 0) {
    const std::string& _s = this_._internal_peer_identity_string();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CMsgSteamDatagramP2PSessionRequestBody.EncryptedData.peer_identity_string");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramP2PSessionRequestBody.EncryptedData)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CMsgSteamDatagramP2PSessionRequestBody_EncryptedData::ByteSizeLong(const MessageLite& base) {
  const CMsgSteamDatagramP2PSessionRequestBody_EncryptedData& this_ = static_cast<const CMsgSteamDatagramP2PSessionRequestBody_EncryptedData&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t CMsgSteamDatagramP2PSessionRequestBody_EncryptedData::ByteSizeLong() const {
  const CMsgSteamDatagramP2PSessionRequestBody_EncryptedData& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramP2PSessionRequestBody.EncryptedData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

   {
    // optional string peer_identity_string = 1;
    cached_has_bits = this_._impl_._has_bits_[0];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_peer_identity_string());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void CMsgSteamDatagramP2PSessionRequestBody_EncryptedData::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramP2PSessionRequestBody_EncryptedData*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramP2PSessionRequestBody_EncryptedData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramP2PSessionRequestBody.EncryptedData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _this->_internal_set_peer_identity_string(from._internal_peer_identity_string());
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramP2PSessionRequestBody_EncryptedData::CopyFrom(const CMsgSteamDatagramP2PSessionRequestBody_EncryptedData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramP2PSessionRequestBody.EncryptedData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CMsgSteamDatagramP2PSessionRequestBody_EncryptedData::InternalSwap(CMsgSteamDatagramP2PSessionRequestBody_EncryptedData* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.peer_identity_string_, &other->_impl_.peer_identity_string_, arena);
}

::google::protobuf::Metadata CMsgSteamDatagramP2PSessionRequestBody_EncryptedData::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CMsgSteamDatagramP2PSessionRequestBody::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CMsgSteamDatagramP2PSessionRequestBody>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, _impl_._has_bits_);
};

CMsgSteamDatagramP2PSessionRequestBody::CMsgSteamDatagramP2PSessionRequestBody(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramP2PSessionRequestBody_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramP2PSessionRequestBody)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramP2PSessionRequestBody::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::CMsgSteamDatagramP2PSessionRequestBody& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        peer_identity_string_(arena, from.peer_identity_string_),
        platform_(arena, from.platform_),
        build_(arena, from.build_),
        encrypted_data_(arena, from.encrypted_data_),
        encryption_my_ephemeral_public_key_(arena, from.encryption_my_ephemeral_public_key_) {}

CMsgSteamDatagramP2PSessionRequestBody::CMsgSteamDatagramP2PSessionRequestBody(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const CMsgSteamDatagramP2PSessionRequestBody& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramP2PSessionRequestBody_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CMsgSteamDatagramP2PSessionRequestBody* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, challenge_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, challenge_),
           offsetof(Impl_, encryption_your_public_key_lead_byte_) -
               offsetof(Impl_, challenge_) +
               sizeof(Impl_::encryption_your_public_key_lead_byte_));

  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramP2PSessionRequestBody)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramP2PSessionRequestBody::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        peer_identity_string_(arena),
        platform_(arena),
        build_(arena),
        encrypted_data_(arena),
        encryption_my_ephemeral_public_key_(arena) {}

inline void CMsgSteamDatagramP2PSessionRequestBody::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, challenge_),
           0,
           offsetof(Impl_, encryption_your_public_key_lead_byte_) -
               offsetof(Impl_, challenge_) +
               sizeof(Impl_::encryption_your_public_key_lead_byte_));
}
CMsgSteamDatagramP2PSessionRequestBody::~CMsgSteamDatagramP2PSessionRequestBody() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramP2PSessionRequestBody)
  SharedDtor(*this);
}
inline void CMsgSteamDatagramP2PSessionRequestBody::SharedDtor(MessageLite& self) {
  CMsgSteamDatagramP2PSessionRequestBody& this_ = static_cast<CMsgSteamDatagramP2PSessionRequestBody&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.peer_identity_string_.Destroy();
  this_._impl_.platform_.Destroy();
  this_._impl_.build_.Destroy();
  this_._impl_.encrypted_data_.Destroy();
  this_._impl_.encryption_my_ephemeral_public_key_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CMsgSteamDatagramP2PSessionRequestBody::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CMsgSteamDatagramP2PSessionRequestBody(arena);
}
constexpr auto CMsgSteamDatagramP2PSessionRequestBody::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(CMsgSteamDatagramP2PSessionRequestBody),
                                            alignof(CMsgSteamDatagramP2PSessionRequestBody));
}
constexpr auto CMsgSteamDatagramP2PSessionRequestBody::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CMsgSteamDatagramP2PSessionRequestBody_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CMsgSteamDatagramP2PSessionRequestBody::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CMsgSteamDatagramP2PSessionRequestBody>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CMsgSteamDatagramP2PSessionRequestBody::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CMsgSteamDatagramP2PSessionRequestBody>(), &CMsgSteamDatagramP2PSessionRequestBody::ByteSizeLong,
              &CMsgSteamDatagramP2PSessionRequestBody::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, _impl_._cached_size_),
          false,
      },
      &CMsgSteamDatagramP2PSessionRequestBody::kDescriptorMethods,
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        CMsgSteamDatagramP2PSessionRequestBody_class_data_ =
            CMsgSteamDatagramP2PSessionRequestBody::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL CMsgSteamDatagramP2PSessionRequestBody::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CMsgSteamDatagramP2PSessionRequestBody_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CMsgSteamDatagramP2PSessionRequestBody_class_data_.tc_table);
  return CMsgSteamDatagramP2PSessionRequestBody_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 13, 0, 88, 2>
CMsgSteamDatagramP2PSessionRequestBody::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, _impl_._has_bits_),
    0, // no _extensions_
    16, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294902368,  // skipmap
    offsetof(decltype(_table_), field_entries),
    13,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    CMsgSteamDatagramP2PSessionRequestBody_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CMsgSteamDatagramP2PSessionRequestBody>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional bytes encryption_my_ephemeral_public_key = 16;
    {::_pbi::TcParser::FastBS2,
     {386, 4, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, _impl_.encryption_my_ephemeral_public_key_)}},
    // optional fixed32 challenge_time = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 6, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, _impl_.challenge_time_)}},
    // optional fixed64 challenge = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 5, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, _impl_.challenge_)}},
    // optional fixed32 client_connection_id = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 7, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, _impl_.client_connection_id_)}},
    // optional fixed64 legacy_peer_steam_id = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 8, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, _impl_.legacy_peer_steam_id_)}},
    // optional fixed32 peer_connection_id = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 9, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, _impl_.peer_connection_id_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional uint32 protocol_version = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramP2PSessionRequestBody, _impl_.protocol_version_), 10>(),
     {64, 10, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, _impl_.protocol_version_)}},
    // optional uint64 network_config_version = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(CMsgSteamDatagramP2PSessionRequestBody, _impl_.network_config_version_), 11>(),
     {72, 11, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, _impl_.network_config_version_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional string peer_identity_string = 11;
    {::_pbi::TcParser::FastSS1,
     {90, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, _impl_.peer_identity_string_)}},
    // optional string platform = 12;
    {::_pbi::TcParser::FastSS1,
     {98, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, _impl_.platform_)}},
    // optional string build = 13;
    {::_pbi::TcParser::FastSS1,
     {106, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, _impl_.build_)}},
    // optional bytes encrypted_data = 14;
    {::_pbi::TcParser::FastBS1,
     {114, 3, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, _impl_.encrypted_data_)}},
    // optional uint32 encryption_your_public_key_lead_byte = 15;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramP2PSessionRequestBody, _impl_.encryption_your_public_key_lead_byte_), 12>(),
     {120, 12, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, _impl_.encryption_your_public_key_lead_byte_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional fixed32 challenge_time = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, _impl_.challenge_time_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional fixed64 challenge = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, _impl_.challenge_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
    // optional fixed32 client_connection_id = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, _impl_.client_connection_id_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional fixed64 legacy_peer_steam_id = 4;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, _impl_.legacy_peer_steam_id_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
    // optional fixed32 peer_connection_id = 5;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, _impl_.peer_connection_id_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional uint32 protocol_version = 8;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, _impl_.protocol_version_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint64 network_config_version = 9;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, _impl_.network_config_version_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // optional string peer_identity_string = 11;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, _impl_.peer_identity_string_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional string platform = 12;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, _impl_.platform_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional string build = 13;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, _impl_.build_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional bytes encrypted_data = 14;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, _impl_.encrypted_data_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional uint32 encryption_your_public_key_lead_byte = 15;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, _impl_.encryption_your_public_key_lead_byte_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional bytes encryption_my_ephemeral_public_key = 16;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, _impl_.encryption_my_ephemeral_public_key_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\46\0\0\0\0\0\0\0\24\10\5\0\0\0\0\0"
    "CMsgSteamDatagramP2PSessionRequestBody"
    "peer_identity_string"
    "platform"
    "build"
  }},
};
PROTOBUF_NOINLINE void CMsgSteamDatagramP2PSessionRequestBody::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramP2PSessionRequestBody)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.peer_identity_string_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.platform_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _impl_.build_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _impl_.encrypted_data_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _impl_.encryption_my_ephemeral_public_key_.ClearNonDefaultToEmpty();
    }
  }
  if ((cached_has_bits & 0x000000e0u) != 0) {
    ::memset(&_impl_.challenge_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.client_connection_id_) -
        reinterpret_cast<char*>(&_impl_.challenge_)) + sizeof(_impl_.client_connection_id_));
  }
  if ((cached_has_bits & 0x00001f00u) != 0) {
    ::memset(&_impl_.legacy_peer_steam_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.encryption_your_public_key_lead_byte_) -
        reinterpret_cast<char*>(&_impl_.legacy_peer_steam_id_)) + sizeof(_impl_.encryption_your_public_key_lead_byte_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramP2PSessionRequestBody::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CMsgSteamDatagramP2PSessionRequestBody& this_ = static_cast<const CMsgSteamDatagramP2PSessionRequestBody&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramP2PSessionRequestBody::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CMsgSteamDatagramP2PSessionRequestBody& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramP2PSessionRequestBody)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional fixed32 challenge_time = 1;
  if ((cached_has_bits & 0x00000040u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        1, this_._internal_challenge_time(), target);
  }

  // optional fixed64 challenge = 2;
  if ((cached_has_bits & 0x00000020u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        2, this_._internal_challenge(), target);
  }

  // optional fixed32 client_connection_id = 3;
  if ((cached_has_bits & 0x00000080u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        3, this_._internal_client_connection_id(), target);
  }

  // optional fixed64 legacy_peer_steam_id = 4;
  if ((cached_has_bits & 0x00000100u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        4, this_._internal_legacy_peer_steam_id(), target);
  }

  // optional fixed32 peer_connection_id = 5;
  if ((cached_has_bits & 0x00000200u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        5, this_._internal_peer_connection_id(), target);
  }

  // optional uint32 protocol_version = 8;
  if ((cached_has_bits & 0x00000400u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        8, this_._internal_protocol_version(), target);
  }

  // optional uint64 network_config_version = 9;
  if ((cached_has_bits & 0x00000800u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        9, this_._internal_network_config_version(), target);
  }

  // optional string peer_identity_string = 11;
  if ((cached_has_bits & 0x00000001u) != 0) {
    const std::string& _s = this_._internal_peer_identity_string();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CMsgSteamDatagramP2PSessionRequestBody.peer_identity_string");
    target = stream->WriteStringMaybeAliased(11, _s, target);
  }

  // optional string platform = 12;
  if ((cached_has_bits & 0x00000002u) != 0) {
    const std::string& _s = this_._internal_platform();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CMsgSteamDatagramP2PSessionRequestBody.platform");
    target = stream->WriteStringMaybeAliased(12, _s, target);
  }

  // optional string build = 13;
  if ((cached_has_bits & 0x00000004u) != 0) {
    const std::string& _s = this_._internal_build();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CMsgSteamDatagramP2PSessionRequestBody.build");
    target = stream->WriteStringMaybeAliased(13, _s, target);
  }

  // optional bytes encrypted_data = 14;
  if ((cached_has_bits & 0x00000008u) != 0) {
    const std::string& _s = this_._internal_encrypted_data();
    target = stream->WriteBytesMaybeAliased(14, _s, target);
  }

  // optional uint32 encryption_your_public_key_lead_byte = 15;
  if ((cached_has_bits & 0x00001000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        15, this_._internal_encryption_your_public_key_lead_byte(), target);
  }

  // optional bytes encryption_my_ephemeral_public_key = 16;
  if ((cached_has_bits & 0x00000010u) != 0) {
    const std::string& _s = this_._internal_encryption_my_ephemeral_public_key();
    target = stream->WriteBytesMaybeAliased(16, _s, target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramP2PSessionRequestBody)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CMsgSteamDatagramP2PSessionRequestBody::ByteSizeLong(const MessageLite& base) {
  const CMsgSteamDatagramP2PSessionRequestBody& this_ = static_cast<const CMsgSteamDatagramP2PSessionRequestBody&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t CMsgSteamDatagramP2PSessionRequestBody::ByteSizeLong() const {
  const CMsgSteamDatagramP2PSessionRequestBody& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramP2PSessionRequestBody)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += ::absl::popcount(0x00000120u & cached_has_bits) * 9;
  total_size += ::absl::popcount(0x000002c0u & cached_has_bits) * 5;
  if ((cached_has_bits & 0x0000001fu) != 0) {
    // optional string peer_identity_string = 11;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_peer_identity_string());
    }
    // optional string platform = 12;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_platform());
    }
    // optional string build = 13;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_build());
    }
    // optional bytes encrypted_data = 14;
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this_._internal_encrypted_data());
    }
    // optional bytes encryption_my_ephemeral_public_key = 16;
    if ((cached_has_bits & 0x00000010u) != 0) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this_._internal_encryption_my_ephemeral_public_key());
    }
  }
  if ((cached_has_bits & 0x00001c00u) != 0) {
    // optional uint32 protocol_version = 8;
    if ((cached_has_bits & 0x00000400u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_protocol_version());
    }
    // optional uint64 network_config_version = 9;
    if ((cached_has_bits & 0x00000800u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this_._internal_network_config_version());
    }
    // optional uint32 encryption_your_public_key_lead_byte = 15;
    if ((cached_has_bits & 0x00001000u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_encryption_your_public_key_lead_byte());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void CMsgSteamDatagramP2PSessionRequestBody::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramP2PSessionRequestBody*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramP2PSessionRequestBody&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramP2PSessionRequestBody)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_internal_set_peer_identity_string(from._internal_peer_identity_string());
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_internal_set_platform(from._internal_platform());
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_internal_set_build(from._internal_build());
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _this->_internal_set_encrypted_data(from._internal_encrypted_data());
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _this->_internal_set_encryption_my_ephemeral_public_key(from._internal_encryption_my_ephemeral_public_key());
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      _this->_impl_.challenge_ = from._impl_.challenge_;
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      _this->_impl_.challenge_time_ = from._impl_.challenge_time_;
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      _this->_impl_.client_connection_id_ = from._impl_.client_connection_id_;
    }
  }
  if ((cached_has_bits & 0x00001f00u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      _this->_impl_.legacy_peer_steam_id_ = from._impl_.legacy_peer_steam_id_;
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      _this->_impl_.peer_connection_id_ = from._impl_.peer_connection_id_;
    }
    if ((cached_has_bits & 0x00000400u) != 0) {
      _this->_impl_.protocol_version_ = from._impl_.protocol_version_;
    }
    if ((cached_has_bits & 0x00000800u) != 0) {
      _this->_impl_.network_config_version_ = from._impl_.network_config_version_;
    }
    if ((cached_has_bits & 0x00001000u) != 0) {
      _this->_impl_.encryption_your_public_key_lead_byte_ = from._impl_.encryption_your_public_key_lead_byte_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramP2PSessionRequestBody::CopyFrom(const CMsgSteamDatagramP2PSessionRequestBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramP2PSessionRequestBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CMsgSteamDatagramP2PSessionRequestBody::InternalSwap(CMsgSteamDatagramP2PSessionRequestBody* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.peer_identity_string_, &other->_impl_.peer_identity_string_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.platform_, &other->_impl_.platform_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.build_, &other->_impl_.build_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.encrypted_data_, &other->_impl_.encrypted_data_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.encryption_my_ephemeral_public_key_, &other->_impl_.encryption_my_ephemeral_public_key_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, _impl_.encryption_your_public_key_lead_byte_)
      + sizeof(CMsgSteamDatagramP2PSessionRequestBody::_impl_.encryption_your_public_key_lead_byte_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequestBody, _impl_.challenge_)>(
          reinterpret_cast<char*>(&_impl_.challenge_),
          reinterpret_cast<char*>(&other->_impl_.challenge_));
}

::google::protobuf::Metadata CMsgSteamDatagramP2PSessionRequestBody::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CMsgSteamDatagramP2PSessionRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CMsgSteamDatagramP2PSessionRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequest, _impl_._has_bits_);
};

void CMsgSteamDatagramP2PSessionRequest::clear_cert() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.cert_ != nullptr) _impl_.cert_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CMsgSteamDatagramP2PSessionRequest::CMsgSteamDatagramP2PSessionRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramP2PSessionRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramP2PSessionRequest)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramP2PSessionRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::CMsgSteamDatagramP2PSessionRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        body_(arena, from.body_),
        signature_(arena, from.signature_) {}

CMsgSteamDatagramP2PSessionRequest::CMsgSteamDatagramP2PSessionRequest(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const CMsgSteamDatagramP2PSessionRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramP2PSessionRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CMsgSteamDatagramP2PSessionRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.cert_ = ((cached_has_bits & 0x00000004u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.cert_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramP2PSessionRequest)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramP2PSessionRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        body_(arena),
        signature_(arena) {}

inline void CMsgSteamDatagramP2PSessionRequest::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.cert_ = {};
}
CMsgSteamDatagramP2PSessionRequest::~CMsgSteamDatagramP2PSessionRequest() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramP2PSessionRequest)
  SharedDtor(*this);
}
inline void CMsgSteamDatagramP2PSessionRequest::SharedDtor(MessageLite& self) {
  CMsgSteamDatagramP2PSessionRequest& this_ = static_cast<CMsgSteamDatagramP2PSessionRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.body_.Destroy();
  this_._impl_.signature_.Destroy();
  delete this_._impl_.cert_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CMsgSteamDatagramP2PSessionRequest::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CMsgSteamDatagramP2PSessionRequest(arena);
}
constexpr auto CMsgSteamDatagramP2PSessionRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(CMsgSteamDatagramP2PSessionRequest),
                                            alignof(CMsgSteamDatagramP2PSessionRequest));
}
constexpr auto CMsgSteamDatagramP2PSessionRequest::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CMsgSteamDatagramP2PSessionRequest_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CMsgSteamDatagramP2PSessionRequest::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CMsgSteamDatagramP2PSessionRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CMsgSteamDatagramP2PSessionRequest::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CMsgSteamDatagramP2PSessionRequest>(), &CMsgSteamDatagramP2PSessionRequest::ByteSizeLong,
              &CMsgSteamDatagramP2PSessionRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequest, _impl_._cached_size_),
          false,
      },
      &CMsgSteamDatagramP2PSessionRequest::kDescriptorMethods,
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        CMsgSteamDatagramP2PSessionRequest_class_data_ =
            CMsgSteamDatagramP2PSessionRequest::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL CMsgSteamDatagramP2PSessionRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CMsgSteamDatagramP2PSessionRequest_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CMsgSteamDatagramP2PSessionRequest_class_data_.tc_table);
  return CMsgSteamDatagramP2PSessionRequest_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 0, 2>
CMsgSteamDatagramP2PSessionRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequest, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    CMsgSteamDatagramP2PSessionRequest_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CMsgSteamDatagramP2PSessionRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional .CMsgSteamDatagramCertificateSigned cert = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequest, _impl_.cert_)}},
    // optional bytes body = 2;
    {::_pbi::TcParser::FastBS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequest, _impl_.body_)}},
    // optional bytes signature = 3;
    {::_pbi::TcParser::FastBS1,
     {26, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequest, _impl_.signature_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .CMsgSteamDatagramCertificateSigned cert = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequest, _impl_.cert_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional bytes body = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequest, _impl_.body_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional bytes signature = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionRequest, _impl_.signature_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::CMsgSteamDatagramCertificateSigned>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void CMsgSteamDatagramP2PSessionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramP2PSessionRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.body_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.signature_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(_impl_.cert_ != nullptr);
      _impl_.cert_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramP2PSessionRequest::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CMsgSteamDatagramP2PSessionRequest& this_ = static_cast<const CMsgSteamDatagramP2PSessionRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramP2PSessionRequest::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CMsgSteamDatagramP2PSessionRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramP2PSessionRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional .CMsgSteamDatagramCertificateSigned cert = 1;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.cert_, this_._impl_.cert_->GetCachedSize(), target,
        stream);
  }

  // optional bytes body = 2;
  if ((cached_has_bits & 0x00000001u) != 0) {
    const std::string& _s = this_._internal_body();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  // optional bytes signature = 3;
  if ((cached_has_bits & 0x00000002u) != 0) {
    const std::string& _s = this_._internal_signature();
    target = stream->WriteBytesMaybeAliased(3, _s, target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramP2PSessionRequest)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CMsgSteamDatagramP2PSessionRequest::ByteSizeLong(const MessageLite& base) {
  const CMsgSteamDatagramP2PSessionRequest& this_ = static_cast<const CMsgSteamDatagramP2PSessionRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t CMsgSteamDatagramP2PSessionRequest::ByteSizeLong() const {
  const CMsgSteamDatagramP2PSessionRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramP2PSessionRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    // optional bytes body = 2;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this_._internal_body());
    }
    // optional bytes signature = 3;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this_._internal_signature());
    }
    // optional .CMsgSteamDatagramCertificateSigned cert = 1;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.cert_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void CMsgSteamDatagramP2PSessionRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramP2PSessionRequest*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramP2PSessionRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramP2PSessionRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_internal_set_body(from._internal_body());
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_internal_set_signature(from._internal_signature());
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(from._impl_.cert_ != nullptr);
      if (_this->_impl_.cert_ == nullptr) {
        _this->_impl_.cert_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.cert_);
      } else {
        _this->_impl_.cert_->MergeFrom(*from._impl_.cert_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramP2PSessionRequest::CopyFrom(const CMsgSteamDatagramP2PSessionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramP2PSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CMsgSteamDatagramP2PSessionRequest::InternalSwap(CMsgSteamDatagramP2PSessionRequest* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.body_, &other->_impl_.body_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.signature_, &other->_impl_.signature_, arena);
  swap(_impl_.cert_, other->_impl_.cert_);
}

::google::protobuf::Metadata CMsgSteamDatagramP2PSessionRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CMsgSteamDatagramP2PSessionEstablished::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CMsgSteamDatagramP2PSessionEstablished>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionEstablished, _impl_._has_bits_);
};

CMsgSteamDatagramP2PSessionEstablished::CMsgSteamDatagramP2PSessionEstablished(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramP2PSessionEstablished_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramP2PSessionEstablished)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramP2PSessionEstablished::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::CMsgSteamDatagramP2PSessionEstablished& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        relay_routing_token_(arena, from.relay_routing_token_) {}

CMsgSteamDatagramP2PSessionEstablished::CMsgSteamDatagramP2PSessionEstablished(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const CMsgSteamDatagramP2PSessionEstablished& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramP2PSessionEstablished_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CMsgSteamDatagramP2PSessionEstablished* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, connection_id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, connection_id_),
           offsetof(Impl_, seq_num_r2c_) -
               offsetof(Impl_, connection_id_) +
               sizeof(Impl_::seq_num_r2c_));

  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramP2PSessionEstablished)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramP2PSessionEstablished::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        relay_routing_token_(arena) {}

inline void CMsgSteamDatagramP2PSessionEstablished::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, connection_id_),
           0,
           offsetof(Impl_, seq_num_r2c_) -
               offsetof(Impl_, connection_id_) +
               sizeof(Impl_::seq_num_r2c_));
}
CMsgSteamDatagramP2PSessionEstablished::~CMsgSteamDatagramP2PSessionEstablished() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramP2PSessionEstablished)
  SharedDtor(*this);
}
inline void CMsgSteamDatagramP2PSessionEstablished::SharedDtor(MessageLite& self) {
  CMsgSteamDatagramP2PSessionEstablished& this_ = static_cast<CMsgSteamDatagramP2PSessionEstablished&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.relay_routing_token_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CMsgSteamDatagramP2PSessionEstablished::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CMsgSteamDatagramP2PSessionEstablished(arena);
}
constexpr auto CMsgSteamDatagramP2PSessionEstablished::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(CMsgSteamDatagramP2PSessionEstablished),
                                            alignof(CMsgSteamDatagramP2PSessionEstablished));
}
constexpr auto CMsgSteamDatagramP2PSessionEstablished::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CMsgSteamDatagramP2PSessionEstablished_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CMsgSteamDatagramP2PSessionEstablished::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CMsgSteamDatagramP2PSessionEstablished>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CMsgSteamDatagramP2PSessionEstablished::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CMsgSteamDatagramP2PSessionEstablished>(), &CMsgSteamDatagramP2PSessionEstablished::ByteSizeLong,
              &CMsgSteamDatagramP2PSessionEstablished::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionEstablished, _impl_._cached_size_),
          false,
      },
      &CMsgSteamDatagramP2PSessionEstablished::kDescriptorMethods,
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        CMsgSteamDatagramP2PSessionEstablished_class_data_ =
            CMsgSteamDatagramP2PSessionEstablished::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL CMsgSteamDatagramP2PSessionEstablished::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CMsgSteamDatagramP2PSessionEstablished_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CMsgSteamDatagramP2PSessionEstablished_class_data_.tc_table);
  return CMsgSteamDatagramP2PSessionEstablished_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 4, 0, 0, 2>
CMsgSteamDatagramP2PSessionEstablished::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionEstablished, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967266,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    CMsgSteamDatagramP2PSessionEstablished_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CMsgSteamDatagramP2PSessionEstablished>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional fixed32 connection_id = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionEstablished, _impl_.connection_id_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional uint32 seconds_until_shutdown = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramP2PSessionEstablished, _impl_.seconds_until_shutdown_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionEstablished, _impl_.seconds_until_shutdown_)}},
    // optional bytes relay_routing_token = 4;
    {::_pbi::TcParser::FastBS1,
     {34, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionEstablished, _impl_.relay_routing_token_)}},
    // optional uint32 seq_num_r2c = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramP2PSessionEstablished, _impl_.seq_num_r2c_), 3>(),
     {40, 3, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionEstablished, _impl_.seq_num_r2c_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional fixed32 connection_id = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionEstablished, _impl_.connection_id_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional uint32 seconds_until_shutdown = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionEstablished, _impl_.seconds_until_shutdown_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional bytes relay_routing_token = 4;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionEstablished, _impl_.relay_routing_token_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional uint32 seq_num_r2c = 5;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionEstablished, _impl_.seq_num_r2c_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};
PROTOBUF_NOINLINE void CMsgSteamDatagramP2PSessionEstablished::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramP2PSessionEstablished)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _impl_.relay_routing_token_.ClearNonDefaultToEmpty();
  }
  if ((cached_has_bits & 0x0000000eu) != 0) {
    ::memset(&_impl_.connection_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.seq_num_r2c_) -
        reinterpret_cast<char*>(&_impl_.connection_id_)) + sizeof(_impl_.seq_num_r2c_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramP2PSessionEstablished::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CMsgSteamDatagramP2PSessionEstablished& this_ = static_cast<const CMsgSteamDatagramP2PSessionEstablished&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramP2PSessionEstablished::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CMsgSteamDatagramP2PSessionEstablished& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramP2PSessionEstablished)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional fixed32 connection_id = 1;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        1, this_._internal_connection_id(), target);
  }

  // optional uint32 seconds_until_shutdown = 3;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this_._internal_seconds_until_shutdown(), target);
  }

  // optional bytes relay_routing_token = 4;
  if ((cached_has_bits & 0x00000001u) != 0) {
    const std::string& _s = this_._internal_relay_routing_token();
    target = stream->WriteBytesMaybeAliased(4, _s, target);
  }

  // optional uint32 seq_num_r2c = 5;
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this_._internal_seq_num_r2c(), target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramP2PSessionEstablished)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CMsgSteamDatagramP2PSessionEstablished::ByteSizeLong(const MessageLite& base) {
  const CMsgSteamDatagramP2PSessionEstablished& this_ = static_cast<const CMsgSteamDatagramP2PSessionEstablished&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t CMsgSteamDatagramP2PSessionEstablished::ByteSizeLong() const {
  const CMsgSteamDatagramP2PSessionEstablished& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramP2PSessionEstablished)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += static_cast<bool>(0x00000002u & cached_has_bits) * 5;
  if ((cached_has_bits & 0x0000000du) != 0) {
    // optional bytes relay_routing_token = 4;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this_._internal_relay_routing_token());
    }
    // optional uint32 seconds_until_shutdown = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_seconds_until_shutdown());
    }
    // optional uint32 seq_num_r2c = 5;
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_seq_num_r2c());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void CMsgSteamDatagramP2PSessionEstablished::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramP2PSessionEstablished*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramP2PSessionEstablished&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramP2PSessionEstablished)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_internal_set_relay_routing_token(from._internal_relay_routing_token());
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_impl_.connection_id_ = from._impl_.connection_id_;
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_impl_.seconds_until_shutdown_ = from._impl_.seconds_until_shutdown_;
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _this->_impl_.seq_num_r2c_ = from._impl_.seq_num_r2c_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramP2PSessionEstablished::CopyFrom(const CMsgSteamDatagramP2PSessionEstablished& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramP2PSessionEstablished)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CMsgSteamDatagramP2PSessionEstablished::InternalSwap(CMsgSteamDatagramP2PSessionEstablished* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.relay_routing_token_, &other->_impl_.relay_routing_token_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionEstablished, _impl_.seq_num_r2c_)
      + sizeof(CMsgSteamDatagramP2PSessionEstablished::_impl_.seq_num_r2c_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PSessionEstablished, _impl_.connection_id_)>(
          reinterpret_cast<char*>(&_impl_.connection_id_),
          reinterpret_cast<char*>(&other->_impl_.connection_id_));
}

::google::protobuf::Metadata CMsgSteamDatagramP2PSessionEstablished::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CMsgSteamDatagramConnectionStatsP2PClientToRouter::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CMsgSteamDatagramConnectionStatsP2PClientToRouter>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_._has_bits_);
};

void CMsgSteamDatagramConnectionStatsP2PClientToRouter::clear_quality_relay() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.quality_relay_ != nullptr) _impl_.quality_relay_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CMsgSteamDatagramConnectionStatsP2PClientToRouter::clear_quality_e2e() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.quality_e2e_ != nullptr) _impl_.quality_e2e_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
CMsgSteamDatagramConnectionStatsP2PClientToRouter::CMsgSteamDatagramConnectionStatsP2PClientToRouter(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramConnectionStatsP2PClientToRouter_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramConnectionStatsP2PClientToRouter)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramConnectionStatsP2PClientToRouter::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::CMsgSteamDatagramConnectionStatsP2PClientToRouter& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        ack_relay_{visibility, arena, from.ack_relay_},
        legacy_ack_e2e_{visibility, arena, from.legacy_ack_e2e_},
        forward_target_relay_routing_token_(arena, from.forward_target_relay_routing_token_),
        routes_(arena, from.routes_) {}

CMsgSteamDatagramConnectionStatsP2PClientToRouter::CMsgSteamDatagramConnectionStatsP2PClientToRouter(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const CMsgSteamDatagramConnectionStatsP2PClientToRouter& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramConnectionStatsP2PClientToRouter_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CMsgSteamDatagramConnectionStatsP2PClientToRouter* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.quality_relay_ = ((cached_has_bits & 0x00000004u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.quality_relay_)
                : nullptr;
  _impl_.quality_e2e_ = ((cached_has_bits & 0x00000008u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.quality_e2e_)
                : nullptr;
  _impl_.p2p_routing_summary_ = ((cached_has_bits & 0x00000010u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.p2p_routing_summary_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, flags_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, flags_),
           offsetof(Impl_, seq_num_e2e_) -
               offsetof(Impl_, flags_) +
               sizeof(Impl_::seq_num_e2e_));

  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramConnectionStatsP2PClientToRouter)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramConnectionStatsP2PClientToRouter::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        ack_relay_{visibility, arena},
        legacy_ack_e2e_{visibility, arena},
        forward_target_relay_routing_token_(arena),
        routes_(arena) {}

inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, quality_relay_),
           0,
           offsetof(Impl_, seq_num_e2e_) -
               offsetof(Impl_, quality_relay_) +
               sizeof(Impl_::seq_num_e2e_));
}
CMsgSteamDatagramConnectionStatsP2PClientToRouter::~CMsgSteamDatagramConnectionStatsP2PClientToRouter() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramConnectionStatsP2PClientToRouter)
  SharedDtor(*this);
}
inline void CMsgSteamDatagramConnectionStatsP2PClientToRouter::SharedDtor(MessageLite& self) {
  CMsgSteamDatagramConnectionStatsP2PClientToRouter& this_ = static_cast<CMsgSteamDatagramConnectionStatsP2PClientToRouter&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.forward_target_relay_routing_token_.Destroy();
  this_._impl_.routes_.Destroy();
  delete this_._impl_.quality_relay_;
  delete this_._impl_.quality_e2e_;
  delete this_._impl_.p2p_routing_summary_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CMsgSteamDatagramConnectionStatsP2PClientToRouter::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CMsgSteamDatagramConnectionStatsP2PClientToRouter(arena);
}
constexpr auto CMsgSteamDatagramConnectionStatsP2PClientToRouter::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.ack_relay_) +
          decltype(CMsgSteamDatagramConnectionStatsP2PClientToRouter::_impl_.ack_relay_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.legacy_ack_e2e_) +
          decltype(CMsgSteamDatagramConnectionStatsP2PClientToRouter::_impl_.legacy_ack_e2e_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(CMsgSteamDatagramConnectionStatsP2PClientToRouter), alignof(CMsgSteamDatagramConnectionStatsP2PClientToRouter), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&CMsgSteamDatagramConnectionStatsP2PClientToRouter::PlacementNew_,
                                 sizeof(CMsgSteamDatagramConnectionStatsP2PClientToRouter),
                                 alignof(CMsgSteamDatagramConnectionStatsP2PClientToRouter));
  }
}
constexpr auto CMsgSteamDatagramConnectionStatsP2PClientToRouter::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CMsgSteamDatagramConnectionStatsP2PClientToRouter_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CMsgSteamDatagramConnectionStatsP2PClientToRouter::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CMsgSteamDatagramConnectionStatsP2PClientToRouter>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CMsgSteamDatagramConnectionStatsP2PClientToRouter::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CMsgSteamDatagramConnectionStatsP2PClientToRouter>(), &CMsgSteamDatagramConnectionStatsP2PClientToRouter::ByteSizeLong,
              &CMsgSteamDatagramConnectionStatsP2PClientToRouter::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_._cached_size_),
          false,
      },
      &CMsgSteamDatagramConnectionStatsP2PClientToRouter::kDescriptorMethods,
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        CMsgSteamDatagramConnectionStatsP2PClientToRouter_class_data_ =
            CMsgSteamDatagramConnectionStatsP2PClientToRouter::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL CMsgSteamDatagramConnectionStatsP2PClientToRouter::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CMsgSteamDatagramConnectionStatsP2PClientToRouter_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CMsgSteamDatagramConnectionStatsP2PClientToRouter_class_data_.tc_table);
  return CMsgSteamDatagramConnectionStatsP2PClientToRouter_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 13, 3, 0, 2>
CMsgSteamDatagramConnectionStatsP2PClientToRouter::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_._has_bits_),
    0, // no _extensions_
    14, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294955008,  // skipmap
    offsetof(decltype(_table_), field_entries),
    13,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    CMsgSteamDatagramConnectionStatsP2PClientToRouter_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CMsgSteamDatagramConnectionStatsP2PClientToRouter>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.quality_relay_)}},
    // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 3, 1, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.quality_e2e_)}},
    // repeated fixed32 ack_relay = 3;
    {::_pbi::TcParser::FastF32R1,
     {29, 63, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.ack_relay_)}},
    // repeated fixed32 legacy_ack_e2e = 4;
    {::_pbi::TcParser::FastF32R1,
     {37, 63, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.legacy_ack_e2e_)}},
    // optional uint32 flags = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.flags_), 5>(),
     {40, 5, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.flags_)}},
    // optional bytes forward_target_relay_routing_token = 6;
    {::_pbi::TcParser::FastBS1,
     {50, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.forward_target_relay_routing_token_)}},
    // optional uint32 forward_target_revision = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.forward_target_revision_), 6>(),
     {56, 6, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.forward_target_revision_)}},
    // optional bytes routes = 8;
    {::_pbi::TcParser::FastBS1,
     {66, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.routes_)}},
    // optional uint32 ack_peer_routes_revision = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.ack_peer_routes_revision_), 7>(),
     {72, 7, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.ack_peer_routes_revision_)}},
    // optional fixed32 connection_id = 10;
    {::_pbi::TcParser::FastF32S1,
     {85, 8, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.connection_id_)}},
    // optional uint32 seq_num_c2r = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.seq_num_c2r_), 9>(),
     {88, 9, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.seq_num_c2r_)}},
    // optional uint32 seq_num_e2e = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.seq_num_e2e_), 10>(),
     {96, 10, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.seq_num_e2e_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional .CMsgSteamDatagramP2PRoutingSummary p2p_routing_summary = 14;
    {::_pbi::TcParser::FastMtS1,
     {114, 4, 2, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.p2p_routing_summary_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.quality_relay_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.quality_e2e_), _Internal::kHasBitsOffset + 3, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated fixed32 ack_relay = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.ack_relay_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kFixed32)},
    // repeated fixed32 legacy_ack_e2e = 4;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.legacy_ack_e2e_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kFixed32)},
    // optional uint32 flags = 5;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.flags_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional bytes forward_target_relay_routing_token = 6;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.forward_target_relay_routing_token_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional uint32 forward_target_revision = 7;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.forward_target_revision_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional bytes routes = 8;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.routes_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional uint32 ack_peer_routes_revision = 9;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.ack_peer_routes_revision_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional fixed32 connection_id = 10;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.connection_id_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional uint32 seq_num_c2r = 11;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.seq_num_c2r_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 seq_num_e2e = 12;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.seq_num_e2e_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional .CMsgSteamDatagramP2PRoutingSummary p2p_routing_summary = 14;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.p2p_routing_summary_), _Internal::kHasBitsOffset + 4, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::CMsgSteamDatagramConnectionQuality>()},
      {::_pbi::TcParser::GetTable<::CMsgSteamDatagramConnectionQuality>()},
      {::_pbi::TcParser::GetTable<::CMsgSteamDatagramP2PRoutingSummary>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void CMsgSteamDatagramConnectionStatsP2PClientToRouter::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramConnectionStatsP2PClientToRouter)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ack_relay_.Clear();
  _impl_.legacy_ack_e2e_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.forward_target_relay_routing_token_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.routes_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(_impl_.quality_relay_ != nullptr);
      _impl_.quality_relay_->Clear();
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      ABSL_DCHECK(_impl_.quality_e2e_ != nullptr);
      _impl_.quality_e2e_->Clear();
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      ABSL_DCHECK(_impl_.p2p_routing_summary_ != nullptr);
      _impl_.p2p_routing_summary_->Clear();
    }
  }
  if ((cached_has_bits & 0x000000e0u) != 0) {
    ::memset(&_impl_.flags_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.ack_peer_routes_revision_) -
        reinterpret_cast<char*>(&_impl_.flags_)) + sizeof(_impl_.ack_peer_routes_revision_));
  }
  if ((cached_has_bits & 0x00000700u) != 0) {
    ::memset(&_impl_.connection_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.seq_num_e2e_) -
        reinterpret_cast<char*>(&_impl_.connection_id_)) + sizeof(_impl_.seq_num_e2e_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramConnectionStatsP2PClientToRouter::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CMsgSteamDatagramConnectionStatsP2PClientToRouter& this_ = static_cast<const CMsgSteamDatagramConnectionStatsP2PClientToRouter&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramConnectionStatsP2PClientToRouter::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CMsgSteamDatagramConnectionStatsP2PClientToRouter& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramConnectionStatsP2PClientToRouter)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.quality_relay_, this_._impl_.quality_relay_->GetCachedSize(), target,
        stream);
  }

  // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.quality_e2e_, this_._impl_.quality_e2e_->GetCachedSize(), target,
        stream);
  }

  // repeated fixed32 ack_relay = 3;
  for (int i = 0, n = this_._internal_ack_relay_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        3, this_._internal_ack_relay().Get(i), target);
  }

  // repeated fixed32 legacy_ack_e2e = 4;
  for (int i = 0, n = this_._internal_legacy_ack_e2e_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        4, this_._internal_legacy_ack_e2e().Get(i), target);
  }

  // optional uint32 flags = 5;
  if ((cached_has_bits & 0x00000020u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this_._internal_flags(), target);
  }

  // optional bytes forward_target_relay_routing_token = 6;
  if ((cached_has_bits & 0x00000001u) != 0) {
    const std::string& _s = this_._internal_forward_target_relay_routing_token();
    target = stream->WriteBytesMaybeAliased(6, _s, target);
  }

  // optional uint32 forward_target_revision = 7;
  if ((cached_has_bits & 0x00000040u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        7, this_._internal_forward_target_revision(), target);
  }

  // optional bytes routes = 8;
  if ((cached_has_bits & 0x00000002u) != 0) {
    const std::string& _s = this_._internal_routes();
    target = stream->WriteBytesMaybeAliased(8, _s, target);
  }

  // optional uint32 ack_peer_routes_revision = 9;
  if ((cached_has_bits & 0x00000080u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        9, this_._internal_ack_peer_routes_revision(), target);
  }

  // optional fixed32 connection_id = 10;
  if ((cached_has_bits & 0x00000100u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        10, this_._internal_connection_id(), target);
  }

  // optional uint32 seq_num_c2r = 11;
  if ((cached_has_bits & 0x00000200u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        11, this_._internal_seq_num_c2r(), target);
  }

  // optional uint32 seq_num_e2e = 12;
  if ((cached_has_bits & 0x00000400u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        12, this_._internal_seq_num_e2e(), target);
  }

  // optional .CMsgSteamDatagramP2PRoutingSummary p2p_routing_summary = 14;
  if ((cached_has_bits & 0x00000010u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        14, *this_._impl_.p2p_routing_summary_, this_._impl_.p2p_routing_summary_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramConnectionStatsP2PClientToRouter)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CMsgSteamDatagramConnectionStatsP2PClientToRouter::ByteSizeLong(const MessageLite& base) {
  const CMsgSteamDatagramConnectionStatsP2PClientToRouter& this_ = static_cast<const CMsgSteamDatagramConnectionStatsP2PClientToRouter&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t CMsgSteamDatagramConnectionStatsP2PClientToRouter::ByteSizeLong() const {
  const CMsgSteamDatagramConnectionStatsP2PClientToRouter& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramConnectionStatsP2PClientToRouter)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated fixed32 ack_relay = 3;
    {
      std::size_t data_size = std::size_t{4} *
          ::_pbi::FromIntSize(this_._internal_ack_relay_size());
      std::size_t tag_size = std::size_t{1} *
          ::_pbi::FromIntSize(this_._internal_ack_relay_size());
      total_size += tag_size + data_size;
    }
    // repeated fixed32 legacy_ack_e2e = 4;
    {
      std::size_t data_size = std::size_t{4} *
          ::_pbi::FromIntSize(this_._internal_legacy_ack_e2e_size());
      std::size_t tag_size = std::size_t{1} *
          ::_pbi::FromIntSize(this_._internal_legacy_ack_e2e_size());
      total_size += tag_size + data_size;
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += static_cast<bool>(0x00000100u & cached_has_bits) * 5;
  if ((cached_has_bits & 0x000000ffu) != 0) {
    // optional bytes forward_target_relay_routing_token = 6;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this_._internal_forward_target_relay_routing_token());
    }
    // optional bytes routes = 8;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this_._internal_routes());
    }
    // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.quality_relay_);
    }
    // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.quality_e2e_);
    }
    // optional .CMsgSteamDatagramP2PRoutingSummary p2p_routing_summary = 14;
    if ((cached_has_bits & 0x00000010u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.p2p_routing_summary_);
    }
    // optional uint32 flags = 5;
    if ((cached_has_bits & 0x00000020u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_flags());
    }
    // optional uint32 forward_target_revision = 7;
    if ((cached_has_bits & 0x00000040u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_forward_target_revision());
    }
    // optional uint32 ack_peer_routes_revision = 9;
    if ((cached_has_bits & 0x00000080u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_ack_peer_routes_revision());
    }
  }
  if ((cached_has_bits & 0x00000600u) != 0) {
    // optional uint32 seq_num_c2r = 11;
    if ((cached_has_bits & 0x00000200u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_seq_num_c2r());
    }
    // optional uint32 seq_num_e2e = 12;
    if ((cached_has_bits & 0x00000400u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_seq_num_e2e());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void CMsgSteamDatagramConnectionStatsP2PClientToRouter::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramConnectionStatsP2PClientToRouter*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramConnectionStatsP2PClientToRouter&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramConnectionStatsP2PClientToRouter)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_ack_relay()->MergeFrom(from._internal_ack_relay());
  _this->_internal_mutable_legacy_ack_e2e()->MergeFrom(from._internal_legacy_ack_e2e());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_internal_set_forward_target_relay_routing_token(from._internal_forward_target_relay_routing_token());
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_internal_set_routes(from._internal_routes());
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(from._impl_.quality_relay_ != nullptr);
      if (_this->_impl_.quality_relay_ == nullptr) {
        _this->_impl_.quality_relay_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.quality_relay_);
      } else {
        _this->_impl_.quality_relay_->MergeFrom(*from._impl_.quality_relay_);
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      ABSL_DCHECK(from._impl_.quality_e2e_ != nullptr);
      if (_this->_impl_.quality_e2e_ == nullptr) {
        _this->_impl_.quality_e2e_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.quality_e2e_);
      } else {
        _this->_impl_.quality_e2e_->MergeFrom(*from._impl_.quality_e2e_);
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      ABSL_DCHECK(from._impl_.p2p_routing_summary_ != nullptr);
      if (_this->_impl_.p2p_routing_summary_ == nullptr) {
        _this->_impl_.p2p_routing_summary_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.p2p_routing_summary_);
      } else {
        _this->_impl_.p2p_routing_summary_->MergeFrom(*from._impl_.p2p_routing_summary_);
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      _this->_impl_.flags_ = from._impl_.flags_;
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      _this->_impl_.forward_target_revision_ = from._impl_.forward_target_revision_;
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      _this->_impl_.ack_peer_routes_revision_ = from._impl_.ack_peer_routes_revision_;
    }
  }
  if ((cached_has_bits & 0x00000700u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      _this->_impl_.connection_id_ = from._impl_.connection_id_;
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      _this->_impl_.seq_num_c2r_ = from._impl_.seq_num_c2r_;
    }
    if ((cached_has_bits & 0x00000400u) != 0) {
      _this->_impl_.seq_num_e2e_ = from._impl_.seq_num_e2e_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramConnectionStatsP2PClientToRouter::CopyFrom(const CMsgSteamDatagramConnectionStatsP2PClientToRouter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramConnectionStatsP2PClientToRouter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CMsgSteamDatagramConnectionStatsP2PClientToRouter::InternalSwap(CMsgSteamDatagramConnectionStatsP2PClientToRouter* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.ack_relay_.InternalSwap(&other->_impl_.ack_relay_);
  _impl_.legacy_ack_e2e_.InternalSwap(&other->_impl_.legacy_ack_e2e_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.forward_target_relay_routing_token_, &other->_impl_.forward_target_relay_routing_token_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.routes_, &other->_impl_.routes_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.seq_num_e2e_)
      + sizeof(CMsgSteamDatagramConnectionStatsP2PClientToRouter::_impl_.seq_num_e2e_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PClientToRouter, _impl_.quality_relay_)>(
          reinterpret_cast<char*>(&_impl_.quality_relay_),
          reinterpret_cast<char*>(&other->_impl_.quality_relay_));
}

::google::protobuf::Metadata CMsgSteamDatagramConnectionStatsP2PClientToRouter::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CMsgSteamDatagramConnectionStatsP2PRouterToClient::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CMsgSteamDatagramConnectionStatsP2PRouterToClient>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_._has_bits_);
};

void CMsgSteamDatagramConnectionStatsP2PRouterToClient::clear_quality_relay() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.quality_relay_ != nullptr) _impl_.quality_relay_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CMsgSteamDatagramConnectionStatsP2PRouterToClient::clear_quality_e2e() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.quality_e2e_ != nullptr) _impl_.quality_e2e_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CMsgSteamDatagramConnectionStatsP2PRouterToClient::CMsgSteamDatagramConnectionStatsP2PRouterToClient(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramConnectionStatsP2PRouterToClient_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramConnectionStatsP2PRouterToClient)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramConnectionStatsP2PRouterToClient::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::CMsgSteamDatagramConnectionStatsP2PRouterToClient& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        ack_relay_{visibility, arena, from.ack_relay_},
        legacy_ack_e2e_{visibility, arena, from.legacy_ack_e2e_},
        routes_(arena, from.routes_) {}

CMsgSteamDatagramConnectionStatsP2PRouterToClient::CMsgSteamDatagramConnectionStatsP2PRouterToClient(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const CMsgSteamDatagramConnectionStatsP2PRouterToClient& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramConnectionStatsP2PRouterToClient_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CMsgSteamDatagramConnectionStatsP2PRouterToClient* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.quality_relay_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.quality_relay_)
                : nullptr;
  _impl_.quality_e2e_ = ((cached_has_bits & 0x00000004u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.quality_e2e_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, seconds_until_shutdown_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, seconds_until_shutdown_),
           offsetof(Impl_, seq_num_e2e_) -
               offsetof(Impl_, seconds_until_shutdown_) +
               sizeof(Impl_::seq_num_e2e_));

  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramConnectionStatsP2PRouterToClient)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramConnectionStatsP2PRouterToClient::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        ack_relay_{visibility, arena},
        legacy_ack_e2e_{visibility, arena},
        routes_(arena) {}

inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, quality_relay_),
           0,
           offsetof(Impl_, seq_num_e2e_) -
               offsetof(Impl_, quality_relay_) +
               sizeof(Impl_::seq_num_e2e_));
}
CMsgSteamDatagramConnectionStatsP2PRouterToClient::~CMsgSteamDatagramConnectionStatsP2PRouterToClient() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramConnectionStatsP2PRouterToClient)
  SharedDtor(*this);
}
inline void CMsgSteamDatagramConnectionStatsP2PRouterToClient::SharedDtor(MessageLite& self) {
  CMsgSteamDatagramConnectionStatsP2PRouterToClient& this_ = static_cast<CMsgSteamDatagramConnectionStatsP2PRouterToClient&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.routes_.Destroy();
  delete this_._impl_.quality_relay_;
  delete this_._impl_.quality_e2e_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CMsgSteamDatagramConnectionStatsP2PRouterToClient::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CMsgSteamDatagramConnectionStatsP2PRouterToClient(arena);
}
constexpr auto CMsgSteamDatagramConnectionStatsP2PRouterToClient::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.ack_relay_) +
          decltype(CMsgSteamDatagramConnectionStatsP2PRouterToClient::_impl_.ack_relay_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.legacy_ack_e2e_) +
          decltype(CMsgSteamDatagramConnectionStatsP2PRouterToClient::_impl_.legacy_ack_e2e_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(CMsgSteamDatagramConnectionStatsP2PRouterToClient), alignof(CMsgSteamDatagramConnectionStatsP2PRouterToClient), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&CMsgSteamDatagramConnectionStatsP2PRouterToClient::PlacementNew_,
                                 sizeof(CMsgSteamDatagramConnectionStatsP2PRouterToClient),
                                 alignof(CMsgSteamDatagramConnectionStatsP2PRouterToClient));
  }
}
constexpr auto CMsgSteamDatagramConnectionStatsP2PRouterToClient::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CMsgSteamDatagramConnectionStatsP2PRouterToClient_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CMsgSteamDatagramConnectionStatsP2PRouterToClient::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CMsgSteamDatagramConnectionStatsP2PRouterToClient>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CMsgSteamDatagramConnectionStatsP2PRouterToClient::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CMsgSteamDatagramConnectionStatsP2PRouterToClient>(), &CMsgSteamDatagramConnectionStatsP2PRouterToClient::ByteSizeLong,
              &CMsgSteamDatagramConnectionStatsP2PRouterToClient::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_._cached_size_),
          false,
      },
      &CMsgSteamDatagramConnectionStatsP2PRouterToClient::kDescriptorMethods,
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        CMsgSteamDatagramConnectionStatsP2PRouterToClient_class_data_ =
            CMsgSteamDatagramConnectionStatsP2PRouterToClient::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL CMsgSteamDatagramConnectionStatsP2PRouterToClient::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CMsgSteamDatagramConnectionStatsP2PRouterToClient_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CMsgSteamDatagramConnectionStatsP2PRouterToClient_class_data_.tc_table);
  return CMsgSteamDatagramConnectionStatsP2PRouterToClient_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 15, 2, 0, 2>
CMsgSteamDatagramConnectionStatsP2PRouterToClient::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_._has_bits_),
    0, // no _extensions_
    15, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294934528,  // skipmap
    offsetof(decltype(_table_), field_entries),
    15,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    CMsgSteamDatagramConnectionStatsP2PRouterToClient_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CMsgSteamDatagramConnectionStatsP2PRouterToClient>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.quality_relay_)}},
    // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 2, 1, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.quality_e2e_)}},
    // optional uint32 seconds_until_shutdown = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.seconds_until_shutdown_), 3>(),
     {24, 3, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.seconds_until_shutdown_)}},
    // optional fixed32 migrate_request_ip = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 4, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.migrate_request_ip_)}},
    // optional uint32 migrate_request_port = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.migrate_request_port_), 5>(),
     {40, 5, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.migrate_request_port_)}},
    // optional uint32 scoring_penalty_relay_cluster = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.scoring_penalty_relay_cluster_), 6>(),
     {48, 6, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.scoring_penalty_relay_cluster_)}},
    // repeated fixed32 ack_relay = 7;
    {::_pbi::TcParser::FastF32R1,
     {61, 63, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.ack_relay_)}},
    // repeated fixed32 legacy_ack_e2e = 8;
    {::_pbi::TcParser::FastF32R1,
     {69, 63, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.legacy_ack_e2e_)}},
    // optional uint32 flags = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.flags_), 7>(),
     {72, 7, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.flags_)}},
    // optional uint32 ack_forward_target_revision = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.ack_forward_target_revision_), 8>(),
     {80, 8, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.ack_forward_target_revision_)}},
    // optional bytes routes = 11;
    {::_pbi::TcParser::FastBS1,
     {90, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.routes_)}},
    // optional uint32 ack_peer_routes_revision = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.ack_peer_routes_revision_), 9>(),
     {96, 9, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.ack_peer_routes_revision_)}},
    // optional fixed32 connection_id = 13;
    {::_pbi::TcParser::FastF32S1,
     {109, 10, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.connection_id_)}},
    // optional uint32 seq_num_r2c = 14;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.seq_num_r2c_), 11>(),
     {112, 11, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.seq_num_r2c_)}},
    // optional uint32 seq_num_e2e = 15;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.seq_num_e2e_), 12>(),
     {120, 12, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.seq_num_e2e_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.quality_relay_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.quality_e2e_), _Internal::kHasBitsOffset + 2, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional uint32 seconds_until_shutdown = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.seconds_until_shutdown_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional fixed32 migrate_request_ip = 4;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.migrate_request_ip_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional uint32 migrate_request_port = 5;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.migrate_request_port_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 scoring_penalty_relay_cluster = 6;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.scoring_penalty_relay_cluster_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // repeated fixed32 ack_relay = 7;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.ack_relay_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kFixed32)},
    // repeated fixed32 legacy_ack_e2e = 8;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.legacy_ack_e2e_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kFixed32)},
    // optional uint32 flags = 9;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.flags_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 ack_forward_target_revision = 10;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.ack_forward_target_revision_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional bytes routes = 11;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.routes_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional uint32 ack_peer_routes_revision = 12;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.ack_peer_routes_revision_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional fixed32 connection_id = 13;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.connection_id_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional uint32 seq_num_r2c = 14;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.seq_num_r2c_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 seq_num_e2e = 15;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.seq_num_e2e_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::CMsgSteamDatagramConnectionQuality>()},
      {::_pbi::TcParser::GetTable<::CMsgSteamDatagramConnectionQuality>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void CMsgSteamDatagramConnectionStatsP2PRouterToClient::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramConnectionStatsP2PRouterToClient)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ack_relay_.Clear();
  _impl_.legacy_ack_e2e_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.routes_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.quality_relay_ != nullptr);
      _impl_.quality_relay_->Clear();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(_impl_.quality_e2e_ != nullptr);
      _impl_.quality_e2e_->Clear();
    }
  }
  if ((cached_has_bits & 0x000000f8u) != 0) {
    ::memset(&_impl_.seconds_until_shutdown_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.flags_) -
        reinterpret_cast<char*>(&_impl_.seconds_until_shutdown_)) + sizeof(_impl_.flags_));
  }
  if ((cached_has_bits & 0x00001f00u) != 0) {
    ::memset(&_impl_.ack_forward_target_revision_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.seq_num_e2e_) -
        reinterpret_cast<char*>(&_impl_.ack_forward_target_revision_)) + sizeof(_impl_.seq_num_e2e_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramConnectionStatsP2PRouterToClient::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CMsgSteamDatagramConnectionStatsP2PRouterToClient& this_ = static_cast<const CMsgSteamDatagramConnectionStatsP2PRouterToClient&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramConnectionStatsP2PRouterToClient::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CMsgSteamDatagramConnectionStatsP2PRouterToClient& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramConnectionStatsP2PRouterToClient)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.quality_relay_, this_._impl_.quality_relay_->GetCachedSize(), target,
        stream);
  }

  // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.quality_e2e_, this_._impl_.quality_e2e_->GetCachedSize(), target,
        stream);
  }

  // optional uint32 seconds_until_shutdown = 3;
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this_._internal_seconds_until_shutdown(), target);
  }

  // optional fixed32 migrate_request_ip = 4;
  if ((cached_has_bits & 0x00000010u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        4, this_._internal_migrate_request_ip(), target);
  }

  // optional uint32 migrate_request_port = 5;
  if ((cached_has_bits & 0x00000020u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this_._internal_migrate_request_port(), target);
  }

  // optional uint32 scoring_penalty_relay_cluster = 6;
  if ((cached_has_bits & 0x00000040u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this_._internal_scoring_penalty_relay_cluster(), target);
  }

  // repeated fixed32 ack_relay = 7;
  for (int i = 0, n = this_._internal_ack_relay_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        7, this_._internal_ack_relay().Get(i), target);
  }

  // repeated fixed32 legacy_ack_e2e = 8;
  for (int i = 0, n = this_._internal_legacy_ack_e2e_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        8, this_._internal_legacy_ack_e2e().Get(i), target);
  }

  // optional uint32 flags = 9;
  if ((cached_has_bits & 0x00000080u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        9, this_._internal_flags(), target);
  }

  // optional uint32 ack_forward_target_revision = 10;
  if ((cached_has_bits & 0x00000100u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        10, this_._internal_ack_forward_target_revision(), target);
  }

  // optional bytes routes = 11;
  if ((cached_has_bits & 0x00000001u) != 0) {
    const std::string& _s = this_._internal_routes();
    target = stream->WriteBytesMaybeAliased(11, _s, target);
  }

  // optional uint32 ack_peer_routes_revision = 12;
  if ((cached_has_bits & 0x00000200u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        12, this_._internal_ack_peer_routes_revision(), target);
  }

  // optional fixed32 connection_id = 13;
  if ((cached_has_bits & 0x00000400u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        13, this_._internal_connection_id(), target);
  }

  // optional uint32 seq_num_r2c = 14;
  if ((cached_has_bits & 0x00000800u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        14, this_._internal_seq_num_r2c(), target);
  }

  // optional uint32 seq_num_e2e = 15;
  if ((cached_has_bits & 0x00001000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        15, this_._internal_seq_num_e2e(), target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramConnectionStatsP2PRouterToClient)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CMsgSteamDatagramConnectionStatsP2PRouterToClient::ByteSizeLong(const MessageLite& base) {
  const CMsgSteamDatagramConnectionStatsP2PRouterToClient& this_ = static_cast<const CMsgSteamDatagramConnectionStatsP2PRouterToClient&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t CMsgSteamDatagramConnectionStatsP2PRouterToClient::ByteSizeLong() const {
  const CMsgSteamDatagramConnectionStatsP2PRouterToClient& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramConnectionStatsP2PRouterToClient)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated fixed32 ack_relay = 7;
    {
      std::size_t data_size = std::size_t{4} *
          ::_pbi::FromIntSize(this_._internal_ack_relay_size());
      std::size_t tag_size = std::size_t{1} *
          ::_pbi::FromIntSize(this_._internal_ack_relay_size());
      total_size += tag_size + data_size;
    }
    // repeated fixed32 legacy_ack_e2e = 8;
    {
      std::size_t data_size = std::size_t{4} *
          ::_pbi::FromIntSize(this_._internal_legacy_ack_e2e_size());
      std::size_t tag_size = std::size_t{1} *
          ::_pbi::FromIntSize(this_._internal_legacy_ack_e2e_size());
      total_size += tag_size + data_size;
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += ::absl::popcount(0x00000410u & cached_has_bits) * 5;
  if ((cached_has_bits & 0x000000efu) != 0) {
    // optional bytes routes = 11;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this_._internal_routes());
    }
    // optional .CMsgSteamDatagramConnectionQuality quality_relay = 1;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.quality_relay_);
    }
    // optional .CMsgSteamDatagramConnectionQuality quality_e2e = 2;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.quality_e2e_);
    }
    // optional uint32 seconds_until_shutdown = 3;
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_seconds_until_shutdown());
    }
    // optional uint32 migrate_request_port = 5;
    if ((cached_has_bits & 0x00000020u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_migrate_request_port());
    }
    // optional uint32 scoring_penalty_relay_cluster = 6;
    if ((cached_has_bits & 0x00000040u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_scoring_penalty_relay_cluster());
    }
    // optional uint32 flags = 9;
    if ((cached_has_bits & 0x00000080u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_flags());
    }
  }
  if ((cached_has_bits & 0x00001b00u) != 0) {
    // optional uint32 ack_forward_target_revision = 10;
    if ((cached_has_bits & 0x00000100u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_ack_forward_target_revision());
    }
    // optional uint32 ack_peer_routes_revision = 12;
    if ((cached_has_bits & 0x00000200u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_ack_peer_routes_revision());
    }
    // optional uint32 seq_num_r2c = 14;
    if ((cached_has_bits & 0x00000800u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_seq_num_r2c());
    }
    // optional uint32 seq_num_e2e = 15;
    if ((cached_has_bits & 0x00001000u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_seq_num_e2e());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void CMsgSteamDatagramConnectionStatsP2PRouterToClient::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramConnectionStatsP2PRouterToClient*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramConnectionStatsP2PRouterToClient&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramConnectionStatsP2PRouterToClient)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_ack_relay()->MergeFrom(from._internal_ack_relay());
  _this->_internal_mutable_legacy_ack_e2e()->MergeFrom(from._internal_legacy_ack_e2e());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_internal_set_routes(from._internal_routes());
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.quality_relay_ != nullptr);
      if (_this->_impl_.quality_relay_ == nullptr) {
        _this->_impl_.quality_relay_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.quality_relay_);
      } else {
        _this->_impl_.quality_relay_->MergeFrom(*from._impl_.quality_relay_);
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(from._impl_.quality_e2e_ != nullptr);
      if (_this->_impl_.quality_e2e_ == nullptr) {
        _this->_impl_.quality_e2e_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.quality_e2e_);
      } else {
        _this->_impl_.quality_e2e_->MergeFrom(*from._impl_.quality_e2e_);
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _this->_impl_.seconds_until_shutdown_ = from._impl_.seconds_until_shutdown_;
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _this->_impl_.migrate_request_ip_ = from._impl_.migrate_request_ip_;
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      _this->_impl_.migrate_request_port_ = from._impl_.migrate_request_port_;
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      _this->_impl_.scoring_penalty_relay_cluster_ = from._impl_.scoring_penalty_relay_cluster_;
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      _this->_impl_.flags_ = from._impl_.flags_;
    }
  }
  if ((cached_has_bits & 0x00001f00u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      _this->_impl_.ack_forward_target_revision_ = from._impl_.ack_forward_target_revision_;
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      _this->_impl_.ack_peer_routes_revision_ = from._impl_.ack_peer_routes_revision_;
    }
    if ((cached_has_bits & 0x00000400u) != 0) {
      _this->_impl_.connection_id_ = from._impl_.connection_id_;
    }
    if ((cached_has_bits & 0x00000800u) != 0) {
      _this->_impl_.seq_num_r2c_ = from._impl_.seq_num_r2c_;
    }
    if ((cached_has_bits & 0x00001000u) != 0) {
      _this->_impl_.seq_num_e2e_ = from._impl_.seq_num_e2e_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramConnectionStatsP2PRouterToClient::CopyFrom(const CMsgSteamDatagramConnectionStatsP2PRouterToClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramConnectionStatsP2PRouterToClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CMsgSteamDatagramConnectionStatsP2PRouterToClient::InternalSwap(CMsgSteamDatagramConnectionStatsP2PRouterToClient* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.ack_relay_.InternalSwap(&other->_impl_.ack_relay_);
  _impl_.legacy_ack_e2e_.InternalSwap(&other->_impl_.legacy_ack_e2e_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.routes_, &other->_impl_.routes_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.seq_num_e2e_)
      + sizeof(CMsgSteamDatagramConnectionStatsP2PRouterToClient::_impl_.seq_num_e2e_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramConnectionStatsP2PRouterToClient, _impl_.quality_relay_)>(
          reinterpret_cast<char*>(&_impl_.quality_relay_),
          reinterpret_cast<char*>(&other->_impl_.quality_relay_));
}

::google::protobuf::Metadata CMsgSteamDatagramConnectionStatsP2PRouterToClient::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CMsgSteamDatagramP2PBadRouteRouterToClient::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CMsgSteamDatagramP2PBadRouteRouterToClient>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PBadRouteRouterToClient, _impl_._has_bits_);
};

CMsgSteamDatagramP2PBadRouteRouterToClient::CMsgSteamDatagramP2PBadRouteRouterToClient(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramP2PBadRouteRouterToClient_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramP2PBadRouteRouterToClient)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramP2PBadRouteRouterToClient::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::CMsgSteamDatagramP2PBadRouteRouterToClient& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        failed_relay_routing_token_(arena, from.failed_relay_routing_token_) {}

CMsgSteamDatagramP2PBadRouteRouterToClient::CMsgSteamDatagramP2PBadRouteRouterToClient(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const CMsgSteamDatagramP2PBadRouteRouterToClient& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramP2PBadRouteRouterToClient_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CMsgSteamDatagramP2PBadRouteRouterToClient* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, connection_id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, connection_id_),
           offsetof(Impl_, kludge_pad_) -
               offsetof(Impl_, connection_id_) +
               sizeof(Impl_::kludge_pad_));

  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramP2PBadRouteRouterToClient)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramP2PBadRouteRouterToClient::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        failed_relay_routing_token_(arena) {}

inline void CMsgSteamDatagramP2PBadRouteRouterToClient::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, connection_id_),
           0,
           offsetof(Impl_, kludge_pad_) -
               offsetof(Impl_, connection_id_) +
               sizeof(Impl_::kludge_pad_));
}
CMsgSteamDatagramP2PBadRouteRouterToClient::~CMsgSteamDatagramP2PBadRouteRouterToClient() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramP2PBadRouteRouterToClient)
  SharedDtor(*this);
}
inline void CMsgSteamDatagramP2PBadRouteRouterToClient::SharedDtor(MessageLite& self) {
  CMsgSteamDatagramP2PBadRouteRouterToClient& this_ = static_cast<CMsgSteamDatagramP2PBadRouteRouterToClient&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.failed_relay_routing_token_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CMsgSteamDatagramP2PBadRouteRouterToClient::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CMsgSteamDatagramP2PBadRouteRouterToClient(arena);
}
constexpr auto CMsgSteamDatagramP2PBadRouteRouterToClient::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(CMsgSteamDatagramP2PBadRouteRouterToClient),
                                            alignof(CMsgSteamDatagramP2PBadRouteRouterToClient));
}
constexpr auto CMsgSteamDatagramP2PBadRouteRouterToClient::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CMsgSteamDatagramP2PBadRouteRouterToClient_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CMsgSteamDatagramP2PBadRouteRouterToClient::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CMsgSteamDatagramP2PBadRouteRouterToClient>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CMsgSteamDatagramP2PBadRouteRouterToClient::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CMsgSteamDatagramP2PBadRouteRouterToClient>(), &CMsgSteamDatagramP2PBadRouteRouterToClient::ByteSizeLong,
              &CMsgSteamDatagramP2PBadRouteRouterToClient::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PBadRouteRouterToClient, _impl_._cached_size_),
          false,
      },
      &CMsgSteamDatagramP2PBadRouteRouterToClient::kDescriptorMethods,
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        CMsgSteamDatagramP2PBadRouteRouterToClient_class_data_ =
            CMsgSteamDatagramP2PBadRouteRouterToClient::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL CMsgSteamDatagramP2PBadRouteRouterToClient::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CMsgSteamDatagramP2PBadRouteRouterToClient_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CMsgSteamDatagramP2PBadRouteRouterToClient_class_data_.tc_table);
  return CMsgSteamDatagramP2PBadRouteRouterToClient_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 0, 7>
CMsgSteamDatagramP2PBadRouteRouterToClient::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PBadRouteRouterToClient, _impl_._has_bits_),
    0, // no _extensions_
    99, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    CMsgSteamDatagramP2PBadRouteRouterToClient_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CMsgSteamDatagramP2PBadRouteRouterToClient>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional fixed32 connection_id = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PBadRouteRouterToClient, _impl_.connection_id_)}},
    // optional bytes failed_relay_routing_token = 2;
    {::_pbi::TcParser::FastBS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PBadRouteRouterToClient, _impl_.failed_relay_routing_token_)}},
    // optional uint32 ack_forward_target_revision = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramP2PBadRouteRouterToClient, _impl_.ack_forward_target_revision_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PBadRouteRouterToClient, _impl_.ack_forward_target_revision_)}},
  }}, {{
    99, 0, 1,
    65534, 3,
    65535, 65535
  }}, {{
    // optional fixed32 connection_id = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PBadRouteRouterToClient, _impl_.connection_id_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional bytes failed_relay_routing_token = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PBadRouteRouterToClient, _impl_.failed_relay_routing_token_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional uint32 ack_forward_target_revision = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PBadRouteRouterToClient, _impl_.ack_forward_target_revision_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional fixed64 kludge_pad = 99;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PBadRouteRouterToClient, _impl_.kludge_pad_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
  }},
  // no aux_entries
  {{
  }},
};
PROTOBUF_NOINLINE void CMsgSteamDatagramP2PBadRouteRouterToClient::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramP2PBadRouteRouterToClient)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _impl_.failed_relay_routing_token_.ClearNonDefaultToEmpty();
  }
  if ((cached_has_bits & 0x0000000eu) != 0) {
    ::memset(&_impl_.connection_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.kludge_pad_) -
        reinterpret_cast<char*>(&_impl_.connection_id_)) + sizeof(_impl_.kludge_pad_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramP2PBadRouteRouterToClient::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CMsgSteamDatagramP2PBadRouteRouterToClient& this_ = static_cast<const CMsgSteamDatagramP2PBadRouteRouterToClient&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramP2PBadRouteRouterToClient::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CMsgSteamDatagramP2PBadRouteRouterToClient& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramP2PBadRouteRouterToClient)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional fixed32 connection_id = 1;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        1, this_._internal_connection_id(), target);
  }

  // optional bytes failed_relay_routing_token = 2;
  if ((cached_has_bits & 0x00000001u) != 0) {
    const std::string& _s = this_._internal_failed_relay_routing_token();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  // optional uint32 ack_forward_target_revision = 3;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this_._internal_ack_forward_target_revision(), target);
  }

  // optional fixed64 kludge_pad = 99;
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        99, this_._internal_kludge_pad(), target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramP2PBadRouteRouterToClient)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CMsgSteamDatagramP2PBadRouteRouterToClient::ByteSizeLong(const MessageLite& base) {
  const CMsgSteamDatagramP2PBadRouteRouterToClient& this_ = static_cast<const CMsgSteamDatagramP2PBadRouteRouterToClient&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t CMsgSteamDatagramP2PBadRouteRouterToClient::ByteSizeLong() const {
  const CMsgSteamDatagramP2PBadRouteRouterToClient& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramP2PBadRouteRouterToClient)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += static_cast<bool>(0x00000008u & cached_has_bits) * 10;
  total_size += static_cast<bool>(0x00000002u & cached_has_bits) * 5;
  if ((cached_has_bits & 0x00000005u) != 0) {
    // optional bytes failed_relay_routing_token = 2;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this_._internal_failed_relay_routing_token());
    }
    // optional uint32 ack_forward_target_revision = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_ack_forward_target_revision());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void CMsgSteamDatagramP2PBadRouteRouterToClient::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramP2PBadRouteRouterToClient*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramP2PBadRouteRouterToClient&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramP2PBadRouteRouterToClient)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_internal_set_failed_relay_routing_token(from._internal_failed_relay_routing_token());
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_impl_.connection_id_ = from._impl_.connection_id_;
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_impl_.ack_forward_target_revision_ = from._impl_.ack_forward_target_revision_;
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _this->_impl_.kludge_pad_ = from._impl_.kludge_pad_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramP2PBadRouteRouterToClient::CopyFrom(const CMsgSteamDatagramP2PBadRouteRouterToClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramP2PBadRouteRouterToClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CMsgSteamDatagramP2PBadRouteRouterToClient::InternalSwap(CMsgSteamDatagramP2PBadRouteRouterToClient* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.failed_relay_routing_token_, &other->_impl_.failed_relay_routing_token_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PBadRouteRouterToClient, _impl_.kludge_pad_)
      + sizeof(CMsgSteamDatagramP2PBadRouteRouterToClient::_impl_.kludge_pad_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PBadRouteRouterToClient, _impl_.connection_id_)>(
          reinterpret_cast<char*>(&_impl_.connection_id_),
          reinterpret_cast<char*>(&other->_impl_.connection_id_));
}

::google::protobuf::Metadata CMsgSteamDatagramP2PBadRouteRouterToClient::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CMsgSteamDatagramP2PRoutes_RelayCluster::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CMsgSteamDatagramP2PRoutes_RelayCluster>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes_RelayCluster, _impl_._has_bits_);
};

CMsgSteamDatagramP2PRoutes_RelayCluster::CMsgSteamDatagramP2PRoutes_RelayCluster(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramP2PRoutes_RelayCluster_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramP2PRoutes.RelayCluster)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramP2PRoutes_RelayCluster::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::CMsgSteamDatagramP2PRoutes_RelayCluster& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        session_relay_routing_token_(arena, from.session_relay_routing_token_) {}

CMsgSteamDatagramP2PRoutes_RelayCluster::CMsgSteamDatagramP2PRoutes_RelayCluster(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const CMsgSteamDatagramP2PRoutes_RelayCluster& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramP2PRoutes_RelayCluster_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CMsgSteamDatagramP2PRoutes_RelayCluster* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, pop_id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, pop_id_),
           offsetof(Impl_, score_penalty_) -
               offsetof(Impl_, pop_id_) +
               sizeof(Impl_::score_penalty_));

  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramP2PRoutes.RelayCluster)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramP2PRoutes_RelayCluster::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        session_relay_routing_token_(arena) {}

inline void CMsgSteamDatagramP2PRoutes_RelayCluster::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, pop_id_),
           0,
           offsetof(Impl_, score_penalty_) -
               offsetof(Impl_, pop_id_) +
               sizeof(Impl_::score_penalty_));
}
CMsgSteamDatagramP2PRoutes_RelayCluster::~CMsgSteamDatagramP2PRoutes_RelayCluster() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramP2PRoutes.RelayCluster)
  SharedDtor(*this);
}
inline void CMsgSteamDatagramP2PRoutes_RelayCluster::SharedDtor(MessageLite& self) {
  CMsgSteamDatagramP2PRoutes_RelayCluster& this_ = static_cast<CMsgSteamDatagramP2PRoutes_RelayCluster&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.session_relay_routing_token_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CMsgSteamDatagramP2PRoutes_RelayCluster::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CMsgSteamDatagramP2PRoutes_RelayCluster(arena);
}
constexpr auto CMsgSteamDatagramP2PRoutes_RelayCluster::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(CMsgSteamDatagramP2PRoutes_RelayCluster),
                                            alignof(CMsgSteamDatagramP2PRoutes_RelayCluster));
}
constexpr auto CMsgSteamDatagramP2PRoutes_RelayCluster::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CMsgSteamDatagramP2PRoutes_RelayCluster_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CMsgSteamDatagramP2PRoutes_RelayCluster::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CMsgSteamDatagramP2PRoutes_RelayCluster>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CMsgSteamDatagramP2PRoutes_RelayCluster::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CMsgSteamDatagramP2PRoutes_RelayCluster>(), &CMsgSteamDatagramP2PRoutes_RelayCluster::ByteSizeLong,
              &CMsgSteamDatagramP2PRoutes_RelayCluster::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes_RelayCluster, _impl_._cached_size_),
          false,
      },
      &CMsgSteamDatagramP2PRoutes_RelayCluster::kDescriptorMethods,
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        CMsgSteamDatagramP2PRoutes_RelayCluster_class_data_ =
            CMsgSteamDatagramP2PRoutes_RelayCluster::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL CMsgSteamDatagramP2PRoutes_RelayCluster::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CMsgSteamDatagramP2PRoutes_RelayCluster_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CMsgSteamDatagramP2PRoutes_RelayCluster_class_data_.tc_table);
  return CMsgSteamDatagramP2PRoutes_RelayCluster_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 0, 2>
CMsgSteamDatagramP2PRoutes_RelayCluster::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes_RelayCluster, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    CMsgSteamDatagramP2PRoutes_RelayCluster_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CMsgSteamDatagramP2PRoutes_RelayCluster>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional bytes session_relay_routing_token = 4;
    {::_pbi::TcParser::FastBS1,
     {34, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes_RelayCluster, _impl_.session_relay_routing_token_)}},
    // optional fixed32 pop_id = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes_RelayCluster, _impl_.pop_id_)}},
    // optional uint32 ping_ms = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramP2PRoutes_RelayCluster, _impl_.ping_ms_), 2>(),
     {16, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes_RelayCluster, _impl_.ping_ms_)}},
    // optional uint32 score_penalty = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramP2PRoutes_RelayCluster, _impl_.score_penalty_), 3>(),
     {24, 3, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes_RelayCluster, _impl_.score_penalty_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional fixed32 pop_id = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes_RelayCluster, _impl_.pop_id_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional uint32 ping_ms = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes_RelayCluster, _impl_.ping_ms_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 score_penalty = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes_RelayCluster, _impl_.score_penalty_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional bytes session_relay_routing_token = 4;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes_RelayCluster, _impl_.session_relay_routing_token_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
  }},
};
PROTOBUF_NOINLINE void CMsgSteamDatagramP2PRoutes_RelayCluster::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramP2PRoutes.RelayCluster)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _impl_.session_relay_routing_token_.ClearNonDefaultToEmpty();
  }
  if ((cached_has_bits & 0x0000000eu) != 0) {
    ::memset(&_impl_.pop_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.score_penalty_) -
        reinterpret_cast<char*>(&_impl_.pop_id_)) + sizeof(_impl_.score_penalty_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramP2PRoutes_RelayCluster::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CMsgSteamDatagramP2PRoutes_RelayCluster& this_ = static_cast<const CMsgSteamDatagramP2PRoutes_RelayCluster&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramP2PRoutes_RelayCluster::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CMsgSteamDatagramP2PRoutes_RelayCluster& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramP2PRoutes.RelayCluster)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional fixed32 pop_id = 1;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        1, this_._internal_pop_id(), target);
  }

  // optional uint32 ping_ms = 2;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this_._internal_ping_ms(), target);
  }

  // optional uint32 score_penalty = 3;
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this_._internal_score_penalty(), target);
  }

  // optional bytes session_relay_routing_token = 4;
  if ((cached_has_bits & 0x00000001u) != 0) {
    const std::string& _s = this_._internal_session_relay_routing_token();
    target = stream->WriteBytesMaybeAliased(4, _s, target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramP2PRoutes.RelayCluster)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CMsgSteamDatagramP2PRoutes_RelayCluster::ByteSizeLong(const MessageLite& base) {
  const CMsgSteamDatagramP2PRoutes_RelayCluster& this_ = static_cast<const CMsgSteamDatagramP2PRoutes_RelayCluster&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t CMsgSteamDatagramP2PRoutes_RelayCluster::ByteSizeLong() const {
  const CMsgSteamDatagramP2PRoutes_RelayCluster& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramP2PRoutes.RelayCluster)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += static_cast<bool>(0x00000002u & cached_has_bits) * 5;
  if ((cached_has_bits & 0x0000000du) != 0) {
    // optional bytes session_relay_routing_token = 4;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this_._internal_session_relay_routing_token());
    }
    // optional uint32 ping_ms = 2;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_ping_ms());
    }
    // optional uint32 score_penalty = 3;
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_score_penalty());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void CMsgSteamDatagramP2PRoutes_RelayCluster::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramP2PRoutes_RelayCluster*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramP2PRoutes_RelayCluster&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramP2PRoutes.RelayCluster)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_internal_set_session_relay_routing_token(from._internal_session_relay_routing_token());
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_impl_.pop_id_ = from._impl_.pop_id_;
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_impl_.ping_ms_ = from._impl_.ping_ms_;
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _this->_impl_.score_penalty_ = from._impl_.score_penalty_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramP2PRoutes_RelayCluster::CopyFrom(const CMsgSteamDatagramP2PRoutes_RelayCluster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramP2PRoutes.RelayCluster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CMsgSteamDatagramP2PRoutes_RelayCluster::InternalSwap(CMsgSteamDatagramP2PRoutes_RelayCluster* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.session_relay_routing_token_, &other->_impl_.session_relay_routing_token_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes_RelayCluster, _impl_.score_penalty_)
      + sizeof(CMsgSteamDatagramP2PRoutes_RelayCluster::_impl_.score_penalty_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes_RelayCluster, _impl_.pop_id_)>(
          reinterpret_cast<char*>(&_impl_.pop_id_),
          reinterpret_cast<char*>(&other->_impl_.pop_id_));
}

::google::protobuf::Metadata CMsgSteamDatagramP2PRoutes_RelayCluster::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CMsgSteamDatagramP2PRoutes_Route::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CMsgSteamDatagramP2PRoutes_Route>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes_Route, _impl_._has_bits_);
};

CMsgSteamDatagramP2PRoutes_Route::CMsgSteamDatagramP2PRoutes_Route(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramP2PRoutes_Route_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramP2PRoutes.Route)
}
CMsgSteamDatagramP2PRoutes_Route::CMsgSteamDatagramP2PRoutes_Route(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const CMsgSteamDatagramP2PRoutes_Route& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramP2PRoutes_Route_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramP2PRoutes_Route::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void CMsgSteamDatagramP2PRoutes_Route::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, my_pop_id_),
           0,
           offsetof(Impl_, interior_score_) -
               offsetof(Impl_, my_pop_id_) +
               sizeof(Impl_::interior_score_));
}
CMsgSteamDatagramP2PRoutes_Route::~CMsgSteamDatagramP2PRoutes_Route() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramP2PRoutes.Route)
  SharedDtor(*this);
}
inline void CMsgSteamDatagramP2PRoutes_Route::SharedDtor(MessageLite& self) {
  CMsgSteamDatagramP2PRoutes_Route& this_ = static_cast<CMsgSteamDatagramP2PRoutes_Route&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CMsgSteamDatagramP2PRoutes_Route::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CMsgSteamDatagramP2PRoutes_Route(arena);
}
constexpr auto CMsgSteamDatagramP2PRoutes_Route::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(CMsgSteamDatagramP2PRoutes_Route),
                                            alignof(CMsgSteamDatagramP2PRoutes_Route));
}
constexpr auto CMsgSteamDatagramP2PRoutes_Route::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CMsgSteamDatagramP2PRoutes_Route_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CMsgSteamDatagramP2PRoutes_Route::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CMsgSteamDatagramP2PRoutes_Route>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CMsgSteamDatagramP2PRoutes_Route::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CMsgSteamDatagramP2PRoutes_Route>(), &CMsgSteamDatagramP2PRoutes_Route::ByteSizeLong,
              &CMsgSteamDatagramP2PRoutes_Route::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes_Route, _impl_._cached_size_),
          false,
      },
      &CMsgSteamDatagramP2PRoutes_Route::kDescriptorMethods,
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        CMsgSteamDatagramP2PRoutes_Route_class_data_ =
            CMsgSteamDatagramP2PRoutes_Route::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL CMsgSteamDatagramP2PRoutes_Route::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CMsgSteamDatagramP2PRoutes_Route_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CMsgSteamDatagramP2PRoutes_Route_class_data_.tc_table);
  return CMsgSteamDatagramP2PRoutes_Route_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 0, 2>
CMsgSteamDatagramP2PRoutes_Route::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes_Route, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    CMsgSteamDatagramP2PRoutes_Route_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CMsgSteamDatagramP2PRoutes_Route>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional uint32 interior_score = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramP2PRoutes_Route, _impl_.interior_score_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes_Route, _impl_.interior_score_)}},
    // optional fixed32 my_pop_id = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes_Route, _impl_.my_pop_id_)}},
    // optional fixed32 your_pop_id = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes_Route, _impl_.your_pop_id_)}},
    // optional uint32 legacy_score = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramP2PRoutes_Route, _impl_.legacy_score_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes_Route, _impl_.legacy_score_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional fixed32 my_pop_id = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes_Route, _impl_.my_pop_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional fixed32 your_pop_id = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes_Route, _impl_.your_pop_id_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional uint32 legacy_score = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes_Route, _impl_.legacy_score_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 interior_score = 4;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes_Route, _impl_.interior_score_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};
PROTOBUF_NOINLINE void CMsgSteamDatagramP2PRoutes_Route::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramP2PRoutes.Route)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    ::memset(&_impl_.my_pop_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.interior_score_) -
        reinterpret_cast<char*>(&_impl_.my_pop_id_)) + sizeof(_impl_.interior_score_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramP2PRoutes_Route::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CMsgSteamDatagramP2PRoutes_Route& this_ = static_cast<const CMsgSteamDatagramP2PRoutes_Route&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramP2PRoutes_Route::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CMsgSteamDatagramP2PRoutes_Route& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramP2PRoutes.Route)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional fixed32 my_pop_id = 1;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        1, this_._internal_my_pop_id(), target);
  }

  // optional fixed32 your_pop_id = 2;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        2, this_._internal_your_pop_id(), target);
  }

  // optional uint32 legacy_score = 3;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this_._internal_legacy_score(), target);
  }

  // optional uint32 interior_score = 4;
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this_._internal_interior_score(), target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramP2PRoutes.Route)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CMsgSteamDatagramP2PRoutes_Route::ByteSizeLong(const MessageLite& base) {
  const CMsgSteamDatagramP2PRoutes_Route& this_ = static_cast<const CMsgSteamDatagramP2PRoutes_Route&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t CMsgSteamDatagramP2PRoutes_Route::ByteSizeLong() const {
  const CMsgSteamDatagramP2PRoutes_Route& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramP2PRoutes.Route)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += ::absl::popcount(0x00000003u & cached_has_bits) * 5;
  if ((cached_has_bits & 0x0000000cu) != 0) {
    // optional uint32 legacy_score = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_legacy_score());
    }
    // optional uint32 interior_score = 4;
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_interior_score());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void CMsgSteamDatagramP2PRoutes_Route::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramP2PRoutes_Route*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramP2PRoutes_Route&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramP2PRoutes.Route)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_impl_.my_pop_id_ = from._impl_.my_pop_id_;
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_impl_.your_pop_id_ = from._impl_.your_pop_id_;
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_impl_.legacy_score_ = from._impl_.legacy_score_;
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _this->_impl_.interior_score_ = from._impl_.interior_score_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramP2PRoutes_Route::CopyFrom(const CMsgSteamDatagramP2PRoutes_Route& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramP2PRoutes.Route)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CMsgSteamDatagramP2PRoutes_Route::InternalSwap(CMsgSteamDatagramP2PRoutes_Route* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes_Route, _impl_.interior_score_)
      + sizeof(CMsgSteamDatagramP2PRoutes_Route::_impl_.interior_score_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes_Route, _impl_.my_pop_id_)>(
          reinterpret_cast<char*>(&_impl_.my_pop_id_),
          reinterpret_cast<char*>(&other->_impl_.my_pop_id_));
}

::google::protobuf::Metadata CMsgSteamDatagramP2PRoutes_Route::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CMsgSteamDatagramP2PRoutes::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CMsgSteamDatagramP2PRoutes>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes, _impl_._has_bits_);
};

CMsgSteamDatagramP2PRoutes::CMsgSteamDatagramP2PRoutes(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramP2PRoutes_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramP2PRoutes)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramP2PRoutes::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::CMsgSteamDatagramP2PRoutes& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        relay_clusters_{visibility, arena, from.relay_clusters_},
        routes_{visibility, arena, from.routes_} {}

CMsgSteamDatagramP2PRoutes::CMsgSteamDatagramP2PRoutes(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const CMsgSteamDatagramP2PRoutes& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramP2PRoutes_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CMsgSteamDatagramP2PRoutes* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.revision_ = from._impl_.revision_;

  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramP2PRoutes)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramP2PRoutes::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        relay_clusters_{visibility, arena},
        routes_{visibility, arena} {}

inline void CMsgSteamDatagramP2PRoutes::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.revision_ = {};
}
CMsgSteamDatagramP2PRoutes::~CMsgSteamDatagramP2PRoutes() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramP2PRoutes)
  SharedDtor(*this);
}
inline void CMsgSteamDatagramP2PRoutes::SharedDtor(MessageLite& self) {
  CMsgSteamDatagramP2PRoutes& this_ = static_cast<CMsgSteamDatagramP2PRoutes&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CMsgSteamDatagramP2PRoutes::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CMsgSteamDatagramP2PRoutes(arena);
}
constexpr auto CMsgSteamDatagramP2PRoutes::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes, _impl_.relay_clusters_) +
          decltype(CMsgSteamDatagramP2PRoutes::_impl_.relay_clusters_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes, _impl_.routes_) +
          decltype(CMsgSteamDatagramP2PRoutes::_impl_.routes_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(CMsgSteamDatagramP2PRoutes), alignof(CMsgSteamDatagramP2PRoutes), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&CMsgSteamDatagramP2PRoutes::PlacementNew_,
                                 sizeof(CMsgSteamDatagramP2PRoutes),
                                 alignof(CMsgSteamDatagramP2PRoutes));
  }
}
constexpr auto CMsgSteamDatagramP2PRoutes::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CMsgSteamDatagramP2PRoutes_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CMsgSteamDatagramP2PRoutes::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CMsgSteamDatagramP2PRoutes>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CMsgSteamDatagramP2PRoutes::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CMsgSteamDatagramP2PRoutes>(), &CMsgSteamDatagramP2PRoutes::ByteSizeLong,
              &CMsgSteamDatagramP2PRoutes::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes, _impl_._cached_size_),
          false,
      },
      &CMsgSteamDatagramP2PRoutes::kDescriptorMethods,
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        CMsgSteamDatagramP2PRoutes_class_data_ =
            CMsgSteamDatagramP2PRoutes::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL CMsgSteamDatagramP2PRoutes::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CMsgSteamDatagramP2PRoutes_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CMsgSteamDatagramP2PRoutes_class_data_.tc_table);
  return CMsgSteamDatagramP2PRoutes_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 0, 2>
CMsgSteamDatagramP2PRoutes::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    CMsgSteamDatagramP2PRoutes_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CMsgSteamDatagramP2PRoutes>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .CMsgSteamDatagramP2PRoutes.RelayCluster relay_clusters = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes, _impl_.relay_clusters_)}},
    // repeated .CMsgSteamDatagramP2PRoutes.Route routes = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes, _impl_.routes_)}},
    // optional uint32 revision = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamDatagramP2PRoutes, _impl_.revision_), 0>(),
     {24, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes, _impl_.revision_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .CMsgSteamDatagramP2PRoutes.RelayCluster relay_clusters = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes, _impl_.relay_clusters_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .CMsgSteamDatagramP2PRoutes.Route routes = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes, _impl_.routes_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional uint32 revision = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramP2PRoutes, _impl_.revision_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::CMsgSteamDatagramP2PRoutes_RelayCluster>()},
      {::_pbi::TcParser::GetTable<::CMsgSteamDatagramP2PRoutes_Route>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void CMsgSteamDatagramP2PRoutes::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramP2PRoutes)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.relay_clusters_.Clear();
  _impl_.routes_.Clear();
  _impl_.revision_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramP2PRoutes::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CMsgSteamDatagramP2PRoutes& this_ = static_cast<const CMsgSteamDatagramP2PRoutes&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramP2PRoutes::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CMsgSteamDatagramP2PRoutes& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramP2PRoutes)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .CMsgSteamDatagramP2PRoutes.RelayCluster relay_clusters = 1;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_relay_clusters_size());
       i < n; i++) {
    const auto& repfield = this_._internal_relay_clusters().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            1, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // repeated .CMsgSteamDatagramP2PRoutes.Route routes = 2;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_routes_size());
       i < n; i++) {
    const auto& repfield = this_._internal_routes().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            2, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional uint32 revision = 3;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this_._internal_revision(), target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramP2PRoutes)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CMsgSteamDatagramP2PRoutes::ByteSizeLong(const MessageLite& base) {
  const CMsgSteamDatagramP2PRoutes& this_ = static_cast<const CMsgSteamDatagramP2PRoutes&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t CMsgSteamDatagramP2PRoutes::ByteSizeLong() const {
  const CMsgSteamDatagramP2PRoutes& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramP2PRoutes)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .CMsgSteamDatagramP2PRoutes.RelayCluster relay_clusters = 1;
    {
      total_size += 1UL * this_._internal_relay_clusters_size();
      for (const auto& msg : this_._internal_relay_clusters()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
    // repeated .CMsgSteamDatagramP2PRoutes.Route routes = 2;
    {
      total_size += 1UL * this_._internal_routes_size();
      for (const auto& msg : this_._internal_routes()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
   {
    // optional uint32 revision = 3;
    cached_has_bits = this_._impl_._has_bits_[0];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_revision());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void CMsgSteamDatagramP2PRoutes::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramP2PRoutes*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramP2PRoutes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramP2PRoutes)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_relay_clusters()->MergeFrom(
      from._internal_relay_clusters());
  _this->_internal_mutable_routes()->MergeFrom(
      from._internal_routes());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _this->_impl_.revision_ = from._impl_.revision_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramP2PRoutes::CopyFrom(const CMsgSteamDatagramP2PRoutes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramP2PRoutes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CMsgSteamDatagramP2PRoutes::InternalSwap(CMsgSteamDatagramP2PRoutes* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.relay_clusters_.InternalSwap(&other->_impl_.relay_clusters_);
  _impl_.routes_.InternalSwap(&other->_impl_.routes_);
  swap(_impl_.revision_, other->_impl_.revision_);
}

::google::protobuf::Metadata CMsgSteamDatagramP2PRoutes::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CMsgSteamDatagramSetSecondaryAddressRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CMsgSteamDatagramSetSecondaryAddressRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramSetSecondaryAddressRequest, _impl_._has_bits_);
};

CMsgSteamDatagramSetSecondaryAddressRequest::CMsgSteamDatagramSetSecondaryAddressRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramSetSecondaryAddressRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramSetSecondaryAddressRequest)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramSetSecondaryAddressRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::CMsgSteamDatagramSetSecondaryAddressRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        client_identity_(arena, from.client_identity_),
        kludge_pad_(arena, from.kludge_pad_) {}

CMsgSteamDatagramSetSecondaryAddressRequest::CMsgSteamDatagramSetSecondaryAddressRequest(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const CMsgSteamDatagramSetSecondaryAddressRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramSetSecondaryAddressRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CMsgSteamDatagramSetSecondaryAddressRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, client_main_ip_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, client_main_ip_),
           offsetof(Impl_, request_send_duplication_) -
               offsetof(Impl_, client_main_ip_) +
               sizeof(Impl_::request_send_duplication_));

  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramSetSecondaryAddressRequest)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramSetSecondaryAddressRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        client_identity_(arena),
        kludge_pad_(arena) {}

inline void CMsgSteamDatagramSetSecondaryAddressRequest::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, client_main_ip_),
           0,
           offsetof(Impl_, request_send_duplication_) -
               offsetof(Impl_, client_main_ip_) +
               sizeof(Impl_::request_send_duplication_));
}
CMsgSteamDatagramSetSecondaryAddressRequest::~CMsgSteamDatagramSetSecondaryAddressRequest() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramSetSecondaryAddressRequest)
  SharedDtor(*this);
}
inline void CMsgSteamDatagramSetSecondaryAddressRequest::SharedDtor(MessageLite& self) {
  CMsgSteamDatagramSetSecondaryAddressRequest& this_ = static_cast<CMsgSteamDatagramSetSecondaryAddressRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.client_identity_.Destroy();
  this_._impl_.kludge_pad_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CMsgSteamDatagramSetSecondaryAddressRequest::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CMsgSteamDatagramSetSecondaryAddressRequest(arena);
}
constexpr auto CMsgSteamDatagramSetSecondaryAddressRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(CMsgSteamDatagramSetSecondaryAddressRequest),
                                            alignof(CMsgSteamDatagramSetSecondaryAddressRequest));
}
constexpr auto CMsgSteamDatagramSetSecondaryAddressRequest::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CMsgSteamDatagramSetSecondaryAddressRequest_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CMsgSteamDatagramSetSecondaryAddressRequest::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CMsgSteamDatagramSetSecondaryAddressRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CMsgSteamDatagramSetSecondaryAddressRequest::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CMsgSteamDatagramSetSecondaryAddressRequest>(), &CMsgSteamDatagramSetSecondaryAddressRequest::ByteSizeLong,
              &CMsgSteamDatagramSetSecondaryAddressRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramSetSecondaryAddressRequest, _impl_._cached_size_),
          false,
      },
      &CMsgSteamDatagramSetSecondaryAddressRequest::kDescriptorMethods,
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        CMsgSteamDatagramSetSecondaryAddressRequest_class_data_ =
            CMsgSteamDatagramSetSecondaryAddressRequest::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL CMsgSteamDatagramSetSecondaryAddressRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CMsgSteamDatagramSetSecondaryAddressRequest_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CMsgSteamDatagramSetSecondaryAddressRequest_class_data_.tc_table);
  return CMsgSteamDatagramSetSecondaryAddressRequest_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 67, 7>
CMsgSteamDatagramSetSecondaryAddressRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramSetSecondaryAddressRequest, _impl_._has_bits_),
    0, // no _extensions_
    99, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    CMsgSteamDatagramSetSecondaryAddressRequest_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CMsgSteamDatagramSetSecondaryAddressRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional fixed32 client_main_ip = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramSetSecondaryAddressRequest, _impl_.client_main_ip_)}},
    // optional fixed32 client_main_port = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 3, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramSetSecondaryAddressRequest, _impl_.client_main_port_)}},
    // optional fixed32 client_connection_id = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 4, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramSetSecondaryAddressRequest, _impl_.client_connection_id_)}},
    // optional string client_identity = 4;
    {::_pbi::TcParser::FastSS1,
     {34, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramSetSecondaryAddressRequest, _impl_.client_identity_)}},
    // optional bool request_send_duplication = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CMsgSteamDatagramSetSecondaryAddressRequest, _impl_.request_send_duplication_), 5>(),
     {40, 5, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramSetSecondaryAddressRequest, _impl_.request_send_duplication_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    99, 0, 1,
    65534, 5,
    65535, 65535
  }}, {{
    // optional fixed32 client_main_ip = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramSetSecondaryAddressRequest, _impl_.client_main_ip_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional fixed32 client_main_port = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramSetSecondaryAddressRequest, _impl_.client_main_port_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional fixed32 client_connection_id = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramSetSecondaryAddressRequest, _impl_.client_connection_id_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional string client_identity = 4;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramSetSecondaryAddressRequest, _impl_.client_identity_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional bool request_send_duplication = 5;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramSetSecondaryAddressRequest, _impl_.request_send_duplication_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bytes kludge_pad = 99;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramSetSecondaryAddressRequest, _impl_.kludge_pad_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\53\0\0\0\17\0\0\0"
    "CMsgSteamDatagramSetSecondaryAddressRequest"
    "client_identity"
  }},
};
PROTOBUF_NOINLINE void CMsgSteamDatagramSetSecondaryAddressRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramSetSecondaryAddressRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.client_identity_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.kludge_pad_.ClearNonDefaultToEmpty();
    }
  }
  if ((cached_has_bits & 0x0000003cu) != 0) {
    ::memset(&_impl_.client_main_ip_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.request_send_duplication_) -
        reinterpret_cast<char*>(&_impl_.client_main_ip_)) + sizeof(_impl_.request_send_duplication_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramSetSecondaryAddressRequest::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CMsgSteamDatagramSetSecondaryAddressRequest& this_ = static_cast<const CMsgSteamDatagramSetSecondaryAddressRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramSetSecondaryAddressRequest::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CMsgSteamDatagramSetSecondaryAddressRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramSetSecondaryAddressRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional fixed32 client_main_ip = 1;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        1, this_._internal_client_main_ip(), target);
  }

  // optional fixed32 client_main_port = 2;
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        2, this_._internal_client_main_port(), target);
  }

  // optional fixed32 client_connection_id = 3;
  if ((cached_has_bits & 0x00000010u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        3, this_._internal_client_connection_id(), target);
  }

  // optional string client_identity = 4;
  if ((cached_has_bits & 0x00000001u) != 0) {
    const std::string& _s = this_._internal_client_identity();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CMsgSteamDatagramSetSecondaryAddressRequest.client_identity");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // optional bool request_send_duplication = 5;
  if ((cached_has_bits & 0x00000020u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this_._internal_request_send_duplication(), target);
  }

  // optional bytes kludge_pad = 99;
  if ((cached_has_bits & 0x00000002u) != 0) {
    const std::string& _s = this_._internal_kludge_pad();
    target = stream->WriteBytesMaybeAliased(99, _s, target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramSetSecondaryAddressRequest)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CMsgSteamDatagramSetSecondaryAddressRequest::ByteSizeLong(const MessageLite& base) {
  const CMsgSteamDatagramSetSecondaryAddressRequest& this_ = static_cast<const CMsgSteamDatagramSetSecondaryAddressRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t CMsgSteamDatagramSetSecondaryAddressRequest::ByteSizeLong() const {
  const CMsgSteamDatagramSetSecondaryAddressRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramSetSecondaryAddressRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += ::absl::popcount(0x0000001cu & cached_has_bits) * 5;
  total_size += static_cast<bool>(0x00000020u & cached_has_bits) * 2;
  if ((cached_has_bits & 0x00000003u) != 0) {
    // optional string client_identity = 4;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_client_identity());
    }
    // optional bytes kludge_pad = 99;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this_._internal_kludge_pad());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void CMsgSteamDatagramSetSecondaryAddressRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramSetSecondaryAddressRequest*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramSetSecondaryAddressRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramSetSecondaryAddressRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_internal_set_client_identity(from._internal_client_identity());
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_internal_set_kludge_pad(from._internal_kludge_pad());
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_impl_.client_main_ip_ = from._impl_.client_main_ip_;
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _this->_impl_.client_main_port_ = from._impl_.client_main_port_;
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _this->_impl_.client_connection_id_ = from._impl_.client_connection_id_;
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      _this->_impl_.request_send_duplication_ = from._impl_.request_send_duplication_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramSetSecondaryAddressRequest::CopyFrom(const CMsgSteamDatagramSetSecondaryAddressRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramSetSecondaryAddressRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CMsgSteamDatagramSetSecondaryAddressRequest::InternalSwap(CMsgSteamDatagramSetSecondaryAddressRequest* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.client_identity_, &other->_impl_.client_identity_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.kludge_pad_, &other->_impl_.kludge_pad_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramSetSecondaryAddressRequest, _impl_.request_send_duplication_)
      + sizeof(CMsgSteamDatagramSetSecondaryAddressRequest::_impl_.request_send_duplication_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramSetSecondaryAddressRequest, _impl_.client_main_ip_)>(
          reinterpret_cast<char*>(&_impl_.client_main_ip_),
          reinterpret_cast<char*>(&other->_impl_.client_main_ip_));
}

::google::protobuf::Metadata CMsgSteamDatagramSetSecondaryAddressRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CMsgSteamDatagramSetSecondaryAddressResult::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CMsgSteamDatagramSetSecondaryAddressResult>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramSetSecondaryAddressResult, _impl_._has_bits_);
};

CMsgSteamDatagramSetSecondaryAddressResult::CMsgSteamDatagramSetSecondaryAddressResult(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramSetSecondaryAddressResult_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramSetSecondaryAddressResult)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramSetSecondaryAddressResult::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::CMsgSteamDatagramSetSecondaryAddressResult& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        message_(arena, from.message_) {}

CMsgSteamDatagramSetSecondaryAddressResult::CMsgSteamDatagramSetSecondaryAddressResult(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const CMsgSteamDatagramSetSecondaryAddressResult& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramSetSecondaryAddressResult_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CMsgSteamDatagramSetSecondaryAddressResult* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.success_ = from._impl_.success_;

  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramSetSecondaryAddressResult)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramSetSecondaryAddressResult::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        message_(arena) {}

inline void CMsgSteamDatagramSetSecondaryAddressResult::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.success_ = {};
}
CMsgSteamDatagramSetSecondaryAddressResult::~CMsgSteamDatagramSetSecondaryAddressResult() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramSetSecondaryAddressResult)
  SharedDtor(*this);
}
inline void CMsgSteamDatagramSetSecondaryAddressResult::SharedDtor(MessageLite& self) {
  CMsgSteamDatagramSetSecondaryAddressResult& this_ = static_cast<CMsgSteamDatagramSetSecondaryAddressResult&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.message_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CMsgSteamDatagramSetSecondaryAddressResult::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CMsgSteamDatagramSetSecondaryAddressResult(arena);
}
constexpr auto CMsgSteamDatagramSetSecondaryAddressResult::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(CMsgSteamDatagramSetSecondaryAddressResult),
                                            alignof(CMsgSteamDatagramSetSecondaryAddressResult));
}
constexpr auto CMsgSteamDatagramSetSecondaryAddressResult::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CMsgSteamDatagramSetSecondaryAddressResult_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CMsgSteamDatagramSetSecondaryAddressResult::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CMsgSteamDatagramSetSecondaryAddressResult>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CMsgSteamDatagramSetSecondaryAddressResult::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CMsgSteamDatagramSetSecondaryAddressResult>(), &CMsgSteamDatagramSetSecondaryAddressResult::ByteSizeLong,
              &CMsgSteamDatagramSetSecondaryAddressResult::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramSetSecondaryAddressResult, _impl_._cached_size_),
          false,
      },
      &CMsgSteamDatagramSetSecondaryAddressResult::kDescriptorMethods,
      &descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        CMsgSteamDatagramSetSecondaryAddressResult_class_data_ =
            CMsgSteamDatagramSetSecondaryAddressResult::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL CMsgSteamDatagramSetSecondaryAddressResult::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CMsgSteamDatagramSetSecondaryAddressResult_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CMsgSteamDatagramSetSecondaryAddressResult_class_data_.tc_table);
  return CMsgSteamDatagramSetSecondaryAddressResult_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 58, 2>
CMsgSteamDatagramSetSecondaryAddressResult::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramSetSecondaryAddressResult, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    CMsgSteamDatagramSetSecondaryAddressResult_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CMsgSteamDatagramSetSecondaryAddressResult>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional string message = 2;
    {::_pbi::TcParser::FastSS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramSetSecondaryAddressResult, _impl_.message_)}},
    // optional bool success = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CMsgSteamDatagramSetSecondaryAddressResult, _impl_.success_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramSetSecondaryAddressResult, _impl_.success_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional bool success = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramSetSecondaryAddressResult, _impl_.success_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional string message = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramSetSecondaryAddressResult, _impl_.message_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\52\0\7\0\0\0\0\0"
    "CMsgSteamDatagramSetSecondaryAddressResult"
    "message"
  }},
};
PROTOBUF_NOINLINE void CMsgSteamDatagramSetSecondaryAddressResult::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramSetSecondaryAddressResult)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _impl_.message_.ClearNonDefaultToEmpty();
  }
  _impl_.success_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramSetSecondaryAddressResult::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CMsgSteamDatagramSetSecondaryAddressResult& this_ = static_cast<const CMsgSteamDatagramSetSecondaryAddressResult&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramSetSecondaryAddressResult::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CMsgSteamDatagramSetSecondaryAddressResult& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramSetSecondaryAddressResult)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional bool success = 1;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this_._internal_success(), target);
  }

  // optional string message = 2;
  if ((cached_has_bits & 0x00000001u) != 0) {
    const std::string& _s = this_._internal_message();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CMsgSteamDatagramSetSecondaryAddressResult.message");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramSetSecondaryAddressResult)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CMsgSteamDatagramSetSecondaryAddressResult::ByteSizeLong(const MessageLite& base) {
  const CMsgSteamDatagramSetSecondaryAddressResult& this_ = static_cast<const CMsgSteamDatagramSetSecondaryAddressResult&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t CMsgSteamDatagramSetSecondaryAddressResult::ByteSizeLong() const {
  const CMsgSteamDatagramSetSecondaryAddressResult& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramSetSecondaryAddressResult)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += static_cast<bool>(0x00000002u & cached_has_bits) * 2;
   {
    // optional string message = 2;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_message());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void CMsgSteamDatagramSetSecondaryAddressResult::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramSetSecondaryAddressResult*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramSetSecondaryAddressResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramSetSecondaryAddressResult)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_internal_set_message(from._internal_message());
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_impl_.success_ = from._impl_.success_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramSetSecondaryAddressResult::CopyFrom(const CMsgSteamDatagramSetSecondaryAddressResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramSetSecondaryAddressResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CMsgSteamDatagramSetSecondaryAddressResult::InternalSwap(CMsgSteamDatagramSetSecondaryAddressResult* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, &other->_impl_.message_, arena);
  swap(_impl_.success_, other->_impl_.success_);
}

::google::protobuf::Metadata CMsgSteamDatagramSetSecondaryAddressResult::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ [[maybe_unused]] =
        (::_pbi::AddDescriptors(&descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: usercmd.proto
// Protobuf C++ Version: 6.30.0-rc1

#include "usercmd.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;

inline constexpr CSubtickMoveStep::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        button_{::uint64_t{0u}},
        pressed_{false},
        when_{0},
        analog_forward_delta_{0},
        analog_left_delta_{0} {}

template <typename>
PROTOBUF_CONSTEXPR CSubtickMoveStep::CSubtickMoveStep(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CSubtickMoveStep_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CSubtickMoveStepDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSubtickMoveStepDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSubtickMoveStepDefaultTypeInternal() {}
  union {
    CSubtickMoveStep _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSubtickMoveStepDefaultTypeInternal _CSubtickMoveStep_default_instance_;

inline constexpr CInButtonStatePB::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        buttonstate1_{::uint64_t{0u}},
        buttonstate2_{::uint64_t{0u}},
        buttonstate3_{::uint64_t{0u}} {}

template <typename>
PROTOBUF_CONSTEXPR CInButtonStatePB::CInButtonStatePB(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CInButtonStatePB_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CInButtonStatePBDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CInButtonStatePBDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CInButtonStatePBDefaultTypeInternal() {}
  union {
    CInButtonStatePB _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CInButtonStatePBDefaultTypeInternal _CInButtonStatePB_default_instance_;

inline constexpr CBaseUserCmdPB::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        subtick_moves_{},
        move_crc_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        buttons_pb_{nullptr},
        viewangles_{nullptr},
        legacy_command_number_{0},
        client_tick_{0},
        forwardmove_{0},
        leftmove_{0},
        upmove_{0},
        impulse_{0},
        weaponselect_{0},
        random_seed_{0},
        mousedx_{0},
        mousedy_{0},
        consumed_server_angle_changes_{0u},
        cmd_flags_{0},
        pawn_entity_handle_{16777215u} {}

template <typename>
PROTOBUF_CONSTEXPR CBaseUserCmdPB::CBaseUserCmdPB(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CBaseUserCmdPB_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CBaseUserCmdPBDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CBaseUserCmdPBDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CBaseUserCmdPBDefaultTypeInternal() {}
  union {
    CBaseUserCmdPB _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CBaseUserCmdPBDefaultTypeInternal _CBaseUserCmdPB_default_instance_;

inline constexpr CUserCmdBasePB::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        base_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR CUserCmdBasePB::CUserCmdBasePB(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CUserCmdBasePB_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CUserCmdBasePBDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CUserCmdBasePBDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CUserCmdBasePBDefaultTypeInternal() {}
  union {
    CUserCmdBasePB _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CUserCmdBasePBDefaultTypeInternal _CUserCmdBasePB_default_instance_;
static constexpr const ::_pb::EnumDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_enum_descriptors_usercmd_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_service_descriptors_usercmd_2eproto = nullptr;
const ::uint32_t
    TableStruct_usercmd_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::CInButtonStatePB, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CInButtonStatePB, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CInButtonStatePB, _impl_.buttonstate1_),
        PROTOBUF_FIELD_OFFSET(::CInButtonStatePB, _impl_.buttonstate2_),
        PROTOBUF_FIELD_OFFSET(::CInButtonStatePB, _impl_.buttonstate3_),
        0,
        1,
        2,
        PROTOBUF_FIELD_OFFSET(::CSubtickMoveStep, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CSubtickMoveStep, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CSubtickMoveStep, _impl_.button_),
        PROTOBUF_FIELD_OFFSET(::CSubtickMoveStep, _impl_.pressed_),
        PROTOBUF_FIELD_OFFSET(::CSubtickMoveStep, _impl_.when_),
        PROTOBUF_FIELD_OFFSET(::CSubtickMoveStep, _impl_.analog_forward_delta_),
        PROTOBUF_FIELD_OFFSET(::CSubtickMoveStep, _impl_.analog_left_delta_),
        0,
        1,
        2,
        3,
        4,
        PROTOBUF_FIELD_OFFSET(::CBaseUserCmdPB, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CBaseUserCmdPB, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CBaseUserCmdPB, _impl_.legacy_command_number_),
        PROTOBUF_FIELD_OFFSET(::CBaseUserCmdPB, _impl_.client_tick_),
        PROTOBUF_FIELD_OFFSET(::CBaseUserCmdPB, _impl_.buttons_pb_),
        PROTOBUF_FIELD_OFFSET(::CBaseUserCmdPB, _impl_.viewangles_),
        PROTOBUF_FIELD_OFFSET(::CBaseUserCmdPB, _impl_.forwardmove_),
        PROTOBUF_FIELD_OFFSET(::CBaseUserCmdPB, _impl_.leftmove_),
        PROTOBUF_FIELD_OFFSET(::CBaseUserCmdPB, _impl_.upmove_),
        PROTOBUF_FIELD_OFFSET(::CBaseUserCmdPB, _impl_.impulse_),
        PROTOBUF_FIELD_OFFSET(::CBaseUserCmdPB, _impl_.weaponselect_),
        PROTOBUF_FIELD_OFFSET(::CBaseUserCmdPB, _impl_.random_seed_),
        PROTOBUF_FIELD_OFFSET(::CBaseUserCmdPB, _impl_.mousedx_),
        PROTOBUF_FIELD_OFFSET(::CBaseUserCmdPB, _impl_.mousedy_),
        PROTOBUF_FIELD_OFFSET(::CBaseUserCmdPB, _impl_.pawn_entity_handle_),
        PROTOBUF_FIELD_OFFSET(::CBaseUserCmdPB, _impl_.subtick_moves_),
        PROTOBUF_FIELD_OFFSET(::CBaseUserCmdPB, _impl_.move_crc_),
        PROTOBUF_FIELD_OFFSET(::CBaseUserCmdPB, _impl_.consumed_server_angle_changes_),
        PROTOBUF_FIELD_OFFSET(::CBaseUserCmdPB, _impl_.cmd_flags_),
        3,
        4,
        1,
        2,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        15,
        ~0u,
        0,
        13,
        14,
        PROTOBUF_FIELD_OFFSET(::CUserCmdBasePB, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CUserCmdBasePB, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CUserCmdBasePB, _impl_.base_),
        0,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 11, -1, sizeof(::CInButtonStatePB)},
        {14, 27, -1, sizeof(::CSubtickMoveStep)},
        {32, 57, -1, sizeof(::CBaseUserCmdPB)},
        {74, 83, -1, sizeof(::CUserCmdBasePB)},
};
static const ::_pb::Message* PROTOBUF_NONNULL const file_default_instances[] = {
    &::_CInButtonStatePB_default_instance_._instance,
    &::_CSubtickMoveStep_default_instance_._instance,
    &::_CBaseUserCmdPB_default_instance_._instance,
    &::_CUserCmdBasePB_default_instance_._instance,
};
const char descriptor_table_protodef_usercmd_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\rusercmd.proto\032\026networkbasetypes.proto\""
    "T\n\020CInButtonStatePB\022\024\n\014buttonstate1\030\001 \001("
    "\004\022\024\n\014buttonstate2\030\002 \001(\004\022\024\n\014buttonstate3\030"
    "\003 \001(\004\"z\n\020CSubtickMoveStep\022\016\n\006button\030\001 \001("
    "\004\022\017\n\007pressed\030\002 \001(\010\022\014\n\004when\030\003 \001(\002\022\034\n\024anal"
    "og_forward_delta\030\004 \001(\002\022\031\n\021analog_left_de"
    "lta\030\005 \001(\002\"\275\003\n\016CBaseUserCmdPB\022\035\n\025legacy_c"
    "ommand_number\030\001 \001(\005\022\023\n\013client_tick\030\002 \001(\005"
    "\022%\n\nbuttons_pb\030\003 \001(\0132\021.CInButtonStatePB\022"
    "\037\n\nviewangles\030\004 \001(\0132\013.CMsgQAngle\022\023\n\013forw"
    "ardmove\030\005 \001(\002\022\020\n\010leftmove\030\006 \001(\002\022\016\n\006upmov"
    "e\030\007 \001(\002\022\017\n\007impulse\030\010 \001(\005\022\024\n\014weaponselect"
    "\030\t \001(\005\022\023\n\013random_seed\030\n \001(\005\022\017\n\007mousedx\030\013"
    " \001(\005\022\017\n\007mousedy\030\014 \001(\005\022$\n\022pawn_entity_han"
    "dle\030\016 \001(\r:\01016777215\022(\n\rsubtick_moves\030\022 \003"
    "(\0132\021.CSubtickMoveStep\022\020\n\010move_crc\030\023 \001(\014\022"
    "%\n\035consumed_server_angle_changes\030\024 \001(\r\022\021"
    "\n\tcmd_flags\030\025 \001(\005\"/\n\016CUserCmdBasePB\022\035\n\004b"
    "ase\030\001 \001(\0132\017.CBaseUserCmdPB"
};
static const ::_pbi::DescriptorTable* PROTOBUF_NONNULL const
    descriptor_table_usercmd_2eproto_deps[1] = {
        &::descriptor_table_networkbasetypes_2eproto,
};
static ::absl::once_flag descriptor_table_usercmd_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_usercmd_2eproto = {
    false,
    false,
    746,
    descriptor_table_protodef_usercmd_2eproto,
    "usercmd.proto",
    &descriptor_table_usercmd_2eproto_once,
    descriptor_table_usercmd_2eproto_deps,
    1,
    4,
    schemas,
    file_default_instances,
    TableStruct_usercmd_2eproto::offsets,
    file_level_enum_descriptors_usercmd_2eproto,
    file_level_service_descriptors_usercmd_2eproto,
};
// ===================================================================

class CInButtonStatePB::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CInButtonStatePB>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CInButtonStatePB, _impl_._has_bits_);
};

CInButtonStatePB::CInButtonStatePB(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CInButtonStatePB_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CInButtonStatePB)
}
CInButtonStatePB::CInButtonStatePB(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const CInButtonStatePB& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CInButtonStatePB_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
}
PROTOBUF_NDEBUG_INLINE CInButtonStatePB::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void CInButtonStatePB::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, buttonstate1_),
           0,
           offsetof(Impl_, buttonstate3_) -
               offsetof(Impl_, buttonstate1_) +
               sizeof(Impl_::buttonstate3_));
}
CInButtonStatePB::~CInButtonStatePB() {
  // @@protoc_insertion_point(destructor:CInButtonStatePB)
  SharedDtor(*this);
}
inline void CInButtonStatePB::SharedDtor(MessageLite& self) {
  CInButtonStatePB& this_ = static_cast<CInButtonStatePB&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CInButtonStatePB::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CInButtonStatePB(arena);
}
constexpr auto CInButtonStatePB::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(CInButtonStatePB),
                                            alignof(CInButtonStatePB));
}
constexpr auto CInButtonStatePB::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CInButtonStatePB_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CInButtonStatePB::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CInButtonStatePB>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CInButtonStatePB::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CInButtonStatePB>(), &CInButtonStatePB::ByteSizeLong,
              &CInButtonStatePB::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CInButtonStatePB, _impl_._cached_size_),
          false,
      },
      &CInButtonStatePB::kDescriptorMethods,
      &descriptor_table_usercmd_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        CInButtonStatePB_class_data_ =
            CInButtonStatePB::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL CInButtonStatePB::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CInButtonStatePB_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CInButtonStatePB_class_data_.tc_table);
  return CInButtonStatePB_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2>
CInButtonStatePB::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CInButtonStatePB, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    CInButtonStatePB_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CInButtonStatePB>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional uint64 buttonstate1 = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(CInButtonStatePB, _impl_.buttonstate1_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(CInButtonStatePB, _impl_.buttonstate1_)}},
    // optional uint64 buttonstate2 = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(CInButtonStatePB, _impl_.buttonstate2_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(CInButtonStatePB, _impl_.buttonstate2_)}},
    // optional uint64 buttonstate3 = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(CInButtonStatePB, _impl_.buttonstate3_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(CInButtonStatePB, _impl_.buttonstate3_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional uint64 buttonstate1 = 1;
    {PROTOBUF_FIELD_OFFSET(CInButtonStatePB, _impl_.buttonstate1_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // optional uint64 buttonstate2 = 2;
    {PROTOBUF_FIELD_OFFSET(CInButtonStatePB, _impl_.buttonstate2_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // optional uint64 buttonstate3 = 3;
    {PROTOBUF_FIELD_OFFSET(CInButtonStatePB, _impl_.buttonstate3_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
  }},
  // no aux_entries
  {{
  }},
};
PROTOBUF_NOINLINE void CInButtonStatePB::Clear() {
// @@protoc_insertion_point(message_clear_start:CInButtonStatePB)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    ::memset(&_impl_.buttonstate1_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.buttonstate3_) -
        reinterpret_cast<char*>(&_impl_.buttonstate1_)) + sizeof(_impl_.buttonstate3_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CInButtonStatePB::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CInButtonStatePB& this_ = static_cast<const CInButtonStatePB&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CInButtonStatePB::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CInButtonStatePB& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:CInButtonStatePB)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional uint64 buttonstate1 = 1;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this_._internal_buttonstate1(), target);
  }

  // optional uint64 buttonstate2 = 2;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        2, this_._internal_buttonstate2(), target);
  }

  // optional uint64 buttonstate3 = 3;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        3, this_._internal_buttonstate3(), target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CInButtonStatePB)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CInButtonStatePB::ByteSizeLong(const MessageLite& base) {
  const CInButtonStatePB& this_ = static_cast<const CInButtonStatePB&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t CInButtonStatePB::ByteSizeLong() const {
  const CInButtonStatePB& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:CInButtonStatePB)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    // optional uint64 buttonstate1 = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this_._internal_buttonstate1());
    }
    // optional uint64 buttonstate2 = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this_._internal_buttonstate2());
    }
    // optional uint64 buttonstate3 = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this_._internal_buttonstate3());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void CInButtonStatePB::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CInButtonStatePB*>(&to_msg);
  auto& from = static_cast<const CInButtonStatePB&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CInButtonStatePB)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_impl_.buttonstate1_ = from._impl_.buttonstate1_;
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_impl_.buttonstate2_ = from._impl_.buttonstate2_;
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_impl_.buttonstate3_ = from._impl_.buttonstate3_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CInButtonStatePB::CopyFrom(const CInButtonStatePB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CInButtonStatePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CInButtonStatePB::InternalSwap(CInButtonStatePB* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CInButtonStatePB, _impl_.buttonstate3_)
      + sizeof(CInButtonStatePB::_impl_.buttonstate3_)
      - PROTOBUF_FIELD_OFFSET(CInButtonStatePB, _impl_.buttonstate1_)>(
          reinterpret_cast<char*>(&_impl_.buttonstate1_),
          reinterpret_cast<char*>(&other->_impl_.buttonstate1_));
}

::google::protobuf::Metadata CInButtonStatePB::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CSubtickMoveStep::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CSubtickMoveStep>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CSubtickMoveStep, _impl_._has_bits_);
};

CSubtickMoveStep::CSubtickMoveStep(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CSubtickMoveStep_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSubtickMoveStep)
}
CSubtickMoveStep::CSubtickMoveStep(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const CSubtickMoveStep& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CSubtickMoveStep_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
}
PROTOBUF_NDEBUG_INLINE CSubtickMoveStep::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void CSubtickMoveStep::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, button_),
           0,
           offsetof(Impl_, analog_left_delta_) -
               offsetof(Impl_, button_) +
               sizeof(Impl_::analog_left_delta_));
}
CSubtickMoveStep::~CSubtickMoveStep() {
  // @@protoc_insertion_point(destructor:CSubtickMoveStep)
  SharedDtor(*this);
}
inline void CSubtickMoveStep::SharedDtor(MessageLite& self) {
  CSubtickMoveStep& this_ = static_cast<CSubtickMoveStep&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CSubtickMoveStep::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CSubtickMoveStep(arena);
}
constexpr auto CSubtickMoveStep::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(CSubtickMoveStep),
                                            alignof(CSubtickMoveStep));
}
constexpr auto CSubtickMoveStep::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CSubtickMoveStep_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CSubtickMoveStep::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CSubtickMoveStep>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CSubtickMoveStep::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CSubtickMoveStep>(), &CSubtickMoveStep::ByteSizeLong,
              &CSubtickMoveStep::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CSubtickMoveStep, _impl_._cached_size_),
          false,
      },
      &CSubtickMoveStep::kDescriptorMethods,
      &descriptor_table_usercmd_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        CSubtickMoveStep_class_data_ =
            CSubtickMoveStep::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL CSubtickMoveStep::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CSubtickMoveStep_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CSubtickMoveStep_class_data_.tc_table);
  return CSubtickMoveStep_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 0, 2>
CSubtickMoveStep::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CSubtickMoveStep, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    CSubtickMoveStep_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CSubtickMoveStep>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional uint64 button = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(CSubtickMoveStep, _impl_.button_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(CSubtickMoveStep, _impl_.button_)}},
    // optional bool pressed = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CSubtickMoveStep, _impl_.pressed_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(CSubtickMoveStep, _impl_.pressed_)}},
    // optional float when = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 2, 0, PROTOBUF_FIELD_OFFSET(CSubtickMoveStep, _impl_.when_)}},
    // optional float analog_forward_delta = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 3, 0, PROTOBUF_FIELD_OFFSET(CSubtickMoveStep, _impl_.analog_forward_delta_)}},
    // optional float analog_left_delta = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 4, 0, PROTOBUF_FIELD_OFFSET(CSubtickMoveStep, _impl_.analog_left_delta_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional uint64 button = 1;
    {PROTOBUF_FIELD_OFFSET(CSubtickMoveStep, _impl_.button_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // optional bool pressed = 2;
    {PROTOBUF_FIELD_OFFSET(CSubtickMoveStep, _impl_.pressed_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional float when = 3;
    {PROTOBUF_FIELD_OFFSET(CSubtickMoveStep, _impl_.when_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float analog_forward_delta = 4;
    {PROTOBUF_FIELD_OFFSET(CSubtickMoveStep, _impl_.analog_forward_delta_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float analog_left_delta = 5;
    {PROTOBUF_FIELD_OFFSET(CSubtickMoveStep, _impl_.analog_left_delta_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};
PROTOBUF_NOINLINE void CSubtickMoveStep::Clear() {
// @@protoc_insertion_point(message_clear_start:CSubtickMoveStep)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fu) != 0) {
    ::memset(&_impl_.button_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.analog_left_delta_) -
        reinterpret_cast<char*>(&_impl_.button_)) + sizeof(_impl_.analog_left_delta_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CSubtickMoveStep::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CSubtickMoveStep& this_ = static_cast<const CSubtickMoveStep&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CSubtickMoveStep::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CSubtickMoveStep& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:CSubtickMoveStep)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional uint64 button = 1;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        1, this_._internal_button(), target);
  }

  // optional bool pressed = 2;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this_._internal_pressed(), target);
  }

  // optional float when = 3;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this_._internal_when(), target);
  }

  // optional float analog_forward_delta = 4;
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this_._internal_analog_forward_delta(), target);
  }

  // optional float analog_left_delta = 5;
  if ((cached_has_bits & 0x00000010u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        5, this_._internal_analog_left_delta(), target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSubtickMoveStep)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CSubtickMoveStep::ByteSizeLong(const MessageLite& base) {
  const CSubtickMoveStep& this_ = static_cast<const CSubtickMoveStep&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t CSubtickMoveStep::ByteSizeLong() const {
  const CSubtickMoveStep& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:CSubtickMoveStep)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += ::absl::popcount(0x0000001cu & cached_has_bits) * 5;
  total_size += static_cast<bool>(0x00000002u & cached_has_bits) * 2;
   {
    // optional uint64 button = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
          this_._internal_button());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void CSubtickMoveStep::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CSubtickMoveStep*>(&to_msg);
  auto& from = static_cast<const CSubtickMoveStep&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CSubtickMoveStep)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_impl_.button_ = from._impl_.button_;
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_impl_.pressed_ = from._impl_.pressed_;
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_impl_.when_ = from._impl_.when_;
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _this->_impl_.analog_forward_delta_ = from._impl_.analog_forward_delta_;
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _this->_impl_.analog_left_delta_ = from._impl_.analog_left_delta_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CSubtickMoveStep::CopyFrom(const CSubtickMoveStep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSubtickMoveStep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CSubtickMoveStep::InternalSwap(CSubtickMoveStep* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSubtickMoveStep, _impl_.analog_left_delta_)
      + sizeof(CSubtickMoveStep::_impl_.analog_left_delta_)
      - PROTOBUF_FIELD_OFFSET(CSubtickMoveStep, _impl_.button_)>(
          reinterpret_cast<char*>(&_impl_.button_),
          reinterpret_cast<char*>(&other->_impl_.button_));
}

::google::protobuf::Metadata CSubtickMoveStep::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CBaseUserCmdPB::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CBaseUserCmdPB>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CBaseUserCmdPB, _impl_._has_bits_);
};

void CBaseUserCmdPB::clear_viewangles() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.viewangles_ != nullptr) _impl_.viewangles_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
CBaseUserCmdPB::CBaseUserCmdPB(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CBaseUserCmdPB_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CBaseUserCmdPB)
}
PROTOBUF_NDEBUG_INLINE CBaseUserCmdPB::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::CBaseUserCmdPB& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        subtick_moves_{visibility, arena, from.subtick_moves_},
        move_crc_(arena, from.move_crc_) {}

CBaseUserCmdPB::CBaseUserCmdPB(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const CBaseUserCmdPB& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CBaseUserCmdPB_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CBaseUserCmdPB* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.buttons_pb_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.buttons_pb_)
                : nullptr;
  _impl_.viewangles_ = ((cached_has_bits & 0x00000004u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.viewangles_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, legacy_command_number_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, legacy_command_number_),
           offsetof(Impl_, pawn_entity_handle_) -
               offsetof(Impl_, legacy_command_number_) +
               sizeof(Impl_::pawn_entity_handle_));

  // @@protoc_insertion_point(copy_constructor:CBaseUserCmdPB)
}
PROTOBUF_NDEBUG_INLINE CBaseUserCmdPB::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        subtick_moves_{visibility, arena},
        move_crc_(arena),
        pawn_entity_handle_{16777215u} {}

inline void CBaseUserCmdPB::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, buttons_pb_),
           0,
           offsetof(Impl_, cmd_flags_) -
               offsetof(Impl_, buttons_pb_) +
               sizeof(Impl_::cmd_flags_));
}
CBaseUserCmdPB::~CBaseUserCmdPB() {
  // @@protoc_insertion_point(destructor:CBaseUserCmdPB)
  SharedDtor(*this);
}
inline void CBaseUserCmdPB::SharedDtor(MessageLite& self) {
  CBaseUserCmdPB& this_ = static_cast<CBaseUserCmdPB&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.move_crc_.Destroy();
  delete this_._impl_.buttons_pb_;
  delete this_._impl_.viewangles_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CBaseUserCmdPB::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CBaseUserCmdPB(arena);
}
constexpr auto CBaseUserCmdPB::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(CBaseUserCmdPB, _impl_.subtick_moves_) +
          decltype(CBaseUserCmdPB::_impl_.subtick_moves_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(CBaseUserCmdPB), alignof(CBaseUserCmdPB), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&CBaseUserCmdPB::PlacementNew_,
                                 sizeof(CBaseUserCmdPB),
                                 alignof(CBaseUserCmdPB));
  }
}
constexpr auto CBaseUserCmdPB::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CBaseUserCmdPB_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CBaseUserCmdPB::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CBaseUserCmdPB>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CBaseUserCmdPB::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CBaseUserCmdPB>(), &CBaseUserCmdPB::ByteSizeLong,
              &CBaseUserCmdPB::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CBaseUserCmdPB, _impl_._cached_size_),
          false,
      },
      &CBaseUserCmdPB::kDescriptorMethods,
      &descriptor_table_usercmd_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        CBaseUserCmdPB_class_data_ =
            CBaseUserCmdPB::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL CBaseUserCmdPB::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CBaseUserCmdPB_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CBaseUserCmdPB_class_data_.tc_table);
  return CBaseUserCmdPB_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 17, 3, 0, 2>
CBaseUserCmdPB::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CBaseUserCmdPB, _impl_._has_bits_),
    0, // no _extensions_
    21, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4292988928,  // skipmap
    offsetof(decltype(_table_), field_entries),
    17,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    CBaseUserCmdPB_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CBaseUserCmdPB>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional int32 legacy_command_number = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CBaseUserCmdPB, _impl_.legacy_command_number_), 3>(),
     {8, 3, 0, PROTOBUF_FIELD_OFFSET(CBaseUserCmdPB, _impl_.legacy_command_number_)}},
    // optional int32 client_tick = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CBaseUserCmdPB, _impl_.client_tick_), 4>(),
     {16, 4, 0, PROTOBUF_FIELD_OFFSET(CBaseUserCmdPB, _impl_.client_tick_)}},
    // optional .CInButtonStatePB buttons_pb = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 0, PROTOBUF_FIELD_OFFSET(CBaseUserCmdPB, _impl_.buttons_pb_)}},
    // optional .CMsgQAngle viewangles = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 2, 1, PROTOBUF_FIELD_OFFSET(CBaseUserCmdPB, _impl_.viewangles_)}},
    // optional float forwardmove = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 5, 0, PROTOBUF_FIELD_OFFSET(CBaseUserCmdPB, _impl_.forwardmove_)}},
    // optional float leftmove = 6;
    {::_pbi::TcParser::FastF32S1,
     {53, 6, 0, PROTOBUF_FIELD_OFFSET(CBaseUserCmdPB, _impl_.leftmove_)}},
    // optional float upmove = 7;
    {::_pbi::TcParser::FastF32S1,
     {61, 7, 0, PROTOBUF_FIELD_OFFSET(CBaseUserCmdPB, _impl_.upmove_)}},
    // optional int32 impulse = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CBaseUserCmdPB, _impl_.impulse_), 8>(),
     {64, 8, 0, PROTOBUF_FIELD_OFFSET(CBaseUserCmdPB, _impl_.impulse_)}},
    // optional int32 weaponselect = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CBaseUserCmdPB, _impl_.weaponselect_), 9>(),
     {72, 9, 0, PROTOBUF_FIELD_OFFSET(CBaseUserCmdPB, _impl_.weaponselect_)}},
    // optional int32 random_seed = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CBaseUserCmdPB, _impl_.random_seed_), 10>(),
     {80, 10, 0, PROTOBUF_FIELD_OFFSET(CBaseUserCmdPB, _impl_.random_seed_)}},
    // optional int32 mousedx = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CBaseUserCmdPB, _impl_.mousedx_), 11>(),
     {88, 11, 0, PROTOBUF_FIELD_OFFSET(CBaseUserCmdPB, _impl_.mousedx_)}},
    // optional int32 mousedy = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CBaseUserCmdPB, _impl_.mousedy_), 12>(),
     {96, 12, 0, PROTOBUF_FIELD_OFFSET(CBaseUserCmdPB, _impl_.mousedy_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional uint32 pawn_entity_handle = 14 [default = 16777215];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CBaseUserCmdPB, _impl_.pawn_entity_handle_), 15>(),
     {112, 15, 0, PROTOBUF_FIELD_OFFSET(CBaseUserCmdPB, _impl_.pawn_entity_handle_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // repeated .CSubtickMoveStep subtick_moves = 18;
    {::_pbi::TcParser::FastMtR2,
     {402, 63, 2, PROTOBUF_FIELD_OFFSET(CBaseUserCmdPB, _impl_.subtick_moves_)}},
    // optional bytes move_crc = 19;
    {::_pbi::TcParser::FastBS2,
     {410, 0, 0, PROTOBUF_FIELD_OFFSET(CBaseUserCmdPB, _impl_.move_crc_)}},
    // optional uint32 consumed_server_angle_changes = 20;
    {::_pbi::TcParser::FastV32S2,
     {416, 13, 0, PROTOBUF_FIELD_OFFSET(CBaseUserCmdPB, _impl_.consumed_server_angle_changes_)}},
    // optional int32 cmd_flags = 21;
    {::_pbi::TcParser::FastV32S2,
     {424, 14, 0, PROTOBUF_FIELD_OFFSET(CBaseUserCmdPB, _impl_.cmd_flags_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional int32 legacy_command_number = 1;
    {PROTOBUF_FIELD_OFFSET(CBaseUserCmdPB, _impl_.legacy_command_number_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 client_tick = 2;
    {PROTOBUF_FIELD_OFFSET(CBaseUserCmdPB, _impl_.client_tick_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional .CInButtonStatePB buttons_pb = 3;
    {PROTOBUF_FIELD_OFFSET(CBaseUserCmdPB, _impl_.buttons_pb_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .CMsgQAngle viewangles = 4;
    {PROTOBUF_FIELD_OFFSET(CBaseUserCmdPB, _impl_.viewangles_), _Internal::kHasBitsOffset + 2, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional float forwardmove = 5;
    {PROTOBUF_FIELD_OFFSET(CBaseUserCmdPB, _impl_.forwardmove_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float leftmove = 6;
    {PROTOBUF_FIELD_OFFSET(CBaseUserCmdPB, _impl_.leftmove_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float upmove = 7;
    {PROTOBUF_FIELD_OFFSET(CBaseUserCmdPB, _impl_.upmove_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional int32 impulse = 8;
    {PROTOBUF_FIELD_OFFSET(CBaseUserCmdPB, _impl_.impulse_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 weaponselect = 9;
    {PROTOBUF_FIELD_OFFSET(CBaseUserCmdPB, _impl_.weaponselect_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 random_seed = 10;
    {PROTOBUF_FIELD_OFFSET(CBaseUserCmdPB, _impl_.random_seed_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 mousedx = 11;
    {PROTOBUF_FIELD_OFFSET(CBaseUserCmdPB, _impl_.mousedx_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 mousedy = 12;
    {PROTOBUF_FIELD_OFFSET(CBaseUserCmdPB, _impl_.mousedy_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional uint32 pawn_entity_handle = 14 [default = 16777215];
    {PROTOBUF_FIELD_OFFSET(CBaseUserCmdPB, _impl_.pawn_entity_handle_), _Internal::kHasBitsOffset + 15, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // repeated .CSubtickMoveStep subtick_moves = 18;
    {PROTOBUF_FIELD_OFFSET(CBaseUserCmdPB, _impl_.subtick_moves_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional bytes move_crc = 19;
    {PROTOBUF_FIELD_OFFSET(CBaseUserCmdPB, _impl_.move_crc_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional uint32 consumed_server_angle_changes = 20;
    {PROTOBUF_FIELD_OFFSET(CBaseUserCmdPB, _impl_.consumed_server_angle_changes_), _Internal::kHasBitsOffset + 13, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional int32 cmd_flags = 21;
    {PROTOBUF_FIELD_OFFSET(CBaseUserCmdPB, _impl_.cmd_flags_), _Internal::kHasBitsOffset + 14, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::CInButtonStatePB>()},
      {::_pbi::TcParser::GetTable<::CMsgQAngle>()},
      {::_pbi::TcParser::GetTable<::CSubtickMoveStep>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void CBaseUserCmdPB::Clear() {
// @@protoc_insertion_point(message_clear_start:CBaseUserCmdPB)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.subtick_moves_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.move_crc_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.buttons_pb_ != nullptr);
      _impl_.buttons_pb_->Clear();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(_impl_.viewangles_ != nullptr);
      _impl_.viewangles_->Clear();
    }
  }
  if ((cached_has_bits & 0x000000f8u) != 0) {
    ::memset(&_impl_.legacy_command_number_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.upmove_) -
        reinterpret_cast<char*>(&_impl_.legacy_command_number_)) + sizeof(_impl_.upmove_));
  }
  if ((cached_has_bits & 0x0000ff00u) != 0) {
    ::memset(&_impl_.impulse_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.cmd_flags_) -
        reinterpret_cast<char*>(&_impl_.impulse_)) + sizeof(_impl_.cmd_flags_));
    _impl_.pawn_entity_handle_ = 16777215u;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CBaseUserCmdPB::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CBaseUserCmdPB& this_ = static_cast<const CBaseUserCmdPB&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CBaseUserCmdPB::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CBaseUserCmdPB& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:CBaseUserCmdPB)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional int32 legacy_command_number = 1;
  if ((cached_has_bits & 0x00000008u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<1>(
            stream, this_._internal_legacy_command_number(), target);
  }

  // optional int32 client_tick = 2;
  if ((cached_has_bits & 0x00000010u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<2>(
            stream, this_._internal_client_tick(), target);
  }

  // optional .CInButtonStatePB buttons_pb = 3;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        3, *this_._impl_.buttons_pb_, this_._impl_.buttons_pb_->GetCachedSize(), target,
        stream);
  }

  // optional .CMsgQAngle viewangles = 4;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, *this_._impl_.viewangles_, this_._impl_.viewangles_->GetCachedSize(), target,
        stream);
  }

  // optional float forwardmove = 5;
  if ((cached_has_bits & 0x00000020u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        5, this_._internal_forwardmove(), target);
  }

  // optional float leftmove = 6;
  if ((cached_has_bits & 0x00000040u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        6, this_._internal_leftmove(), target);
  }

  // optional float upmove = 7;
  if ((cached_has_bits & 0x00000080u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        7, this_._internal_upmove(), target);
  }

  // optional int32 impulse = 8;
  if ((cached_has_bits & 0x00000100u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<8>(
            stream, this_._internal_impulse(), target);
  }

  // optional int32 weaponselect = 9;
  if ((cached_has_bits & 0x00000200u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<9>(
            stream, this_._internal_weaponselect(), target);
  }

  // optional int32 random_seed = 10;
  if ((cached_has_bits & 0x00000400u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<10>(
            stream, this_._internal_random_seed(), target);
  }

  // optional int32 mousedx = 11;
  if ((cached_has_bits & 0x00000800u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<11>(
            stream, this_._internal_mousedx(), target);
  }

  // optional int32 mousedy = 12;
  if ((cached_has_bits & 0x00001000u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<12>(
            stream, this_._internal_mousedy(), target);
  }

  // optional uint32 pawn_entity_handle = 14 [default = 16777215];
  if ((cached_has_bits & 0x00008000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        14, this_._internal_pawn_entity_handle(), target);
  }

  // repeated .CSubtickMoveStep subtick_moves = 18;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_subtick_moves_size());
       i < n; i++) {
    const auto& repfield = this_._internal_subtick_moves().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            18, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // optional bytes move_crc = 19;
  if ((cached_has_bits & 0x00000001u) != 0) {
    const std::string& _s = this_._internal_move_crc();
    target = stream->WriteBytesMaybeAliased(19, _s, target);
  }

  // optional uint32 consumed_server_angle_changes = 20;
  if ((cached_has_bits & 0x00002000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        20, this_._internal_consumed_server_angle_changes(), target);
  }

  // optional int32 cmd_flags = 21;
  if ((cached_has_bits & 0x00004000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        21, this_._internal_cmd_flags(), target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CBaseUserCmdPB)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CBaseUserCmdPB::ByteSizeLong(const MessageLite& base) {
  const CBaseUserCmdPB& this_ = static_cast<const CBaseUserCmdPB&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t CBaseUserCmdPB::ByteSizeLong() const {
  const CBaseUserCmdPB& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:CBaseUserCmdPB)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .CSubtickMoveStep subtick_moves = 18;
    {
      total_size += 2UL * this_._internal_subtick_moves_size();
      for (const auto& msg : this_._internal_subtick_moves()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += ::absl::popcount(0x000000e0u & cached_has_bits) * 5;
  if ((cached_has_bits & 0x0000001fu) != 0) {
    // optional bytes move_crc = 19;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this_._internal_move_crc());
    }
    // optional .CInButtonStatePB buttons_pb = 3;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.buttons_pb_);
    }
    // optional .CMsgQAngle viewangles = 4;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.viewangles_);
    }
    // optional int32 legacy_command_number = 1;
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_legacy_command_number());
    }
    // optional int32 client_tick = 2;
    if ((cached_has_bits & 0x00000010u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_client_tick());
    }
  }
  if ((cached_has_bits & 0x0000ff00u) != 0) {
    // optional int32 impulse = 8;
    if ((cached_has_bits & 0x00000100u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_impulse());
    }
    // optional int32 weaponselect = 9;
    if ((cached_has_bits & 0x00000200u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_weaponselect());
    }
    // optional int32 random_seed = 10;
    if ((cached_has_bits & 0x00000400u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_random_seed());
    }
    // optional int32 mousedx = 11;
    if ((cached_has_bits & 0x00000800u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_mousedx());
    }
    // optional int32 mousedy = 12;
    if ((cached_has_bits & 0x00001000u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_mousedy());
    }
    // optional uint32 consumed_server_angle_changes = 20;
    if ((cached_has_bits & 0x00002000u) != 0) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this_._internal_consumed_server_angle_changes());
    }
    // optional int32 cmd_flags = 21;
    if ((cached_has_bits & 0x00004000u) != 0) {
      total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                      this_._internal_cmd_flags());
    }
    // optional uint32 pawn_entity_handle = 14 [default = 16777215];
    if ((cached_has_bits & 0x00008000u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_pawn_entity_handle());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void CBaseUserCmdPB::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CBaseUserCmdPB*>(&to_msg);
  auto& from = static_cast<const CBaseUserCmdPB&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:CBaseUserCmdPB)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_subtick_moves()->MergeFrom(
      from._internal_subtick_moves());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_internal_set_move_crc(from._internal_move_crc());
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.buttons_pb_ != nullptr);
      if (_this->_impl_.buttons_pb_ == nullptr) {
        _this->_impl_.buttons_pb_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.buttons_pb_);
      } else {
        _this->_impl_.buttons_pb_->MergeFrom(*from._impl_.buttons_pb_);
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(from._impl_.viewangles_ != nullptr);
      if (_this->_impl_.viewangles_ == nullptr) {
        _this->_impl_.viewangles_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.viewangles_);
      } else {
        _this->_impl_.viewangles_->MergeFrom(*from._impl_.viewangles_);
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _this->_impl_.legacy_command_number_ = from._impl_.legacy_command_number_;
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _this->_impl_.client_tick_ = from._impl_.client_tick_;
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      _this->_impl_.forwardmove_ = from._impl_.forwardmove_;
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      _this->_impl_.leftmove_ = from._impl_.leftmove_;
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      _this->_impl_.upmove_ = from._impl_.upmove_;
    }
  }
  if ((cached_has_bits & 0x0000ff00u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      _this->_impl_.impulse_ = from._impl_.impulse_;
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      _this->_impl_.weaponselect_ = from._impl_.weaponselect_;
    }
    if ((cached_has_bits & 0x00000400u) != 0) {
      _this->_impl_.random_seed_ = from._impl_.random_seed_;
    }
    if ((cached_has_bits & 0x00000800u) != 0) {
      _this->_impl_.mousedx_ = from._impl_.mousedx_;
    }
    if ((cached_has_bits & 0x00001000u) != 0) {
      _this->_impl_.mousedy_ = from._impl_.mousedy_;
    }
    if ((cached_has_bits & 0x00002000u) != 0) {
      _this->_impl_.consumed_server_angle_changes_ = from._impl_.consumed_server_angle_changes_;
    }
    if ((cached_has_bits & 0x00004000u) != 0) {
      _this->_impl_.cmd_flags_ = from._impl_.cmd_flags_;
    }
    if ((cached_has_bits & 0x00008000u) != 0) {
      _this->_impl_.pawn_entity_handle_ = from._impl_.pawn_entity_handle_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CBaseUserCmdPB::CopyFrom(const CBaseUserCmdPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CBaseUserCmdPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CBaseUserCmdPB::InternalSwap(CBaseUserCmdPB* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.subtick_moves_.InternalSwap(&other->_impl_.subtick_moves_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.move_crc_, &other->_impl_.move_crc_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CBaseUserCmdPB, _impl_.pawn_entity_handle_)
      + sizeof(CBaseUserCmdPB::_impl_.pawn_entity_handle_)
      - PROTOBUF_FIELD_OFFSET(CBaseUserCmdPB, _impl_.buttons_pb_)>(
          reinterpret_cast<char*>(&_impl_.buttons_pb_),
          reinterpret_cast<char*>(&other->_impl_.buttons_pb_));
}

::google::protobuf::Metadata CBaseUserCmdPB::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CUserCmdBasePB::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CUserCmdBasePB>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CUserCmdBasePB, _impl_._has_bits_);
};

CUserCmdBasePB::CUserCmdBasePB(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CUserCmdBasePB_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CUserCmdBasePB)
}
PROTOBUF_NDEBUG_INLINE CUserCmdBasePB::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::CUserCmdBasePB& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

CUserCmdBasePB::CUserCmdBasePB(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const CUserCmdBasePB& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CUserCmdBasePB_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CUserCmdBasePB* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.base_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.base_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:CUserCmdBasePB)
}
PROTOBUF_NDEBUG_INLINE CUserCmdBasePB::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void CUserCmdBasePB::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.base_ = {};
}
CUserCmdBasePB::~CUserCmdBasePB() {
  // @@protoc_insertion_point(destructor:CUserCmdBasePB)
  SharedDtor(*this);
}
inline void CUserCmdBasePB::SharedDtor(MessageLite& self) {
  CUserCmdBasePB& this_ = static_cast<CUserCmdBasePB&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.base_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CUserCmdBasePB::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CUserCmdBasePB(arena);
}
constexpr auto CUserCmdBasePB::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(CUserCmdBasePB),
                                            alignof(CUserCmdBasePB));
}
constexpr auto CUserCmdBasePB::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CUserCmdBasePB_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CUserCmdBasePB::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CUserCmdBasePB>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CUserCmdBasePB::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CUserCmdBasePB>(), &CUserCmdBasePB::ByteSizeLong,
              &CUserCmdBasePB::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CUserCmdBasePB, _impl_._cached_size_),
          false,
      },
      &CUserCmdBasePB::kDescriptorMethods,
      &descriptor_table_usercmd_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        CUserCmdBasePB_class_data_ =
            CUserCmdBasePB::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL CUserCmdBasePB::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CUserCmdBasePB_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CUserCmdBasePB_class_data_.tc_table);
  return CUserCmdBasePB_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2>
CUserCmdBasePB::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CUserCmdBasePB, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    CUserCmdBasePB_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CUserCmdBasePB>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional .CBaseUserCmdPB base = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(CUserCmdBasePB, _impl_.base_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .CBaseUserCmdPB base = 1;
    {PROTOBUF_FIELD_OFFSET(CUserCmdBasePB, _impl_.base_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::CBaseUserCmdPB>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void CUserCmdBasePB::Clear() {
// @@protoc_insertion_point(message_clear_start:CUserCmdBasePB)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(_impl_.base_ != nullptr);
    _impl_.base_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CUserCmdBasePB::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CUserCmdBasePB& this_ = static_cast<const CUserCmdBasePB&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CUserCmdBasePB::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CUserCmdBasePB& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:CUserCmdBasePB)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional .CBaseUserCmdPB base = 1;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.base_, this_._impl_.base_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CUserCmdBasePB)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CUserCmdBasePB::ByteSizeLong(const MessageLite& base) {
  const CUserCmdBasePB& this_ = static_cast<const CUserCmdBasePB&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t CUserCmdBasePB::ByteSizeLong() const {
  const CUserCmdBasePB& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:CUserCmdBasePB)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

   {
    // optional .CBaseUserCmdPB base = 1;
    cached_has_bits = this_._impl_._has_bits_[0];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.base_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void CUserCmdBasePB::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CUserCmdBasePB*>(&to_msg);
  auto& from = static_cast<const CUserCmdBasePB&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:CUserCmdBasePB)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(from._impl_.base_ != nullptr);
    if (_this->_impl_.base_ == nullptr) {
      _this->_impl_.base_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.base_);
    } else {
      _this->_impl_.base_->MergeFrom(*from._impl_.base_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CUserCmdBasePB::CopyFrom(const CUserCmdBasePB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CUserCmdBasePB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CUserCmdBasePB::InternalSwap(CUserCmdBasePB* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.base_, other->_impl_.base_);
}

::google::protobuf::Metadata CUserCmdBasePB::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ [[maybe_unused]] =
        (::_pbi::AddDescriptors(&descriptor_table_usercmd_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cs_usercmd.proto
// Protobuf C++ Version: 6.30.0-rc1

#include "cs_usercmd.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;

inline constexpr CSGOInterpolationInfoPB_CL::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        frac_{0} {}

template <typename>
PROTOBUF_CONSTEXPR CSGOInterpolationInfoPB_CL::CSGOInterpolationInfoPB_CL(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CSGOInterpolationInfoPB_CL_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CSGOInterpolationInfoPB_CLDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSGOInterpolationInfoPB_CLDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSGOInterpolationInfoPB_CLDefaultTypeInternal() {}
  union {
    CSGOInterpolationInfoPB_CL _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSGOInterpolationInfoPB_CLDefaultTypeInternal _CSGOInterpolationInfoPB_CL_default_instance_;

inline constexpr CSGOInterpolationInfoPB::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        frac_{0},
        src_tick_{-1},
        dst_tick_{-1} {}

template <typename>
PROTOBUF_CONSTEXPR CSGOInterpolationInfoPB::CSGOInterpolationInfoPB(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CSGOInterpolationInfoPB_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CSGOInterpolationInfoPBDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSGOInterpolationInfoPBDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSGOInterpolationInfoPBDefaultTypeInternal() {}
  union {
    CSGOInterpolationInfoPB _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSGOInterpolationInfoPBDefaultTypeInternal _CSGOInterpolationInfoPB_default_instance_;

inline constexpr CSGOInputHistoryEntryPB::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        view_angles_{nullptr},
        cl_interp_{nullptr},
        sv_interp0_{nullptr},
        sv_interp1_{nullptr},
        player_interp_{nullptr},
        shoot_position_{nullptr},
        target_head_pos_check_{nullptr},
        target_abs_pos_check_{nullptr},
        target_abs_ang_check_{nullptr},
        render_tick_count_{0},
        render_tick_fraction_{0},
        player_tick_count_{0},
        player_tick_fraction_{0},
        frame_number_{0},
        target_ent_index_{-1} {}

template <typename>
PROTOBUF_CONSTEXPR CSGOInputHistoryEntryPB::CSGOInputHistoryEntryPB(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CSGOInputHistoryEntryPB_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CSGOInputHistoryEntryPBDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSGOInputHistoryEntryPBDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSGOInputHistoryEntryPBDefaultTypeInternal() {}
  union {
    CSGOInputHistoryEntryPB _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSGOInputHistoryEntryPBDefaultTypeInternal _CSGOInputHistoryEntryPB_default_instance_;

inline constexpr CSGOUserCmdPB::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        input_history_{},
        base_{nullptr},
        left_hand_desired_{false},
        is_predicting_damage_{false},
        attack3_start_history_index_{-1},
        attack1_start_history_index_{-1},
        attack2_start_history_index_{-1} {}

template <typename>
PROTOBUF_CONSTEXPR CSGOUserCmdPB::CSGOUserCmdPB(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CSGOUserCmdPB_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CSGOUserCmdPBDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSGOUserCmdPBDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSGOUserCmdPBDefaultTypeInternal() {}
  union {
    CSGOUserCmdPB _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSGOUserCmdPBDefaultTypeInternal _CSGOUserCmdPB_default_instance_;
static constexpr const ::_pb::EnumDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_enum_descriptors_cs_5fusercmd_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_service_descriptors_cs_5fusercmd_2eproto = nullptr;
const ::uint32_t
    TableStruct_cs_5fusercmd_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::CSGOInterpolationInfoPB, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CSGOInterpolationInfoPB, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CSGOInterpolationInfoPB, _impl_.src_tick_),
        PROTOBUF_FIELD_OFFSET(::CSGOInterpolationInfoPB, _impl_.dst_tick_),
        PROTOBUF_FIELD_OFFSET(::CSGOInterpolationInfoPB, _impl_.frac_),
        1,
        2,
        0,
        PROTOBUF_FIELD_OFFSET(::CSGOInterpolationInfoPB_CL, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CSGOInterpolationInfoPB_CL, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CSGOInterpolationInfoPB_CL, _impl_.frac_),
        0,
        PROTOBUF_FIELD_OFFSET(::CSGOInputHistoryEntryPB, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CSGOInputHistoryEntryPB, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CSGOInputHistoryEntryPB, _impl_.view_angles_),
        PROTOBUF_FIELD_OFFSET(::CSGOInputHistoryEntryPB, _impl_.render_tick_count_),
        PROTOBUF_FIELD_OFFSET(::CSGOInputHistoryEntryPB, _impl_.render_tick_fraction_),
        PROTOBUF_FIELD_OFFSET(::CSGOInputHistoryEntryPB, _impl_.player_tick_count_),
        PROTOBUF_FIELD_OFFSET(::CSGOInputHistoryEntryPB, _impl_.player_tick_fraction_),
        PROTOBUF_FIELD_OFFSET(::CSGOInputHistoryEntryPB, _impl_.cl_interp_),
        PROTOBUF_FIELD_OFFSET(::CSGOInputHistoryEntryPB, _impl_.sv_interp0_),
        PROTOBUF_FIELD_OFFSET(::CSGOInputHistoryEntryPB, _impl_.sv_interp1_),
        PROTOBUF_FIELD_OFFSET(::CSGOInputHistoryEntryPB, _impl_.player_interp_),
        PROTOBUF_FIELD_OFFSET(::CSGOInputHistoryEntryPB, _impl_.frame_number_),
        PROTOBUF_FIELD_OFFSET(::CSGOInputHistoryEntryPB, _impl_.target_ent_index_),
        PROTOBUF_FIELD_OFFSET(::CSGOInputHistoryEntryPB, _impl_.shoot_position_),
        PROTOBUF_FIELD_OFFSET(::CSGOInputHistoryEntryPB, _impl_.target_head_pos_check_),
        PROTOBUF_FIELD_OFFSET(::CSGOInputHistoryEntryPB, _impl_.target_abs_pos_check_),
        PROTOBUF_FIELD_OFFSET(::CSGOInputHistoryEntryPB, _impl_.target_abs_ang_check_),
        0,
        9,
        10,
        11,
        12,
        1,
        2,
        3,
        4,
        13,
        14,
        5,
        6,
        7,
        8,
        PROTOBUF_FIELD_OFFSET(::CSGOUserCmdPB, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CSGOUserCmdPB, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CSGOUserCmdPB, _impl_.base_),
        PROTOBUF_FIELD_OFFSET(::CSGOUserCmdPB, _impl_.input_history_),
        PROTOBUF_FIELD_OFFSET(::CSGOUserCmdPB, _impl_.attack1_start_history_index_),
        PROTOBUF_FIELD_OFFSET(::CSGOUserCmdPB, _impl_.attack2_start_history_index_),
        PROTOBUF_FIELD_OFFSET(::CSGOUserCmdPB, _impl_.attack3_start_history_index_),
        PROTOBUF_FIELD_OFFSET(::CSGOUserCmdPB, _impl_.left_hand_desired_),
        PROTOBUF_FIELD_OFFSET(::CSGOUserCmdPB, _impl_.is_predicting_damage_),
        0,
        ~0u,
        4,
        5,
        3,
        1,
        2,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 11, -1, sizeof(::CSGOInterpolationInfoPB)},
        {14, 23, -1, sizeof(::CSGOInterpolationInfoPB_CL)},
        {24, 47, -1, sizeof(::CSGOInputHistoryEntryPB)},
        {62, 77, -1, sizeof(::CSGOUserCmdPB)},
};
static const ::_pb::Message* PROTOBUF_NONNULL const file_default_instances[] = {
    &::_CSGOInterpolationInfoPB_default_instance_._instance,
    &::_CSGOInterpolationInfoPB_CL_default_instance_._instance,
    &::_CSGOInputHistoryEntryPB_default_instance_._instance,
    &::_CSGOUserCmdPB_default_instance_._instance,
};
const char descriptor_table_protodef_cs_5fusercmd_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\020cs_usercmd.proto\032\026networkbasetypes.pro"
    "to\032\rusercmd.proto\"V\n\027CSGOInterpolationIn"
    "foPB\022\024\n\010src_tick\030\001 \001(\005:\002-1\022\024\n\010dst_tick\030\002"
    " \001(\005:\002-1\022\017\n\004frac\030\003 \001(\002:\0010\"-\n\032CSGOInterpo"
    "lationInfoPB_CL\022\017\n\004frac\030\003 \001(\002:\0010\"\305\004\n\027CSG"
    "OInputHistoryEntryPB\022 \n\013view_angles\030\002 \001("
    "\0132\013.CMsgQAngle\022\031\n\021render_tick_count\030\004 \001("
    "\005\022\034\n\024render_tick_fraction\030\005 \001(\002\022\031\n\021playe"
    "r_tick_count\030\006 \001(\005\022\034\n\024player_tick_fracti"
    "on\030\007 \001(\002\022.\n\tcl_interp\030\014 \001(\0132\033.CSGOInterp"
    "olationInfoPB_CL\022,\n\nsv_interp0\030\r \001(\0132\030.C"
    "SGOInterpolationInfoPB\022,\n\nsv_interp1\030\016 \001"
    "(\0132\030.CSGOInterpolationInfoPB\022/\n\rplayer_i"
    "nterp\030\017 \001(\0132\030.CSGOInterpolationInfoPB\022\024\n"
    "\014frame_number\030@ \001(\005\022\034\n\020target_ent_index\030"
    "A \001(\005:\002-1\022#\n\016shoot_position\030B \001(\0132\013.CMsg"
    "Vector\022*\n\025target_head_pos_check\030C \001(\0132\013."
    "CMsgVector\022)\n\024target_abs_pos_check\030D \001(\013"
    "2\013.CMsgVector\022)\n\024target_abs_ang_check\030E "
    "\001(\0132\013.CMsgQAngle\"\241\002\n\rCSGOUserCmdPB\022\035\n\004ba"
    "se\030\001 \001(\0132\017.CBaseUserCmdPB\022/\n\rinput_histo"
    "ry\030\002 \003(\0132\030.CSGOInputHistoryEntryPB\022\'\n\033at"
    "tack1_start_history_index\030\006 \001(\005:\002-1\022\'\n\033a"
    "ttack2_start_history_index\030\007 \001(\005:\002-1\022\'\n\033"
    "attack3_start_history_index\030\010 \001(\005:\002-1\022 \n"
    "\021left_hand_desired\030\t \001(\010:\005false\022#\n\024is_pr"
    "edicting_damage\030\n \001(\010:\005false"
};
static const ::_pbi::DescriptorTable* PROTOBUF_NONNULL const
    descriptor_table_cs_5fusercmd_2eproto_deps[2] = {
        &::descriptor_table_networkbasetypes_2eproto,
        &::descriptor_table_usercmd_2eproto,
};
static ::absl::once_flag descriptor_table_cs_5fusercmd_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_cs_5fusercmd_2eproto = {
    false,
    false,
    1068,
    descriptor_table_protodef_cs_5fusercmd_2eproto,
    "cs_usercmd.proto",
    &descriptor_table_cs_5fusercmd_2eproto_once,
    descriptor_table_cs_5fusercmd_2eproto_deps,
    2,
    4,
    schemas,
    file_default_instances,
    TableStruct_cs_5fusercmd_2eproto::offsets,
    file_level_enum_descriptors_cs_5fusercmd_2eproto,
    file_level_service_descriptors_cs_5fusercmd_2eproto,
};
// ===================================================================

class CSGOInterpolationInfoPB::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CSGOInterpolationInfoPB>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CSGOInterpolationInfoPB, _impl_._has_bits_);
};

CSGOInterpolationInfoPB::CSGOInterpolationInfoPB(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CSGOInterpolationInfoPB_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSGOInterpolationInfoPB)
}
CSGOInterpolationInfoPB::CSGOInterpolationInfoPB(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const CSGOInterpolationInfoPB& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CSGOInterpolationInfoPB_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
}
PROTOBUF_NDEBUG_INLINE CSGOInterpolationInfoPB::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        src_tick_{-1},
        dst_tick_{-1} {}

inline void CSGOInterpolationInfoPB::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.frac_ = {};
}
CSGOInterpolationInfoPB::~CSGOInterpolationInfoPB() {
  // @@protoc_insertion_point(destructor:CSGOInterpolationInfoPB)
  SharedDtor(*this);
}
inline void CSGOInterpolationInfoPB::SharedDtor(MessageLite& self) {
  CSGOInterpolationInfoPB& this_ = static_cast<CSGOInterpolationInfoPB&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CSGOInterpolationInfoPB::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CSGOInterpolationInfoPB(arena);
}
constexpr auto CSGOInterpolationInfoPB::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(CSGOInterpolationInfoPB),
                                            alignof(CSGOInterpolationInfoPB));
}
constexpr auto CSGOInterpolationInfoPB::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CSGOInterpolationInfoPB_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CSGOInterpolationInfoPB::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CSGOInterpolationInfoPB>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CSGOInterpolationInfoPB::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CSGOInterpolationInfoPB>(), &CSGOInterpolationInfoPB::ByteSizeLong,
              &CSGOInterpolationInfoPB::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CSGOInterpolationInfoPB, _impl_._cached_size_),
          false,
      },
      &CSGOInterpolationInfoPB::kDescriptorMethods,
      &descriptor_table_cs_5fusercmd_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        CSGOInterpolationInfoPB_class_data_ =
            CSGOInterpolationInfoPB::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL CSGOInterpolationInfoPB::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CSGOInterpolationInfoPB_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CSGOInterpolationInfoPB_class_data_.tc_table);
  return CSGOInterpolationInfoPB_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2>
CSGOInterpolationInfoPB::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CSGOInterpolationInfoPB, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    CSGOInterpolationInfoPB_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CSGOInterpolationInfoPB>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional int32 src_tick = 1 [default = -1];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CSGOInterpolationInfoPB, _impl_.src_tick_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(CSGOInterpolationInfoPB, _impl_.src_tick_)}},
    // optional int32 dst_tick = 2 [default = -1];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CSGOInterpolationInfoPB, _impl_.dst_tick_), 2>(),
     {16, 2, 0, PROTOBUF_FIELD_OFFSET(CSGOInterpolationInfoPB, _impl_.dst_tick_)}},
    // optional float frac = 3 [default = 0];
    {::_pbi::TcParser::FastF32S1,
     {29, 0, 0, PROTOBUF_FIELD_OFFSET(CSGOInterpolationInfoPB, _impl_.frac_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional int32 src_tick = 1 [default = -1];
    {PROTOBUF_FIELD_OFFSET(CSGOInterpolationInfoPB, _impl_.src_tick_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 dst_tick = 2 [default = -1];
    {PROTOBUF_FIELD_OFFSET(CSGOInterpolationInfoPB, _impl_.dst_tick_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional float frac = 3 [default = 0];
    {PROTOBUF_FIELD_OFFSET(CSGOInterpolationInfoPB, _impl_.frac_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};
PROTOBUF_NOINLINE void CSGOInterpolationInfoPB::Clear() {
// @@protoc_insertion_point(message_clear_start:CSGOInterpolationInfoPB)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    _impl_.frac_ = 0;
    _impl_.src_tick_ = -1;
    _impl_.dst_tick_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CSGOInterpolationInfoPB::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CSGOInterpolationInfoPB& this_ = static_cast<const CSGOInterpolationInfoPB&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CSGOInterpolationInfoPB::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CSGOInterpolationInfoPB& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:CSGOInterpolationInfoPB)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional int32 src_tick = 1 [default = -1];
  if ((cached_has_bits & 0x00000002u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<1>(
            stream, this_._internal_src_tick(), target);
  }

  // optional int32 dst_tick = 2 [default = -1];
  if ((cached_has_bits & 0x00000004u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<2>(
            stream, this_._internal_dst_tick(), target);
  }

  // optional float frac = 3 [default = 0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this_._internal_frac(), target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSGOInterpolationInfoPB)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CSGOInterpolationInfoPB::ByteSizeLong(const MessageLite& base) {
  const CSGOInterpolationInfoPB& this_ = static_cast<const CSGOInterpolationInfoPB&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t CSGOInterpolationInfoPB::ByteSizeLong() const {
  const CSGOInterpolationInfoPB& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:CSGOInterpolationInfoPB)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += static_cast<bool>(0x00000001u & cached_has_bits) * 5;
  if ((cached_has_bits & 0x00000006u) != 0) {
    // optional int32 src_tick = 1 [default = -1];
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_src_tick());
    }
    // optional int32 dst_tick = 2 [default = -1];
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_dst_tick());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void CSGOInterpolationInfoPB::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CSGOInterpolationInfoPB*>(&to_msg);
  auto& from = static_cast<const CSGOInterpolationInfoPB&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CSGOInterpolationInfoPB)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_impl_.frac_ = from._impl_.frac_;
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_impl_.src_tick_ = from._impl_.src_tick_;
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_impl_.dst_tick_ = from._impl_.dst_tick_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CSGOInterpolationInfoPB::CopyFrom(const CSGOInterpolationInfoPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSGOInterpolationInfoPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CSGOInterpolationInfoPB::InternalSwap(CSGOInterpolationInfoPB* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSGOInterpolationInfoPB, _impl_.dst_tick_)
      + sizeof(CSGOInterpolationInfoPB::_impl_.dst_tick_)
      - PROTOBUF_FIELD_OFFSET(CSGOInterpolationInfoPB, _impl_.frac_)>(
          reinterpret_cast<char*>(&_impl_.frac_),
          reinterpret_cast<char*>(&other->_impl_.frac_));
}

::google::protobuf::Metadata CSGOInterpolationInfoPB::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CSGOInterpolationInfoPB_CL::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CSGOInterpolationInfoPB_CL>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CSGOInterpolationInfoPB_CL, _impl_._has_bits_);
};

CSGOInterpolationInfoPB_CL::CSGOInterpolationInfoPB_CL(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CSGOInterpolationInfoPB_CL_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSGOInterpolationInfoPB_CL)
}
CSGOInterpolationInfoPB_CL::CSGOInterpolationInfoPB_CL(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const CSGOInterpolationInfoPB_CL& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CSGOInterpolationInfoPB_CL_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
}
PROTOBUF_NDEBUG_INLINE CSGOInterpolationInfoPB_CL::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void CSGOInterpolationInfoPB_CL::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.frac_ = {};
}
CSGOInterpolationInfoPB_CL::~CSGOInterpolationInfoPB_CL() {
  // @@protoc_insertion_point(destructor:CSGOInterpolationInfoPB_CL)
  SharedDtor(*this);
}
inline void CSGOInterpolationInfoPB_CL::SharedDtor(MessageLite& self) {
  CSGOInterpolationInfoPB_CL& this_ = static_cast<CSGOInterpolationInfoPB_CL&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CSGOInterpolationInfoPB_CL::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CSGOInterpolationInfoPB_CL(arena);
}
constexpr auto CSGOInterpolationInfoPB_CL::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(CSGOInterpolationInfoPB_CL),
                                            alignof(CSGOInterpolationInfoPB_CL));
}
constexpr auto CSGOInterpolationInfoPB_CL::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CSGOInterpolationInfoPB_CL_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CSGOInterpolationInfoPB_CL::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CSGOInterpolationInfoPB_CL>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CSGOInterpolationInfoPB_CL::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CSGOInterpolationInfoPB_CL>(), &CSGOInterpolationInfoPB_CL::ByteSizeLong,
              &CSGOInterpolationInfoPB_CL::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CSGOInterpolationInfoPB_CL, _impl_._cached_size_),
          false,
      },
      &CSGOInterpolationInfoPB_CL::kDescriptorMethods,
      &descriptor_table_cs_5fusercmd_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        CSGOInterpolationInfoPB_CL_class_data_ =
            CSGOInterpolationInfoPB_CL::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL CSGOInterpolationInfoPB_CL::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CSGOInterpolationInfoPB_CL_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CSGOInterpolationInfoPB_CL_class_data_.tc_table);
  return CSGOInterpolationInfoPB_CL_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2>
CSGOInterpolationInfoPB_CL::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CSGOInterpolationInfoPB_CL, _impl_._has_bits_),
    0, // no _extensions_
    3, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967291,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    CSGOInterpolationInfoPB_CL_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CSGOInterpolationInfoPB_CL>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional float frac = 3 [default = 0];
    {::_pbi::TcParser::FastF32S1,
     {29, 0, 0, PROTOBUF_FIELD_OFFSET(CSGOInterpolationInfoPB_CL, _impl_.frac_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional float frac = 3 [default = 0];
    {PROTOBUF_FIELD_OFFSET(CSGOInterpolationInfoPB_CL, _impl_.frac_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};
PROTOBUF_NOINLINE void CSGOInterpolationInfoPB_CL::Clear() {
// @@protoc_insertion_point(message_clear_start:CSGOInterpolationInfoPB_CL)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.frac_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CSGOInterpolationInfoPB_CL::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CSGOInterpolationInfoPB_CL& this_ = static_cast<const CSGOInterpolationInfoPB_CL&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CSGOInterpolationInfoPB_CL::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CSGOInterpolationInfoPB_CL& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:CSGOInterpolationInfoPB_CL)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional float frac = 3 [default = 0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        3, this_._internal_frac(), target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSGOInterpolationInfoPB_CL)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CSGOInterpolationInfoPB_CL::ByteSizeLong(const MessageLite& base) {
  const CSGOInterpolationInfoPB_CL& this_ = static_cast<const CSGOInterpolationInfoPB_CL&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t CSGOInterpolationInfoPB_CL::ByteSizeLong() const {
  const CSGOInterpolationInfoPB_CL& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:CSGOInterpolationInfoPB_CL)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += static_cast<bool>(0x00000001u & cached_has_bits) * 5;
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void CSGOInterpolationInfoPB_CL::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CSGOInterpolationInfoPB_CL*>(&to_msg);
  auto& from = static_cast<const CSGOInterpolationInfoPB_CL&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CSGOInterpolationInfoPB_CL)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _this->_impl_.frac_ = from._impl_.frac_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CSGOInterpolationInfoPB_CL::CopyFrom(const CSGOInterpolationInfoPB_CL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSGOInterpolationInfoPB_CL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CSGOInterpolationInfoPB_CL::InternalSwap(CSGOInterpolationInfoPB_CL* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.frac_, other->_impl_.frac_);
}

::google::protobuf::Metadata CSGOInterpolationInfoPB_CL::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CSGOInputHistoryEntryPB::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CSGOInputHistoryEntryPB>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CSGOInputHistoryEntryPB, _impl_._has_bits_);
};

void CSGOInputHistoryEntryPB::clear_view_angles() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.view_angles_ != nullptr) _impl_.view_angles_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void CSGOInputHistoryEntryPB::clear_shoot_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.shoot_position_ != nullptr) _impl_.shoot_position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void CSGOInputHistoryEntryPB::clear_target_head_pos_check() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.target_head_pos_check_ != nullptr) _impl_.target_head_pos_check_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void CSGOInputHistoryEntryPB::clear_target_abs_pos_check() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.target_abs_pos_check_ != nullptr) _impl_.target_abs_pos_check_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void CSGOInputHistoryEntryPB::clear_target_abs_ang_check() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.target_abs_ang_check_ != nullptr) _impl_.target_abs_ang_check_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
CSGOInputHistoryEntryPB::CSGOInputHistoryEntryPB(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CSGOInputHistoryEntryPB_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSGOInputHistoryEntryPB)
}
PROTOBUF_NDEBUG_INLINE CSGOInputHistoryEntryPB::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::CSGOInputHistoryEntryPB& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

CSGOInputHistoryEntryPB::CSGOInputHistoryEntryPB(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const CSGOInputHistoryEntryPB& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CSGOInputHistoryEntryPB_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CSGOInputHistoryEntryPB* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.view_angles_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.view_angles_)
                : nullptr;
  _impl_.cl_interp_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.cl_interp_)
                : nullptr;
  _impl_.sv_interp0_ = ((cached_has_bits & 0x00000004u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.sv_interp0_)
                : nullptr;
  _impl_.sv_interp1_ = ((cached_has_bits & 0x00000008u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.sv_interp1_)
                : nullptr;
  _impl_.player_interp_ = ((cached_has_bits & 0x00000010u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.player_interp_)
                : nullptr;
  _impl_.shoot_position_ = ((cached_has_bits & 0x00000020u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.shoot_position_)
                : nullptr;
  _impl_.target_head_pos_check_ = ((cached_has_bits & 0x00000040u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.target_head_pos_check_)
                : nullptr;
  _impl_.target_abs_pos_check_ = ((cached_has_bits & 0x00000080u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.target_abs_pos_check_)
                : nullptr;
  _impl_.target_abs_ang_check_ = ((cached_has_bits & 0x00000100u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.target_abs_ang_check_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, render_tick_count_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, render_tick_count_),
           offsetof(Impl_, target_ent_index_) -
               offsetof(Impl_, render_tick_count_) +
               sizeof(Impl_::target_ent_index_));

  // @@protoc_insertion_point(copy_constructor:CSGOInputHistoryEntryPB)
}
PROTOBUF_NDEBUG_INLINE CSGOInputHistoryEntryPB::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        target_ent_index_{-1} {}

inline void CSGOInputHistoryEntryPB::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, view_angles_),
           0,
           offsetof(Impl_, frame_number_) -
               offsetof(Impl_, view_angles_) +
               sizeof(Impl_::frame_number_));
}
CSGOInputHistoryEntryPB::~CSGOInputHistoryEntryPB() {
  // @@protoc_insertion_point(destructor:CSGOInputHistoryEntryPB)
  SharedDtor(*this);
}
inline void CSGOInputHistoryEntryPB::SharedDtor(MessageLite& self) {
  CSGOInputHistoryEntryPB& this_ = static_cast<CSGOInputHistoryEntryPB&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.view_angles_;
  delete this_._impl_.cl_interp_;
  delete this_._impl_.sv_interp0_;
  delete this_._impl_.sv_interp1_;
  delete this_._impl_.player_interp_;
  delete this_._impl_.shoot_position_;
  delete this_._impl_.target_head_pos_check_;
  delete this_._impl_.target_abs_pos_check_;
  delete this_._impl_.target_abs_ang_check_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CSGOInputHistoryEntryPB::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CSGOInputHistoryEntryPB(arena);
}
constexpr auto CSGOInputHistoryEntryPB::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(CSGOInputHistoryEntryPB),
                                            alignof(CSGOInputHistoryEntryPB));
}
constexpr auto CSGOInputHistoryEntryPB::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CSGOInputHistoryEntryPB_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CSGOInputHistoryEntryPB::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CSGOInputHistoryEntryPB>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CSGOInputHistoryEntryPB::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CSGOInputHistoryEntryPB>(), &CSGOInputHistoryEntryPB::ByteSizeLong,
              &CSGOInputHistoryEntryPB::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CSGOInputHistoryEntryPB, _impl_._cached_size_),
          false,
      },
      &CSGOInputHistoryEntryPB::kDescriptorMethods,
      &descriptor_table_cs_5fusercmd_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        CSGOInputHistoryEntryPB_class_data_ =
            CSGOInputHistoryEntryPB::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL CSGOInputHistoryEntryPB::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CSGOInputHistoryEntryPB_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CSGOInputHistoryEntryPB_class_data_.tc_table);
  return CSGOInputHistoryEntryPB_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 15, 9, 0, 7>
CSGOInputHistoryEntryPB::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CSGOInputHistoryEntryPB, _impl_._has_bits_),
    0, // no _extensions_
    69, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294936453,  // skipmap
    offsetof(decltype(_table_), field_entries),
    15,  // num_field_entries
    9,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    CSGOInputHistoryEntryPB_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CSGOInputHistoryEntryPB>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional int32 frame_number = 64;
    {::_pbi::TcParser::FastV32S2,
     {1152, 13, 0, PROTOBUF_FIELD_OFFSET(CSGOInputHistoryEntryPB, _impl_.frame_number_)}},
    // optional int32 target_ent_index = 65 [default = -1];
    {::_pbi::TcParser::FastV32S2,
     {1160, 14, 0, PROTOBUF_FIELD_OFFSET(CSGOInputHistoryEntryPB, _impl_.target_ent_index_)}},
    // optional .CMsgQAngle view_angles = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(CSGOInputHistoryEntryPB, _impl_.view_angles_)}},
    // optional .CMsgVector target_head_pos_check = 67;
    {::_pbi::TcParser::FastMtS2,
     {1178, 6, 6, PROTOBUF_FIELD_OFFSET(CSGOInputHistoryEntryPB, _impl_.target_head_pos_check_)}},
    // optional int32 render_tick_count = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CSGOInputHistoryEntryPB, _impl_.render_tick_count_), 9>(),
     {32, 9, 0, PROTOBUF_FIELD_OFFSET(CSGOInputHistoryEntryPB, _impl_.render_tick_count_)}},
    // optional float render_tick_fraction = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 10, 0, PROTOBUF_FIELD_OFFSET(CSGOInputHistoryEntryPB, _impl_.render_tick_fraction_)}},
    // optional int32 player_tick_count = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CSGOInputHistoryEntryPB, _impl_.player_tick_count_), 11>(),
     {48, 11, 0, PROTOBUF_FIELD_OFFSET(CSGOInputHistoryEntryPB, _impl_.player_tick_count_)}},
    // optional float player_tick_fraction = 7;
    {::_pbi::TcParser::FastF32S1,
     {61, 12, 0, PROTOBUF_FIELD_OFFSET(CSGOInputHistoryEntryPB, _impl_.player_tick_fraction_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional .CSGOInterpolationInfoPB_CL cl_interp = 12;
    {::_pbi::TcParser::FastMtS1,
     {98, 1, 1, PROTOBUF_FIELD_OFFSET(CSGOInputHistoryEntryPB, _impl_.cl_interp_)}},
    // optional .CSGOInterpolationInfoPB sv_interp0 = 13;
    {::_pbi::TcParser::FastMtS1,
     {106, 2, 2, PROTOBUF_FIELD_OFFSET(CSGOInputHistoryEntryPB, _impl_.sv_interp0_)}},
    // optional .CSGOInterpolationInfoPB sv_interp1 = 14;
    {::_pbi::TcParser::FastMtS1,
     {114, 3, 3, PROTOBUF_FIELD_OFFSET(CSGOInputHistoryEntryPB, _impl_.sv_interp1_)}},
    // optional .CSGOInterpolationInfoPB player_interp = 15;
    {::_pbi::TcParser::FastMtS1,
     {122, 4, 4, PROTOBUF_FIELD_OFFSET(CSGOInputHistoryEntryPB, _impl_.player_interp_)}},
  }}, {{
    64, 0, 1,
    65472, 9,
    65535, 65535
  }}, {{
    // optional .CMsgQAngle view_angles = 2;
    {PROTOBUF_FIELD_OFFSET(CSGOInputHistoryEntryPB, _impl_.view_angles_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional int32 render_tick_count = 4;
    {PROTOBUF_FIELD_OFFSET(CSGOInputHistoryEntryPB, _impl_.render_tick_count_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional float render_tick_fraction = 5;
    {PROTOBUF_FIELD_OFFSET(CSGOInputHistoryEntryPB, _impl_.render_tick_fraction_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional int32 player_tick_count = 6;
    {PROTOBUF_FIELD_OFFSET(CSGOInputHistoryEntryPB, _impl_.player_tick_count_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional float player_tick_fraction = 7;
    {PROTOBUF_FIELD_OFFSET(CSGOInputHistoryEntryPB, _impl_.player_tick_fraction_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional .CSGOInterpolationInfoPB_CL cl_interp = 12;
    {PROTOBUF_FIELD_OFFSET(CSGOInputHistoryEntryPB, _impl_.cl_interp_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .CSGOInterpolationInfoPB sv_interp0 = 13;
    {PROTOBUF_FIELD_OFFSET(CSGOInputHistoryEntryPB, _impl_.sv_interp0_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .CSGOInterpolationInfoPB sv_interp1 = 14;
    {PROTOBUF_FIELD_OFFSET(CSGOInputHistoryEntryPB, _impl_.sv_interp1_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .CSGOInterpolationInfoPB player_interp = 15;
    {PROTOBUF_FIELD_OFFSET(CSGOInputHistoryEntryPB, _impl_.player_interp_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional int32 frame_number = 64;
    {PROTOBUF_FIELD_OFFSET(CSGOInputHistoryEntryPB, _impl_.frame_number_), _Internal::kHasBitsOffset + 13, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 target_ent_index = 65 [default = -1];
    {PROTOBUF_FIELD_OFFSET(CSGOInputHistoryEntryPB, _impl_.target_ent_index_), _Internal::kHasBitsOffset + 14, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional .CMsgVector shoot_position = 66;
    {PROTOBUF_FIELD_OFFSET(CSGOInputHistoryEntryPB, _impl_.shoot_position_), _Internal::kHasBitsOffset + 5, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .CMsgVector target_head_pos_check = 67;
    {PROTOBUF_FIELD_OFFSET(CSGOInputHistoryEntryPB, _impl_.target_head_pos_check_), _Internal::kHasBitsOffset + 6, 6,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .CMsgVector target_abs_pos_check = 68;
    {PROTOBUF_FIELD_OFFSET(CSGOInputHistoryEntryPB, _impl_.target_abs_pos_check_), _Internal::kHasBitsOffset + 7, 7,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .CMsgQAngle target_abs_ang_check = 69;
    {PROTOBUF_FIELD_OFFSET(CSGOInputHistoryEntryPB, _impl_.target_abs_ang_check_), _Internal::kHasBitsOffset + 8, 8,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::CMsgQAngle>()},
      {::_pbi::TcParser::GetTable<::CSGOInterpolationInfoPB_CL>()},
      {::_pbi::TcParser::GetTable<::CSGOInterpolationInfoPB>()},
      {::_pbi::TcParser::GetTable<::CSGOInterpolationInfoPB>()},
      {::_pbi::TcParser::GetTable<::CSGOInterpolationInfoPB>()},
      {::_pbi::TcParser::GetTable<::CMsgVector>()},
      {::_pbi::TcParser::GetTable<::CMsgVector>()},
      {::_pbi::TcParser::GetTable<::CMsgVector>()},
      {::_pbi::TcParser::GetTable<::CMsgQAngle>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void CSGOInputHistoryEntryPB::Clear() {
// @@protoc_insertion_point(message_clear_start:CSGOInputHistoryEntryPB)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.view_angles_ != nullptr);
      _impl_.view_angles_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.cl_interp_ != nullptr);
      _impl_.cl_interp_->Clear();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(_impl_.sv_interp0_ != nullptr);
      _impl_.sv_interp0_->Clear();
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      ABSL_DCHECK(_impl_.sv_interp1_ != nullptr);
      _impl_.sv_interp1_->Clear();
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      ABSL_DCHECK(_impl_.player_interp_ != nullptr);
      _impl_.player_interp_->Clear();
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      ABSL_DCHECK(_impl_.shoot_position_ != nullptr);
      _impl_.shoot_position_->Clear();
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      ABSL_DCHECK(_impl_.target_head_pos_check_ != nullptr);
      _impl_.target_head_pos_check_->Clear();
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      ABSL_DCHECK(_impl_.target_abs_pos_check_ != nullptr);
      _impl_.target_abs_pos_check_->Clear();
    }
  }
  if ((cached_has_bits & 0x00000100u) != 0) {
    ABSL_DCHECK(_impl_.target_abs_ang_check_ != nullptr);
    _impl_.target_abs_ang_check_->Clear();
  }
  if ((cached_has_bits & 0x00007e00u) != 0) {
    ::memset(&_impl_.render_tick_count_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.frame_number_) -
        reinterpret_cast<char*>(&_impl_.render_tick_count_)) + sizeof(_impl_.frame_number_));
    _impl_.target_ent_index_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CSGOInputHistoryEntryPB::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CSGOInputHistoryEntryPB& this_ = static_cast<const CSGOInputHistoryEntryPB&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CSGOInputHistoryEntryPB::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CSGOInputHistoryEntryPB& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:CSGOInputHistoryEntryPB)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional .CMsgQAngle view_angles = 2;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.view_angles_, this_._impl_.view_angles_->GetCachedSize(), target,
        stream);
  }

  // optional int32 render_tick_count = 4;
  if ((cached_has_bits & 0x00000200u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<4>(
            stream, this_._internal_render_tick_count(), target);
  }

  // optional float render_tick_fraction = 5;
  if ((cached_has_bits & 0x00000400u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        5, this_._internal_render_tick_fraction(), target);
  }

  // optional int32 player_tick_count = 6;
  if ((cached_has_bits & 0x00000800u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<6>(
            stream, this_._internal_player_tick_count(), target);
  }

  // optional float player_tick_fraction = 7;
  if ((cached_has_bits & 0x00001000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        7, this_._internal_player_tick_fraction(), target);
  }

  // optional .CSGOInterpolationInfoPB_CL cl_interp = 12;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        12, *this_._impl_.cl_interp_, this_._impl_.cl_interp_->GetCachedSize(), target,
        stream);
  }

  // optional .CSGOInterpolationInfoPB sv_interp0 = 13;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        13, *this_._impl_.sv_interp0_, this_._impl_.sv_interp0_->GetCachedSize(), target,
        stream);
  }

  // optional .CSGOInterpolationInfoPB sv_interp1 = 14;
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        14, *this_._impl_.sv_interp1_, this_._impl_.sv_interp1_->GetCachedSize(), target,
        stream);
  }

  // optional .CSGOInterpolationInfoPB player_interp = 15;
  if ((cached_has_bits & 0x00000010u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        15, *this_._impl_.player_interp_, this_._impl_.player_interp_->GetCachedSize(), target,
        stream);
  }

  // optional int32 frame_number = 64;
  if ((cached_has_bits & 0x00002000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        64, this_._internal_frame_number(), target);
  }

  // optional int32 target_ent_index = 65 [default = -1];
  if ((cached_has_bits & 0x00004000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        65, this_._internal_target_ent_index(), target);
  }

  // optional .CMsgVector shoot_position = 66;
  if ((cached_has_bits & 0x00000020u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        66, *this_._impl_.shoot_position_, this_._impl_.shoot_position_->GetCachedSize(), target,
        stream);
  }

  // optional .CMsgVector target_head_pos_check = 67;
  if ((cached_has_bits & 0x00000040u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        67, *this_._impl_.target_head_pos_check_, this_._impl_.target_head_pos_check_->GetCachedSize(), target,
        stream);
  }

  // optional .CMsgVector target_abs_pos_check = 68;
  if ((cached_has_bits & 0x00000080u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        68, *this_._impl_.target_abs_pos_check_, this_._impl_.target_abs_pos_check_->GetCachedSize(), target,
        stream);
  }

  // optional .CMsgQAngle target_abs_ang_check = 69;
  if ((cached_has_bits & 0x00000100u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        69, *this_._impl_.target_abs_ang_check_, this_._impl_.target_abs_ang_check_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSGOInputHistoryEntryPB)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CSGOInputHistoryEntryPB::ByteSizeLong(const MessageLite& base) {
  const CSGOInputHistoryEntryPB& this_ = static_cast<const CSGOInputHistoryEntryPB&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t CSGOInputHistoryEntryPB::ByteSizeLong() const {
  const CSGOInputHistoryEntryPB& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:CSGOInputHistoryEntryPB)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += ::absl::popcount(0x00001400u & cached_has_bits) * 5;
  if ((cached_has_bits & 0x000000ffu) != 0) {
    // optional .CMsgQAngle view_angles = 2;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.view_angles_);
    }
    // optional .CSGOInterpolationInfoPB_CL cl_interp = 12;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.cl_interp_);
    }
    // optional .CSGOInterpolationInfoPB sv_interp0 = 13;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.sv_interp0_);
    }
    // optional .CSGOInterpolationInfoPB sv_interp1 = 14;
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.sv_interp1_);
    }
    // optional .CSGOInterpolationInfoPB player_interp = 15;
    if ((cached_has_bits & 0x00000010u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.player_interp_);
    }
    // optional .CMsgVector shoot_position = 66;
    if ((cached_has_bits & 0x00000020u) != 0) {
      total_size += 2 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.shoot_position_);
    }
    // optional .CMsgVector target_head_pos_check = 67;
    if ((cached_has_bits & 0x00000040u) != 0) {
      total_size += 2 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.target_head_pos_check_);
    }
    // optional .CMsgVector target_abs_pos_check = 68;
    if ((cached_has_bits & 0x00000080u) != 0) {
      total_size += 2 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.target_abs_pos_check_);
    }
  }
  if ((cached_has_bits & 0x00006b00u) != 0) {
    // optional .CMsgQAngle target_abs_ang_check = 69;
    if ((cached_has_bits & 0x00000100u) != 0) {
      total_size += 2 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.target_abs_ang_check_);
    }
    // optional int32 render_tick_count = 4;
    if ((cached_has_bits & 0x00000200u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_render_tick_count());
    }
    // optional int32 player_tick_count = 6;
    if ((cached_has_bits & 0x00000800u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_player_tick_count());
    }
    // optional int32 frame_number = 64;
    if ((cached_has_bits & 0x00002000u) != 0) {
      total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                      this_._internal_frame_number());
    }
    // optional int32 target_ent_index = 65 [default = -1];
    if ((cached_has_bits & 0x00004000u) != 0) {
      total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                      this_._internal_target_ent_index());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void CSGOInputHistoryEntryPB::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CSGOInputHistoryEntryPB*>(&to_msg);
  auto& from = static_cast<const CSGOInputHistoryEntryPB&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:CSGOInputHistoryEntryPB)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.view_angles_ != nullptr);
      if (_this->_impl_.view_angles_ == nullptr) {
        _this->_impl_.view_angles_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.view_angles_);
      } else {
        _this->_impl_.view_angles_->MergeFrom(*from._impl_.view_angles_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.cl_interp_ != nullptr);
      if (_this->_impl_.cl_interp_ == nullptr) {
        _this->_impl_.cl_interp_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.cl_interp_);
      } else {
        _this->_impl_.cl_interp_->MergeFrom(*from._impl_.cl_interp_);
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(from._impl_.sv_interp0_ != nullptr);
      if (_this->_impl_.sv_interp0_ == nullptr) {
        _this->_impl_.sv_interp0_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.sv_interp0_);
      } else {
        _this->_impl_.sv_interp0_->MergeFrom(*from._impl_.sv_interp0_);
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      ABSL_DCHECK(from._impl_.sv_interp1_ != nullptr);
      if (_this->_impl_.sv_interp1_ == nullptr) {
        _this->_impl_.sv_interp1_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.sv_interp1_);
      } else {
        _this->_impl_.sv_interp1_->MergeFrom(*from._impl_.sv_interp1_);
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      ABSL_DCHECK(from._impl_.player_interp_ != nullptr);
      if (_this->_impl_.player_interp_ == nullptr) {
        _this->_impl_.player_interp_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.player_interp_);
      } else {
        _this->_impl_.player_interp_->MergeFrom(*from._impl_.player_interp_);
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      ABSL_DCHECK(from._impl_.shoot_position_ != nullptr);
      if (_this->_impl_.shoot_position_ == nullptr) {
        _this->_impl_.shoot_position_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.shoot_position_);
      } else {
        _this->_impl_.shoot_position_->MergeFrom(*from._impl_.shoot_position_);
      }
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      ABSL_DCHECK(from._impl_.target_head_pos_check_ != nullptr);
      if (_this->_impl_.target_head_pos_check_ == nullptr) {
        _this->_impl_.target_head_pos_check_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.target_head_pos_check_);
      } else {
        _this->_impl_.target_head_pos_check_->MergeFrom(*from._impl_.target_head_pos_check_);
      }
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      ABSL_DCHECK(from._impl_.target_abs_pos_check_ != nullptr);
      if (_this->_impl_.target_abs_pos_check_ == nullptr) {
        _this->_impl_.target_abs_pos_check_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.target_abs_pos_check_);
      } else {
        _this->_impl_.target_abs_pos_check_->MergeFrom(*from._impl_.target_abs_pos_check_);
      }
    }
  }
  if ((cached_has_bits & 0x00007f00u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      ABSL_DCHECK(from._impl_.target_abs_ang_check_ != nullptr);
      if (_this->_impl_.target_abs_ang_check_ == nullptr) {
        _this->_impl_.target_abs_ang_check_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.target_abs_ang_check_);
      } else {
        _this->_impl_.target_abs_ang_check_->MergeFrom(*from._impl_.target_abs_ang_check_);
      }
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      _this->_impl_.render_tick_count_ = from._impl_.render_tick_count_;
    }
    if ((cached_has_bits & 0x00000400u) != 0) {
      _this->_impl_.render_tick_fraction_ = from._impl_.render_tick_fraction_;
    }
    if ((cached_has_bits & 0x00000800u) != 0) {
      _this->_impl_.player_tick_count_ = from._impl_.player_tick_count_;
    }
    if ((cached_has_bits & 0x00001000u) != 0) {
      _this->_impl_.player_tick_fraction_ = from._impl_.player_tick_fraction_;
    }
    if ((cached_has_bits & 0x00002000u) != 0) {
      _this->_impl_.frame_number_ = from._impl_.frame_number_;
    }
    if ((cached_has_bits & 0x00004000u) != 0) {
      _this->_impl_.target_ent_index_ = from._impl_.target_ent_index_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CSGOInputHistoryEntryPB::CopyFrom(const CSGOInputHistoryEntryPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSGOInputHistoryEntryPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CSGOInputHistoryEntryPB::InternalSwap(CSGOInputHistoryEntryPB* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSGOInputHistoryEntryPB, _impl_.target_ent_index_)
      + sizeof(CSGOInputHistoryEntryPB::_impl_.target_ent_index_)
      - PROTOBUF_FIELD_OFFSET(CSGOInputHistoryEntryPB, _impl_.view_angles_)>(
          reinterpret_cast<char*>(&_impl_.view_angles_),
          reinterpret_cast<char*>(&other->_impl_.view_angles_));
}

::google::protobuf::Metadata CSGOInputHistoryEntryPB::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CSGOUserCmdPB::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CSGOUserCmdPB>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CSGOUserCmdPB, _impl_._has_bits_);
};

void CSGOUserCmdPB::clear_base() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.base_ != nullptr) _impl_.base_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CSGOUserCmdPB::CSGOUserCmdPB(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CSGOUserCmdPB_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CSGOUserCmdPB)
}
PROTOBUF_NDEBUG_INLINE CSGOUserCmdPB::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::CSGOUserCmdPB& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        input_history_{visibility, arena, from.input_history_} {}

CSGOUserCmdPB::CSGOUserCmdPB(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const CSGOUserCmdPB& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CSGOUserCmdPB_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CSGOUserCmdPB* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.base_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.base_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, left_hand_desired_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, left_hand_desired_),
           offsetof(Impl_, attack2_start_history_index_) -
               offsetof(Impl_, left_hand_desired_) +
               sizeof(Impl_::attack2_start_history_index_));

  // @@protoc_insertion_point(copy_constructor:CSGOUserCmdPB)
}
PROTOBUF_NDEBUG_INLINE CSGOUserCmdPB::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        input_history_{visibility, arena},
        attack3_start_history_index_{-1},
        attack1_start_history_index_{-1},
        attack2_start_history_index_{-1} {}

inline void CSGOUserCmdPB::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, base_),
           0,
           offsetof(Impl_, is_predicting_damage_) -
               offsetof(Impl_, base_) +
               sizeof(Impl_::is_predicting_damage_));
}
CSGOUserCmdPB::~CSGOUserCmdPB() {
  // @@protoc_insertion_point(destructor:CSGOUserCmdPB)
  SharedDtor(*this);
}
inline void CSGOUserCmdPB::SharedDtor(MessageLite& self) {
  CSGOUserCmdPB& this_ = static_cast<CSGOUserCmdPB&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.base_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CSGOUserCmdPB::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CSGOUserCmdPB(arena);
}
constexpr auto CSGOUserCmdPB::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(CSGOUserCmdPB, _impl_.input_history_) +
          decltype(CSGOUserCmdPB::_impl_.input_history_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(CSGOUserCmdPB), alignof(CSGOUserCmdPB), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&CSGOUserCmdPB::PlacementNew_,
                                 sizeof(CSGOUserCmdPB),
                                 alignof(CSGOUserCmdPB));
  }
}
constexpr auto CSGOUserCmdPB::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CSGOUserCmdPB_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CSGOUserCmdPB::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CSGOUserCmdPB>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CSGOUserCmdPB::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CSGOUserCmdPB>(), &CSGOUserCmdPB::ByteSizeLong,
              &CSGOUserCmdPB::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CSGOUserCmdPB, _impl_._cached_size_),
          false,
      },
      &CSGOUserCmdPB::kDescriptorMethods,
      &descriptor_table_cs_5fusercmd_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        CSGOUserCmdPB_class_data_ =
            CSGOUserCmdPB::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL CSGOUserCmdPB::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CSGOUserCmdPB_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CSGOUserCmdPB_class_data_.tc_table);
  return CSGOUserCmdPB_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 2, 0, 2>
CSGOUserCmdPB::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CSGOUserCmdPB, _impl_._has_bits_),
    0, // no _extensions_
    10, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966300,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    CSGOUserCmdPB_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CSGOUserCmdPB>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional int32 attack3_start_history_index = 8 [default = -1];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CSGOUserCmdPB, _impl_.attack3_start_history_index_), 3>(),
     {64, 3, 0, PROTOBUF_FIELD_OFFSET(CSGOUserCmdPB, _impl_.attack3_start_history_index_)}},
    // optional .CBaseUserCmdPB base = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(CSGOUserCmdPB, _impl_.base_)}},
    // repeated .CSGOInputHistoryEntryPB input_history = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(CSGOUserCmdPB, _impl_.input_history_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional int32 attack1_start_history_index = 6 [default = -1];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CSGOUserCmdPB, _impl_.attack1_start_history_index_), 4>(),
     {48, 4, 0, PROTOBUF_FIELD_OFFSET(CSGOUserCmdPB, _impl_.attack1_start_history_index_)}},
    // optional int32 attack2_start_history_index = 7 [default = -1];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CSGOUserCmdPB, _impl_.attack2_start_history_index_), 5>(),
     {56, 5, 0, PROTOBUF_FIELD_OFFSET(CSGOUserCmdPB, _impl_.attack2_start_history_index_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .CBaseUserCmdPB base = 1;
    {PROTOBUF_FIELD_OFFSET(CSGOUserCmdPB, _impl_.base_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .CSGOInputHistoryEntryPB input_history = 2;
    {PROTOBUF_FIELD_OFFSET(CSGOUserCmdPB, _impl_.input_history_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional int32 attack1_start_history_index = 6 [default = -1];
    {PROTOBUF_FIELD_OFFSET(CSGOUserCmdPB, _impl_.attack1_start_history_index_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 attack2_start_history_index = 7 [default = -1];
    {PROTOBUF_FIELD_OFFSET(CSGOUserCmdPB, _impl_.attack2_start_history_index_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 attack3_start_history_index = 8 [default = -1];
    {PROTOBUF_FIELD_OFFSET(CSGOUserCmdPB, _impl_.attack3_start_history_index_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional bool left_hand_desired = 9 [default = false];
    {PROTOBUF_FIELD_OFFSET(CSGOUserCmdPB, _impl_.left_hand_desired_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool is_predicting_damage = 10 [default = false];
    {PROTOBUF_FIELD_OFFSET(CSGOUserCmdPB, _impl_.is_predicting_damage_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::CBaseUserCmdPB>()},
      {::_pbi::TcParser::GetTable<::CSGOInputHistoryEntryPB>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void CSGOUserCmdPB::Clear() {
// @@protoc_insertion_point(message_clear_start:CSGOUserCmdPB)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.input_history_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(_impl_.base_ != nullptr);
    _impl_.base_->Clear();
  }
  ::memset(&_impl_.left_hand_desired_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.is_predicting_damage_) -
      reinterpret_cast<char*>(&_impl_.left_hand_desired_)) + sizeof(_impl_.is_predicting_damage_));
  if ((cached_has_bits & 0x00000038u) != 0) {
    _impl_.attack3_start_history_index_ = -1;
    _impl_.attack1_start_history_index_ = -1;
    _impl_.attack2_start_history_index_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CSGOUserCmdPB::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CSGOUserCmdPB& this_ = static_cast<const CSGOUserCmdPB&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CSGOUserCmdPB::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CSGOUserCmdPB& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:CSGOUserCmdPB)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional .CBaseUserCmdPB base = 1;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.base_, this_._impl_.base_->GetCachedSize(), target,
        stream);
  }

  // repeated .CSGOInputHistoryEntryPB input_history = 2;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_input_history_size());
       i < n; i++) {
    const auto& repfield = this_._internal_input_history().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            2, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  // optional int32 attack1_start_history_index = 6 [default = -1];
  if ((cached_has_bits & 0x00000010u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<6>(
            stream, this_._internal_attack1_start_history_index(), target);
  }

  // optional int32 attack2_start_history_index = 7 [default = -1];
  if ((cached_has_bits & 0x00000020u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<7>(
            stream, this_._internal_attack2_start_history_index(), target);
  }

  // optional int32 attack3_start_history_index = 8 [default = -1];
  if ((cached_has_bits & 0x00000008u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<8>(
            stream, this_._internal_attack3_start_history_index(), target);
  }

  // optional bool left_hand_desired = 9 [default = false];
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        9, this_._internal_left_hand_desired(), target);
  }

  // optional bool is_predicting_damage = 10 [default = false];
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        10, this_._internal_is_predicting_damage(), target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSGOUserCmdPB)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CSGOUserCmdPB::ByteSizeLong(const MessageLite& base) {
  const CSGOUserCmdPB& this_ = static_cast<const CSGOUserCmdPB&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t CSGOUserCmdPB::ByteSizeLong() const {
  const CSGOUserCmdPB& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:CSGOUserCmdPB)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .CSGOInputHistoryEntryPB input_history = 2;
    {
      total_size += 1UL * this_._internal_input_history_size();
      for (const auto& msg : this_._internal_input_history()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += ::absl::popcount(0x00000006u & cached_has_bits) * 2;
  if ((cached_has_bits & 0x00000039u) != 0) {
    // optional .CBaseUserCmdPB base = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.base_);
    }
    // optional int32 attack3_start_history_index = 8 [default = -1];
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_attack3_start_history_index());
    }
    // optional int32 attack1_start_history_index = 6 [default = -1];
    if ((cached_has_bits & 0x00000010u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_attack1_start_history_index());
    }
    // optional int32 attack2_start_history_index = 7 [default = -1];
    if ((cached_has_bits & 0x00000020u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_attack2_start_history_index());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void CSGOUserCmdPB::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CSGOUserCmdPB*>(&to_msg);
  auto& from = static_cast<const CSGOUserCmdPB&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:CSGOUserCmdPB)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_input_history()->MergeFrom(
      from._internal_input_history());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000003fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.base_ != nullptr);
      if (_this->_impl_.base_ == nullptr) {
        _this->_impl_.base_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.base_);
      } else {
        _this->_impl_.base_->MergeFrom(*from._impl_.base_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_impl_.left_hand_desired_ = from._impl_.left_hand_desired_;
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_impl_.is_predicting_damage_ = from._impl_.is_predicting_damage_;
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _this->_impl_.attack3_start_history_index_ = from._impl_.attack3_start_history_index_;
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _this->_impl_.attack1_start_history_index_ = from._impl_.attack1_start_history_index_;
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      _this->_impl_.attack2_start_history_index_ = from._impl_.attack2_start_history_index_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CSGOUserCmdPB::CopyFrom(const CSGOUserCmdPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSGOUserCmdPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CSGOUserCmdPB::InternalSwap(CSGOUserCmdPB* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.input_history_.InternalSwap(&other->_impl_.input_history_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSGOUserCmdPB, _impl_.attack2_start_history_index_)
      + sizeof(CSGOUserCmdPB::_impl_.attack2_start_history_index_)
      - PROTOBUF_FIELD_OFFSET(CSGOUserCmdPB, _impl_.base_)>(
          reinterpret_cast<char*>(&_impl_.base_),
          reinterpret_cast<char*>(&other->_impl_.base_));
}

::google::protobuf::Metadata CSGOUserCmdPB::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ [[maybe_unused]] =
        (::_pbi::AddDescriptors(&descriptor_table_cs_5fusercmd_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"

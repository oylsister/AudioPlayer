// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: steamnetworkingsockets_messages_certs.proto
// Protobuf C++ Version: 6.30.0-rc1

#include "steamnetworkingsockets_messages_certs.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;

inline constexpr CMsgSteamNetworkingIdentityLegacyBinary::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        generic_bytes_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        generic_string_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        ipv6_and_port_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        steam_id_{::uint64_t{0u}} {}

template <typename>
PROTOBUF_CONSTEXPR CMsgSteamNetworkingIdentityLegacyBinary::CMsgSteamNetworkingIdentityLegacyBinary(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CMsgSteamNetworkingIdentityLegacyBinary_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CMsgSteamNetworkingIdentityLegacyBinaryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamNetworkingIdentityLegacyBinaryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamNetworkingIdentityLegacyBinaryDefaultTypeInternal() {}
  union {
    CMsgSteamNetworkingIdentityLegacyBinary _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamNetworkingIdentityLegacyBinaryDefaultTypeInternal _CMsgSteamNetworkingIdentityLegacyBinary_default_instance_;

inline constexpr CMsgSteamDatagramCertificateSigned::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        private_key_data_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        cert_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        ca_signature_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        ca_key_id_{::uint64_t{0u}} {}

template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramCertificateSigned::CMsgSteamDatagramCertificateSigned(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CMsgSteamDatagramCertificateSigned_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CMsgSteamDatagramCertificateSignedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramCertificateSignedDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramCertificateSignedDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramCertificateSigned _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramCertificateSignedDefaultTypeInternal _CMsgSteamDatagramCertificateSigned_default_instance_;

inline constexpr CMsgSteamDatagramCertificate::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        gameserver_datacenter_ids_{},
        app_ids_{},
        ip_addresses_{},
        key_data_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        identity_string_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        legacy_identity_binary_{nullptr},
        legacy_steam_id_{::uint64_t{0u}},
        key_type_{static_cast< ::CMsgSteamDatagramCertificate_EKeyType >(0)},
        time_created_{0u},
        time_expiry_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramCertificate::CMsgSteamDatagramCertificate(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CMsgSteamDatagramCertificate_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CMsgSteamDatagramCertificateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramCertificateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramCertificateDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramCertificate _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramCertificateDefaultTypeInternal _CMsgSteamDatagramCertificate_default_instance_;

inline constexpr CMsgSteamDatagramCertificateRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        cert_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR CMsgSteamDatagramCertificateRequest::CMsgSteamDatagramCertificateRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CMsgSteamDatagramCertificateRequest_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CMsgSteamDatagramCertificateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamDatagramCertificateRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamDatagramCertificateRequestDefaultTypeInternal() {}
  union {
    CMsgSteamDatagramCertificateRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamDatagramCertificateRequestDefaultTypeInternal _CMsgSteamDatagramCertificateRequest_default_instance_;
static const ::_pb::EnumDescriptor* PROTOBUF_NONNULL
    file_level_enum_descriptors_steamnetworkingsockets_5fmessages_5fcerts_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_service_descriptors_steamnetworkingsockets_5fmessages_5fcerts_2eproto = nullptr;
const ::uint32_t
    TableStruct_steamnetworkingsockets_5fmessages_5fcerts_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingIdentityLegacyBinary, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingIdentityLegacyBinary, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingIdentityLegacyBinary, _impl_.steam_id_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingIdentityLegacyBinary, _impl_.generic_bytes_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingIdentityLegacyBinary, _impl_.generic_string_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamNetworkingIdentityLegacyBinary, _impl_.ipv6_and_port_),
        3,
        0,
        1,
        2,
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificate, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificate, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificate, _impl_.key_type_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificate, _impl_.key_data_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificate, _impl_.legacy_steam_id_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificate, _impl_.legacy_identity_binary_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificate, _impl_.identity_string_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificate, _impl_.gameserver_datacenter_ids_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificate, _impl_.time_created_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificate, _impl_.time_expiry_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificate, _impl_.app_ids_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificate, _impl_.ip_addresses_),
        4,
        0,
        3,
        2,
        1,
        ~0u,
        5,
        6,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificateSigned, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificateSigned, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificateSigned, _impl_.cert_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificateSigned, _impl_.ca_key_id_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificateSigned, _impl_.ca_signature_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificateSigned, _impl_.private_key_data_),
        1,
        3,
        2,
        0,
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificateRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificateRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CMsgSteamDatagramCertificateRequest, _impl_.cert_),
        0,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 12, -1, sizeof(::CMsgSteamNetworkingIdentityLegacyBinary)},
        {16, 34, -1, sizeof(::CMsgSteamDatagramCertificate)},
        {44, 56, -1, sizeof(::CMsgSteamDatagramCertificateSigned)},
        {60, 69, -1, sizeof(::CMsgSteamDatagramCertificateRequest)},
};
static const ::_pb::Message* PROTOBUF_NONNULL const file_default_instances[] = {
    &::_CMsgSteamNetworkingIdentityLegacyBinary_default_instance_._instance,
    &::_CMsgSteamDatagramCertificate_default_instance_._instance,
    &::_CMsgSteamDatagramCertificateSigned_default_instance_._instance,
    &::_CMsgSteamDatagramCertificateRequest_default_instance_._instance,
};
const char descriptor_table_protodef_steamnetworkingsockets_5fmessages_5fcerts_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n+steamnetworkingsockets_messages_certs."
    "proto\"\201\001\n\'CMsgSteamNetworkingIdentityLeg"
    "acyBinary\022\020\n\010steam_id\030\020 \001(\006\022\025\n\rgeneric_b"
    "ytes\030\002 \001(\014\022\026\n\016generic_string\030\003 \001(\t\022\025\n\rip"
    "v6_and_port\030\004 \001(\014\"\212\003\n\034CMsgSteamDatagramC"
    "ertificate\022A\n\010key_type\030\001 \001(\0162&.CMsgSteam"
    "DatagramCertificate.EKeyType:\007INVALID\022\020\n"
    "\010key_data\030\002 \001(\014\022\027\n\017legacy_steam_id\030\004 \001(\006"
    "\022H\n\026legacy_identity_binary\030\013 \001(\0132(.CMsgS"
    "teamNetworkingIdentityLegacyBinary\022\027\n\017id"
    "entity_string\030\014 \001(\t\022!\n\031gameserver_datace"
    "nter_ids\030\005 \003(\007\022\024\n\014time_created\030\010 \001(\007\022\023\n\013"
    "time_expiry\030\t \001(\007\022\017\n\007app_ids\030\n \003(\r\022\024\n\014ip"
    "_addresses\030\r \003(\t\"$\n\010EKeyType\022\013\n\007INVALID\020"
    "\000\022\013\n\007ED25519\020\001\"u\n\"CMsgSteamDatagramCerti"
    "ficateSigned\022\014\n\004cert\030\004 \001(\014\022\021\n\tca_key_id\030"
    "\005 \001(\006\022\024\n\014ca_signature\030\006 \001(\014\022\030\n\020private_k"
    "ey_data\030\001 \001(\014\"R\n#CMsgSteamDatagramCertif"
    "icateRequest\022+\n\004cert\030\001 \001(\0132\035.CMsgSteamDa"
    "tagramCertificateB\005H\001\200\001\000"
};
static ::absl::once_flag descriptor_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto = {
    false,
    false,
    784,
    descriptor_table_protodef_steamnetworkingsockets_5fmessages_5fcerts_2eproto,
    "steamnetworkingsockets_messages_certs.proto",
    &descriptor_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto_once,
    nullptr,
    0,
    4,
    schemas,
    file_default_instances,
    TableStruct_steamnetworkingsockets_5fmessages_5fcerts_2eproto::offsets,
    file_level_enum_descriptors_steamnetworkingsockets_5fmessages_5fcerts_2eproto,
    file_level_service_descriptors_steamnetworkingsockets_5fmessages_5fcerts_2eproto,
};
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL CMsgSteamDatagramCertificate_EKeyType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto);
  return file_level_enum_descriptors_steamnetworkingsockets_5fmessages_5fcerts_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t CMsgSteamDatagramCertificate_EKeyType_internal_data_[] = {
    131072u, 0u, };
// ===================================================================

class CMsgSteamNetworkingIdentityLegacyBinary::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CMsgSteamNetworkingIdentityLegacyBinary>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingIdentityLegacyBinary, _impl_._has_bits_);
};

CMsgSteamNetworkingIdentityLegacyBinary::CMsgSteamNetworkingIdentityLegacyBinary(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamNetworkingIdentityLegacyBinary_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamNetworkingIdentityLegacyBinary)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamNetworkingIdentityLegacyBinary::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::CMsgSteamNetworkingIdentityLegacyBinary& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        generic_bytes_(arena, from.generic_bytes_),
        generic_string_(arena, from.generic_string_),
        ipv6_and_port_(arena, from.ipv6_and_port_) {}

CMsgSteamNetworkingIdentityLegacyBinary::CMsgSteamNetworkingIdentityLegacyBinary(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const CMsgSteamNetworkingIdentityLegacyBinary& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamNetworkingIdentityLegacyBinary_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CMsgSteamNetworkingIdentityLegacyBinary* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.steam_id_ = from._impl_.steam_id_;

  // @@protoc_insertion_point(copy_constructor:CMsgSteamNetworkingIdentityLegacyBinary)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamNetworkingIdentityLegacyBinary::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        generic_bytes_(arena),
        generic_string_(arena),
        ipv6_and_port_(arena) {}

inline void CMsgSteamNetworkingIdentityLegacyBinary::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.steam_id_ = {};
}
CMsgSteamNetworkingIdentityLegacyBinary::~CMsgSteamNetworkingIdentityLegacyBinary() {
  // @@protoc_insertion_point(destructor:CMsgSteamNetworkingIdentityLegacyBinary)
  SharedDtor(*this);
}
inline void CMsgSteamNetworkingIdentityLegacyBinary::SharedDtor(MessageLite& self) {
  CMsgSteamNetworkingIdentityLegacyBinary& this_ = static_cast<CMsgSteamNetworkingIdentityLegacyBinary&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.generic_bytes_.Destroy();
  this_._impl_.generic_string_.Destroy();
  this_._impl_.ipv6_and_port_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CMsgSteamNetworkingIdentityLegacyBinary::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CMsgSteamNetworkingIdentityLegacyBinary(arena);
}
constexpr auto CMsgSteamNetworkingIdentityLegacyBinary::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(CMsgSteamNetworkingIdentityLegacyBinary),
                                            alignof(CMsgSteamNetworkingIdentityLegacyBinary));
}
constexpr auto CMsgSteamNetworkingIdentityLegacyBinary::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CMsgSteamNetworkingIdentityLegacyBinary_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CMsgSteamNetworkingIdentityLegacyBinary::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CMsgSteamNetworkingIdentityLegacyBinary>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CMsgSteamNetworkingIdentityLegacyBinary::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CMsgSteamNetworkingIdentityLegacyBinary>(), &CMsgSteamNetworkingIdentityLegacyBinary::ByteSizeLong,
              &CMsgSteamNetworkingIdentityLegacyBinary::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingIdentityLegacyBinary, _impl_._cached_size_),
          false,
      },
      &CMsgSteamNetworkingIdentityLegacyBinary::kDescriptorMethods,
      &descriptor_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        CMsgSteamNetworkingIdentityLegacyBinary_class_data_ =
            CMsgSteamNetworkingIdentityLegacyBinary::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL CMsgSteamNetworkingIdentityLegacyBinary::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CMsgSteamNetworkingIdentityLegacyBinary_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CMsgSteamNetworkingIdentityLegacyBinary_class_data_.tc_table);
  return CMsgSteamNetworkingIdentityLegacyBinary_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 4, 0, 62, 2>
CMsgSteamNetworkingIdentityLegacyBinary::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingIdentityLegacyBinary, _impl_._has_bits_),
    0, // no _extensions_
    16, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294934513,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    CMsgSteamNetworkingIdentityLegacyBinary_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CMsgSteamNetworkingIdentityLegacyBinary>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional fixed64 steam_id = 16;
    {::_pbi::TcParser::FastF64S2,
     {385, 3, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingIdentityLegacyBinary, _impl_.steam_id_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional bytes generic_bytes = 2;
    {::_pbi::TcParser::FastBS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingIdentityLegacyBinary, _impl_.generic_bytes_)}},
    // optional string generic_string = 3;
    {::_pbi::TcParser::FastSS1,
     {26, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingIdentityLegacyBinary, _impl_.generic_string_)}},
    // optional bytes ipv6_and_port = 4;
    {::_pbi::TcParser::FastBS1,
     {34, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingIdentityLegacyBinary, _impl_.ipv6_and_port_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional bytes generic_bytes = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingIdentityLegacyBinary, _impl_.generic_bytes_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional string generic_string = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingIdentityLegacyBinary, _impl_.generic_string_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional bytes ipv6_and_port = 4;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingIdentityLegacyBinary, _impl_.ipv6_and_port_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional fixed64 steam_id = 16;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamNetworkingIdentityLegacyBinary, _impl_.steam_id_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
  }},
  // no aux_entries
  {{
    "\47\0\16\0\0\0\0\0"
    "CMsgSteamNetworkingIdentityLegacyBinary"
    "generic_string"
  }},
};
PROTOBUF_NOINLINE void CMsgSteamNetworkingIdentityLegacyBinary::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamNetworkingIdentityLegacyBinary)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.generic_bytes_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.generic_string_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _impl_.ipv6_and_port_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.steam_id_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CMsgSteamNetworkingIdentityLegacyBinary::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CMsgSteamNetworkingIdentityLegacyBinary& this_ = static_cast<const CMsgSteamNetworkingIdentityLegacyBinary&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CMsgSteamNetworkingIdentityLegacyBinary::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CMsgSteamNetworkingIdentityLegacyBinary& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamNetworkingIdentityLegacyBinary)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional bytes generic_bytes = 2;
  if ((cached_has_bits & 0x00000001u) != 0) {
    const std::string& _s = this_._internal_generic_bytes();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  // optional string generic_string = 3;
  if ((cached_has_bits & 0x00000002u) != 0) {
    const std::string& _s = this_._internal_generic_string();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CMsgSteamNetworkingIdentityLegacyBinary.generic_string");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // optional bytes ipv6_and_port = 4;
  if ((cached_has_bits & 0x00000004u) != 0) {
    const std::string& _s = this_._internal_ipv6_and_port();
    target = stream->WriteBytesMaybeAliased(4, _s, target);
  }

  // optional fixed64 steam_id = 16;
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        16, this_._internal_steam_id(), target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamNetworkingIdentityLegacyBinary)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CMsgSteamNetworkingIdentityLegacyBinary::ByteSizeLong(const MessageLite& base) {
  const CMsgSteamNetworkingIdentityLegacyBinary& this_ = static_cast<const CMsgSteamNetworkingIdentityLegacyBinary&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t CMsgSteamNetworkingIdentityLegacyBinary::ByteSizeLong() const {
  const CMsgSteamNetworkingIdentityLegacyBinary& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:CMsgSteamNetworkingIdentityLegacyBinary)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += static_cast<bool>(0x00000008u & cached_has_bits) * 10;
  if ((cached_has_bits & 0x00000007u) != 0) {
    // optional bytes generic_bytes = 2;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this_._internal_generic_bytes());
    }
    // optional string generic_string = 3;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_generic_string());
    }
    // optional bytes ipv6_and_port = 4;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this_._internal_ipv6_and_port());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void CMsgSteamNetworkingIdentityLegacyBinary::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CMsgSteamNetworkingIdentityLegacyBinary*>(&to_msg);
  auto& from = static_cast<const CMsgSteamNetworkingIdentityLegacyBinary&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamNetworkingIdentityLegacyBinary)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_internal_set_generic_bytes(from._internal_generic_bytes());
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_internal_set_generic_string(from._internal_generic_string());
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_internal_set_ipv6_and_port(from._internal_ipv6_and_port());
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _this->_impl_.steam_id_ = from._impl_.steam_id_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamNetworkingIdentityLegacyBinary::CopyFrom(const CMsgSteamNetworkingIdentityLegacyBinary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamNetworkingIdentityLegacyBinary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CMsgSteamNetworkingIdentityLegacyBinary::InternalSwap(CMsgSteamNetworkingIdentityLegacyBinary* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.generic_bytes_, &other->_impl_.generic_bytes_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.generic_string_, &other->_impl_.generic_string_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ipv6_and_port_, &other->_impl_.ipv6_and_port_, arena);
  swap(_impl_.steam_id_, other->_impl_.steam_id_);
}

::google::protobuf::Metadata CMsgSteamNetworkingIdentityLegacyBinary::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CMsgSteamDatagramCertificate::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CMsgSteamDatagramCertificate>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificate, _impl_._has_bits_);
};

CMsgSteamDatagramCertificate::CMsgSteamDatagramCertificate(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramCertificate_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramCertificate)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramCertificate::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::CMsgSteamDatagramCertificate& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        gameserver_datacenter_ids_{visibility, arena, from.gameserver_datacenter_ids_},
        app_ids_{visibility, arena, from.app_ids_},
        ip_addresses_{visibility, arena, from.ip_addresses_},
        key_data_(arena, from.key_data_),
        identity_string_(arena, from.identity_string_) {}

CMsgSteamDatagramCertificate::CMsgSteamDatagramCertificate(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const CMsgSteamDatagramCertificate& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramCertificate_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CMsgSteamDatagramCertificate* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.legacy_identity_binary_ = ((cached_has_bits & 0x00000004u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.legacy_identity_binary_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, legacy_steam_id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, legacy_steam_id_),
           offsetof(Impl_, time_expiry_) -
               offsetof(Impl_, legacy_steam_id_) +
               sizeof(Impl_::time_expiry_));

  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramCertificate)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramCertificate::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        gameserver_datacenter_ids_{visibility, arena},
        app_ids_{visibility, arena},
        ip_addresses_{visibility, arena},
        key_data_(arena),
        identity_string_(arena) {}

inline void CMsgSteamDatagramCertificate::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, legacy_identity_binary_),
           0,
           offsetof(Impl_, time_expiry_) -
               offsetof(Impl_, legacy_identity_binary_) +
               sizeof(Impl_::time_expiry_));
}
CMsgSteamDatagramCertificate::~CMsgSteamDatagramCertificate() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramCertificate)
  SharedDtor(*this);
}
inline void CMsgSteamDatagramCertificate::SharedDtor(MessageLite& self) {
  CMsgSteamDatagramCertificate& this_ = static_cast<CMsgSteamDatagramCertificate&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.key_data_.Destroy();
  this_._impl_.identity_string_.Destroy();
  delete this_._impl_.legacy_identity_binary_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CMsgSteamDatagramCertificate::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CMsgSteamDatagramCertificate(arena);
}
constexpr auto CMsgSteamDatagramCertificate::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificate, _impl_.gameserver_datacenter_ids_) +
          decltype(CMsgSteamDatagramCertificate::_impl_.gameserver_datacenter_ids_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificate, _impl_.app_ids_) +
          decltype(CMsgSteamDatagramCertificate::_impl_.app_ids_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificate, _impl_.ip_addresses_) +
          decltype(CMsgSteamDatagramCertificate::_impl_.ip_addresses_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(CMsgSteamDatagramCertificate), alignof(CMsgSteamDatagramCertificate), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&CMsgSteamDatagramCertificate::PlacementNew_,
                                 sizeof(CMsgSteamDatagramCertificate),
                                 alignof(CMsgSteamDatagramCertificate));
  }
}
constexpr auto CMsgSteamDatagramCertificate::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CMsgSteamDatagramCertificate_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CMsgSteamDatagramCertificate::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CMsgSteamDatagramCertificate>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CMsgSteamDatagramCertificate::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CMsgSteamDatagramCertificate>(), &CMsgSteamDatagramCertificate::ByteSizeLong,
              &CMsgSteamDatagramCertificate::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificate, _impl_._cached_size_),
          false,
      },
      &CMsgSteamDatagramCertificate::kDescriptorMethods,
      &descriptor_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        CMsgSteamDatagramCertificate_class_data_ =
            CMsgSteamDatagramCertificate::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL CMsgSteamDatagramCertificate::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CMsgSteamDatagramCertificate_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CMsgSteamDatagramCertificate_class_data_.tc_table);
  return CMsgSteamDatagramCertificate_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 2, 72, 2>
CMsgSteamDatagramCertificate::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificate, _impl_._has_bits_),
    0, // no _extensions_
    13, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294959204,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    CMsgSteamDatagramCertificate_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CMsgSteamDatagramCertificate>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional .CMsgSteamDatagramCertificate.EKeyType key_type = 1 [default = INVALID];
    {::_pbi::TcParser::FastEr0S1,
     {8, 4, 1, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificate, _impl_.key_type_)}},
    // optional bytes key_data = 2;
    {::_pbi::TcParser::FastBS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificate, _impl_.key_data_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional fixed64 legacy_steam_id = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 3, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificate, _impl_.legacy_steam_id_)}},
    // repeated fixed32 gameserver_datacenter_ids = 5;
    {::_pbi::TcParser::FastF32R1,
     {45, 63, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificate, _impl_.gameserver_datacenter_ids_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional fixed32 time_created = 8;
    {::_pbi::TcParser::FastF32S1,
     {69, 5, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificate, _impl_.time_created_)}},
    // optional fixed32 time_expiry = 9;
    {::_pbi::TcParser::FastF32S1,
     {77, 6, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificate, _impl_.time_expiry_)}},
    // repeated uint32 app_ids = 10;
    {::_pbi::TcParser::FastV32R1,
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificate, _impl_.app_ids_)}},
    // optional .CMsgSteamNetworkingIdentityLegacyBinary legacy_identity_binary = 11;
    {::_pbi::TcParser::FastMtS1,
     {90, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificate, _impl_.legacy_identity_binary_)}},
    // optional string identity_string = 12;
    {::_pbi::TcParser::FastSS1,
     {98, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificate, _impl_.identity_string_)}},
    // repeated string ip_addresses = 13;
    {::_pbi::TcParser::FastSR1,
     {106, 63, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificate, _impl_.ip_addresses_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .CMsgSteamDatagramCertificate.EKeyType key_type = 1 [default = INVALID];
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificate, _impl_.key_type_), _Internal::kHasBitsOffset + 4, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional bytes key_data = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificate, _impl_.key_data_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional fixed64 legacy_steam_id = 4;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificate, _impl_.legacy_steam_id_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
    // repeated fixed32 gameserver_datacenter_ids = 5;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificate, _impl_.gameserver_datacenter_ids_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kFixed32)},
    // optional fixed32 time_created = 8;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificate, _impl_.time_created_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional fixed32 time_expiry = 9;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificate, _impl_.time_expiry_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // repeated uint32 app_ids = 10;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificate, _impl_.app_ids_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUInt32)},
    // optional .CMsgSteamNetworkingIdentityLegacyBinary legacy_identity_binary = 11;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificate, _impl_.legacy_identity_binary_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional string identity_string = 12;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificate, _impl_.identity_string_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // repeated string ip_addresses = 13;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificate, _impl_.ip_addresses_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kRawString | ::_fl::kRepSString)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::CMsgSteamNetworkingIdentityLegacyBinary>()},
      {0, 2},
  }},
  {{
    "\34\0\0\0\0\0\0\0\0\17\14\0\0\0\0\0"
    "CMsgSteamDatagramCertificate"
    "identity_string"
    "ip_addresses"
  }},
};
PROTOBUF_NOINLINE void CMsgSteamDatagramCertificate::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramCertificate)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.gameserver_datacenter_ids_.Clear();
  _impl_.app_ids_.Clear();
  _impl_.ip_addresses_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.key_data_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.identity_string_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(_impl_.legacy_identity_binary_ != nullptr);
      _impl_.legacy_identity_binary_->Clear();
    }
  }
  if ((cached_has_bits & 0x00000078u) != 0) {
    ::memset(&_impl_.legacy_steam_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.time_expiry_) -
        reinterpret_cast<char*>(&_impl_.legacy_steam_id_)) + sizeof(_impl_.time_expiry_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramCertificate::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CMsgSteamDatagramCertificate& this_ = static_cast<const CMsgSteamDatagramCertificate&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramCertificate::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CMsgSteamDatagramCertificate& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramCertificate)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional .CMsgSteamDatagramCertificate.EKeyType key_type = 1 [default = INVALID];
  if ((cached_has_bits & 0x00000010u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this_._internal_key_type(), target);
  }

  // optional bytes key_data = 2;
  if ((cached_has_bits & 0x00000001u) != 0) {
    const std::string& _s = this_._internal_key_data();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  // optional fixed64 legacy_steam_id = 4;
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        4, this_._internal_legacy_steam_id(), target);
  }

  // repeated fixed32 gameserver_datacenter_ids = 5;
  for (int i = 0, n = this_._internal_gameserver_datacenter_ids_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        5, this_._internal_gameserver_datacenter_ids().Get(i), target);
  }

  // optional fixed32 time_created = 8;
  if ((cached_has_bits & 0x00000020u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        8, this_._internal_time_created(), target);
  }

  // optional fixed32 time_expiry = 9;
  if ((cached_has_bits & 0x00000040u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        9, this_._internal_time_expiry(), target);
  }

  // repeated uint32 app_ids = 10;
  for (int i = 0, n = this_._internal_app_ids_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        10, this_._internal_app_ids().Get(i), target);
  }

  // optional .CMsgSteamNetworkingIdentityLegacyBinary legacy_identity_binary = 11;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        11, *this_._impl_.legacy_identity_binary_, this_._impl_.legacy_identity_binary_->GetCachedSize(), target,
        stream);
  }

  // optional string identity_string = 12;
  if ((cached_has_bits & 0x00000002u) != 0) {
    const std::string& _s = this_._internal_identity_string();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CMsgSteamDatagramCertificate.identity_string");
    target = stream->WriteStringMaybeAliased(12, _s, target);
  }

  // repeated string ip_addresses = 13;
  for (int i = 0, n = this_._internal_ip_addresses_size(); i < n; ++i) {
    const auto& s = this_._internal_ip_addresses().Get(i);
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CMsgSteamDatagramCertificate.ip_addresses");
    target = stream->WriteString(13, s, target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramCertificate)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CMsgSteamDatagramCertificate::ByteSizeLong(const MessageLite& base) {
  const CMsgSteamDatagramCertificate& this_ = static_cast<const CMsgSteamDatagramCertificate&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t CMsgSteamDatagramCertificate::ByteSizeLong() const {
  const CMsgSteamDatagramCertificate& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramCertificate)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated fixed32 gameserver_datacenter_ids = 5;
    {
      std::size_t data_size = std::size_t{4} *
          ::_pbi::FromIntSize(this_._internal_gameserver_datacenter_ids_size());
      std::size_t tag_size = std::size_t{1} *
          ::_pbi::FromIntSize(this_._internal_gameserver_datacenter_ids_size());
      total_size += tag_size + data_size;
    }
    // repeated uint32 app_ids = 10;
    {
      std::size_t data_size = ::_pbi::WireFormatLite::UInt32Size(
          this_._internal_app_ids());
      std::size_t tag_size = std::size_t{1} *
          ::_pbi::FromIntSize(this_._internal_app_ids_size());
      total_size += tag_size + data_size;
    }
    // repeated string ip_addresses = 13;
    {
      total_size +=
          1 * ::google::protobuf::internal::FromIntSize(this_._internal_ip_addresses().size());
      for (int i = 0, n = this_._internal_ip_addresses().size(); i < n; ++i) {
        total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
            this_._internal_ip_addresses().Get(i));
      }
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += static_cast<bool>(0x00000008u & cached_has_bits) * 9;
  total_size += ::absl::popcount(0x00000060u & cached_has_bits) * 5;
  if ((cached_has_bits & 0x00000017u) != 0) {
    // optional bytes key_data = 2;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this_._internal_key_data());
    }
    // optional string identity_string = 12;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_identity_string());
    }
    // optional .CMsgSteamNetworkingIdentityLegacyBinary legacy_identity_binary = 11;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.legacy_identity_binary_);
    }
    // optional .CMsgSteamDatagramCertificate.EKeyType key_type = 1 [default = INVALID];
    if ((cached_has_bits & 0x00000010u) != 0) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this_._internal_key_type());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void CMsgSteamDatagramCertificate::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramCertificate*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramCertificate&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramCertificate)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_gameserver_datacenter_ids()->MergeFrom(from._internal_gameserver_datacenter_ids());
  _this->_internal_mutable_app_ids()->MergeFrom(from._internal_app_ids());
  _this->_internal_mutable_ip_addresses()->MergeFrom(from._internal_ip_addresses());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000007fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_internal_set_key_data(from._internal_key_data());
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_internal_set_identity_string(from._internal_identity_string());
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(from._impl_.legacy_identity_binary_ != nullptr);
      if (_this->_impl_.legacy_identity_binary_ == nullptr) {
        _this->_impl_.legacy_identity_binary_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.legacy_identity_binary_);
      } else {
        _this->_impl_.legacy_identity_binary_->MergeFrom(*from._impl_.legacy_identity_binary_);
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _this->_impl_.legacy_steam_id_ = from._impl_.legacy_steam_id_;
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _this->_impl_.key_type_ = from._impl_.key_type_;
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      _this->_impl_.time_created_ = from._impl_.time_created_;
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      _this->_impl_.time_expiry_ = from._impl_.time_expiry_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramCertificate::CopyFrom(const CMsgSteamDatagramCertificate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramCertificate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CMsgSteamDatagramCertificate::InternalSwap(CMsgSteamDatagramCertificate* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.gameserver_datacenter_ids_.InternalSwap(&other->_impl_.gameserver_datacenter_ids_);
  _impl_.app_ids_.InternalSwap(&other->_impl_.app_ids_);
  _impl_.ip_addresses_.InternalSwap(&other->_impl_.ip_addresses_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.key_data_, &other->_impl_.key_data_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.identity_string_, &other->_impl_.identity_string_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificate, _impl_.time_expiry_)
      + sizeof(CMsgSteamDatagramCertificate::_impl_.time_expiry_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificate, _impl_.legacy_identity_binary_)>(
          reinterpret_cast<char*>(&_impl_.legacy_identity_binary_),
          reinterpret_cast<char*>(&other->_impl_.legacy_identity_binary_));
}

::google::protobuf::Metadata CMsgSteamDatagramCertificate::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CMsgSteamDatagramCertificateSigned::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CMsgSteamDatagramCertificateSigned>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificateSigned, _impl_._has_bits_);
};

CMsgSteamDatagramCertificateSigned::CMsgSteamDatagramCertificateSigned(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramCertificateSigned_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramCertificateSigned)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramCertificateSigned::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::CMsgSteamDatagramCertificateSigned& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        private_key_data_(arena, from.private_key_data_),
        cert_(arena, from.cert_),
        ca_signature_(arena, from.ca_signature_) {}

CMsgSteamDatagramCertificateSigned::CMsgSteamDatagramCertificateSigned(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const CMsgSteamDatagramCertificateSigned& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramCertificateSigned_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CMsgSteamDatagramCertificateSigned* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.ca_key_id_ = from._impl_.ca_key_id_;

  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramCertificateSigned)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramCertificateSigned::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        private_key_data_(arena),
        cert_(arena),
        ca_signature_(arena) {}

inline void CMsgSteamDatagramCertificateSigned::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.ca_key_id_ = {};
}
CMsgSteamDatagramCertificateSigned::~CMsgSteamDatagramCertificateSigned() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramCertificateSigned)
  SharedDtor(*this);
}
inline void CMsgSteamDatagramCertificateSigned::SharedDtor(MessageLite& self) {
  CMsgSteamDatagramCertificateSigned& this_ = static_cast<CMsgSteamDatagramCertificateSigned&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.private_key_data_.Destroy();
  this_._impl_.cert_.Destroy();
  this_._impl_.ca_signature_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CMsgSteamDatagramCertificateSigned::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CMsgSteamDatagramCertificateSigned(arena);
}
constexpr auto CMsgSteamDatagramCertificateSigned::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(CMsgSteamDatagramCertificateSigned),
                                            alignof(CMsgSteamDatagramCertificateSigned));
}
constexpr auto CMsgSteamDatagramCertificateSigned::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CMsgSteamDatagramCertificateSigned_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CMsgSteamDatagramCertificateSigned::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CMsgSteamDatagramCertificateSigned>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CMsgSteamDatagramCertificateSigned::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CMsgSteamDatagramCertificateSigned>(), &CMsgSteamDatagramCertificateSigned::ByteSizeLong,
              &CMsgSteamDatagramCertificateSigned::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificateSigned, _impl_._cached_size_),
          false,
      },
      &CMsgSteamDatagramCertificateSigned::kDescriptorMethods,
      &descriptor_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        CMsgSteamDatagramCertificateSigned_class_data_ =
            CMsgSteamDatagramCertificateSigned::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL CMsgSteamDatagramCertificateSigned::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CMsgSteamDatagramCertificateSigned_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CMsgSteamDatagramCertificateSigned_class_data_.tc_table);
  return CMsgSteamDatagramCertificateSigned_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 4, 0, 0, 2>
CMsgSteamDatagramCertificateSigned::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificateSigned, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967238,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    CMsgSteamDatagramCertificateSigned_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CMsgSteamDatagramCertificateSigned>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional bytes private_key_data = 1;
    {::_pbi::TcParser::FastBS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificateSigned, _impl_.private_key_data_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional bytes cert = 4;
    {::_pbi::TcParser::FastBS1,
     {34, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificateSigned, _impl_.cert_)}},
    // optional fixed64 ca_key_id = 5;
    {::_pbi::TcParser::FastF64S1,
     {41, 3, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificateSigned, _impl_.ca_key_id_)}},
    // optional bytes ca_signature = 6;
    {::_pbi::TcParser::FastBS1,
     {50, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificateSigned, _impl_.ca_signature_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional bytes private_key_data = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificateSigned, _impl_.private_key_data_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional bytes cert = 4;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificateSigned, _impl_.cert_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional fixed64 ca_key_id = 5;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificateSigned, _impl_.ca_key_id_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
    // optional bytes ca_signature = 6;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificateSigned, _impl_.ca_signature_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
  }},
};
PROTOBUF_NOINLINE void CMsgSteamDatagramCertificateSigned::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramCertificateSigned)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.private_key_data_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.cert_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _impl_.ca_signature_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.ca_key_id_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramCertificateSigned::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CMsgSteamDatagramCertificateSigned& this_ = static_cast<const CMsgSteamDatagramCertificateSigned&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramCertificateSigned::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CMsgSteamDatagramCertificateSigned& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramCertificateSigned)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional bytes private_key_data = 1;
  if ((cached_has_bits & 0x00000001u) != 0) {
    const std::string& _s = this_._internal_private_key_data();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  // optional bytes cert = 4;
  if ((cached_has_bits & 0x00000002u) != 0) {
    const std::string& _s = this_._internal_cert();
    target = stream->WriteBytesMaybeAliased(4, _s, target);
  }

  // optional fixed64 ca_key_id = 5;
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        5, this_._internal_ca_key_id(), target);
  }

  // optional bytes ca_signature = 6;
  if ((cached_has_bits & 0x00000004u) != 0) {
    const std::string& _s = this_._internal_ca_signature();
    target = stream->WriteBytesMaybeAliased(6, _s, target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramCertificateSigned)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CMsgSteamDatagramCertificateSigned::ByteSizeLong(const MessageLite& base) {
  const CMsgSteamDatagramCertificateSigned& this_ = static_cast<const CMsgSteamDatagramCertificateSigned&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t CMsgSteamDatagramCertificateSigned::ByteSizeLong() const {
  const CMsgSteamDatagramCertificateSigned& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramCertificateSigned)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += static_cast<bool>(0x00000008u & cached_has_bits) * 9;
  if ((cached_has_bits & 0x00000007u) != 0) {
    // optional bytes private_key_data = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this_._internal_private_key_data());
    }
    // optional bytes cert = 4;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this_._internal_cert());
    }
    // optional bytes ca_signature = 6;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this_._internal_ca_signature());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void CMsgSteamDatagramCertificateSigned::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramCertificateSigned*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramCertificateSigned&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramCertificateSigned)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_internal_set_private_key_data(from._internal_private_key_data());
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_internal_set_cert(from._internal_cert());
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_internal_set_ca_signature(from._internal_ca_signature());
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _this->_impl_.ca_key_id_ = from._impl_.ca_key_id_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramCertificateSigned::CopyFrom(const CMsgSteamDatagramCertificateSigned& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramCertificateSigned)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CMsgSteamDatagramCertificateSigned::InternalSwap(CMsgSteamDatagramCertificateSigned* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.private_key_data_, &other->_impl_.private_key_data_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.cert_, &other->_impl_.cert_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ca_signature_, &other->_impl_.ca_signature_, arena);
  swap(_impl_.ca_key_id_, other->_impl_.ca_key_id_);
}

::google::protobuf::Metadata CMsgSteamDatagramCertificateSigned::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CMsgSteamDatagramCertificateRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CMsgSteamDatagramCertificateRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificateRequest, _impl_._has_bits_);
};

CMsgSteamDatagramCertificateRequest::CMsgSteamDatagramCertificateRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramCertificateRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamDatagramCertificateRequest)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramCertificateRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::CMsgSteamDatagramCertificateRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

CMsgSteamDatagramCertificateRequest::CMsgSteamDatagramCertificateRequest(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const CMsgSteamDatagramCertificateRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamDatagramCertificateRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CMsgSteamDatagramCertificateRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.cert_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.cert_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:CMsgSteamDatagramCertificateRequest)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamDatagramCertificateRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void CMsgSteamDatagramCertificateRequest::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.cert_ = {};
}
CMsgSteamDatagramCertificateRequest::~CMsgSteamDatagramCertificateRequest() {
  // @@protoc_insertion_point(destructor:CMsgSteamDatagramCertificateRequest)
  SharedDtor(*this);
}
inline void CMsgSteamDatagramCertificateRequest::SharedDtor(MessageLite& self) {
  CMsgSteamDatagramCertificateRequest& this_ = static_cast<CMsgSteamDatagramCertificateRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.cert_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CMsgSteamDatagramCertificateRequest::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CMsgSteamDatagramCertificateRequest(arena);
}
constexpr auto CMsgSteamDatagramCertificateRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(CMsgSteamDatagramCertificateRequest),
                                            alignof(CMsgSteamDatagramCertificateRequest));
}
constexpr auto CMsgSteamDatagramCertificateRequest::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CMsgSteamDatagramCertificateRequest_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CMsgSteamDatagramCertificateRequest::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CMsgSteamDatagramCertificateRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CMsgSteamDatagramCertificateRequest::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CMsgSteamDatagramCertificateRequest>(), &CMsgSteamDatagramCertificateRequest::ByteSizeLong,
              &CMsgSteamDatagramCertificateRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificateRequest, _impl_._cached_size_),
          false,
      },
      &CMsgSteamDatagramCertificateRequest::kDescriptorMethods,
      &descriptor_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        CMsgSteamDatagramCertificateRequest_class_data_ =
            CMsgSteamDatagramCertificateRequest::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL CMsgSteamDatagramCertificateRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CMsgSteamDatagramCertificateRequest_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CMsgSteamDatagramCertificateRequest_class_data_.tc_table);
  return CMsgSteamDatagramCertificateRequest_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2>
CMsgSteamDatagramCertificateRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificateRequest, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    CMsgSteamDatagramCertificateRequest_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CMsgSteamDatagramCertificateRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional .CMsgSteamDatagramCertificate cert = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificateRequest, _impl_.cert_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .CMsgSteamDatagramCertificate cert = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamDatagramCertificateRequest, _impl_.cert_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::CMsgSteamDatagramCertificate>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void CMsgSteamDatagramCertificateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamDatagramCertificateRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(_impl_.cert_ != nullptr);
    _impl_.cert_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramCertificateRequest::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CMsgSteamDatagramCertificateRequest& this_ = static_cast<const CMsgSteamDatagramCertificateRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CMsgSteamDatagramCertificateRequest::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CMsgSteamDatagramCertificateRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamDatagramCertificateRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional .CMsgSteamDatagramCertificate cert = 1;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.cert_, this_._impl_.cert_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamDatagramCertificateRequest)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CMsgSteamDatagramCertificateRequest::ByteSizeLong(const MessageLite& base) {
  const CMsgSteamDatagramCertificateRequest& this_ = static_cast<const CMsgSteamDatagramCertificateRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t CMsgSteamDatagramCertificateRequest::ByteSizeLong() const {
  const CMsgSteamDatagramCertificateRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:CMsgSteamDatagramCertificateRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

   {
    // optional .CMsgSteamDatagramCertificate cert = 1;
    cached_has_bits = this_._impl_._has_bits_[0];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.cert_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void CMsgSteamDatagramCertificateRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CMsgSteamDatagramCertificateRequest*>(&to_msg);
  auto& from = static_cast<const CMsgSteamDatagramCertificateRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamDatagramCertificateRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(from._impl_.cert_ != nullptr);
    if (_this->_impl_.cert_ == nullptr) {
      _this->_impl_.cert_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.cert_);
    } else {
      _this->_impl_.cert_->MergeFrom(*from._impl_.cert_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamDatagramCertificateRequest::CopyFrom(const CMsgSteamDatagramCertificateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamDatagramCertificateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CMsgSteamDatagramCertificateRequest::InternalSwap(CMsgSteamDatagramCertificateRequest* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.cert_, other->_impl_.cert_);
}

::google::protobuf::Metadata CMsgSteamDatagramCertificateRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ [[maybe_unused]] =
        (::_pbi::AddDescriptors(&descriptor_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"

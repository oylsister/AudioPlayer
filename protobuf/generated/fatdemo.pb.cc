// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: fatdemo.proto
// Protobuf C++ Version: 6.30.0-rc1

#include "fatdemo.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;

inline constexpr VacNetShot::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        delta_yaw_window_{},
        delta_pitch_window_{},
        steamid_player_{::uint64_t{0u}},
        round_number_{0},
        hit_type_{0},
        weapon_type_{0},
        distance_to_hurt_target_{0} {}

template <typename>
PROTOBUF_CONSTEXPR VacNetShot::VacNetShot(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(VacNetShot_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct VacNetShotDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VacNetShotDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VacNetShotDefaultTypeInternal() {}
  union {
    VacNetShot _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VacNetShotDefaultTypeInternal _VacNetShot_default_instance_;

inline constexpr MLWeaponState::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        state_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        index_{0},
        type_{static_cast< ::EWeaponType >(0)},
        ammo_clip_{0},
        ammo_clip_max_{0},
        ammo_reserve_{0},
        recoil_index_{0} {}

template <typename>
PROTOBUF_CONSTEXPR MLWeaponState::MLWeaponState(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(MLWeaponState_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MLWeaponStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MLWeaponStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MLWeaponStateDefaultTypeInternal() {}
  union {
    MLWeaponState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MLWeaponStateDefaultTypeInternal _MLWeaponState_default_instance_;

inline constexpr MLRoundState::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        phase_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        bomb_state_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        win_team_{static_cast< ::ETeam >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR MLRoundState::MLRoundState(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(MLRoundState_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MLRoundStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MLRoundStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MLRoundStateDefaultTypeInternal() {}
  union {
    MLRoundState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MLRoundStateDefaultTypeInternal _MLRoundState_default_instance_;

inline constexpr MLMatchState::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        game_mode_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        phase_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        round_{0},
        score_ct_{0},
        score_t_{0} {}

template <typename>
PROTOBUF_CONSTEXPR MLMatchState::MLMatchState(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(MLMatchState_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MLMatchStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MLMatchStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MLMatchStateDefaultTypeInternal() {}
  union {
    MLMatchState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MLMatchStateDefaultTypeInternal _MLMatchState_default_instance_;

inline constexpr MLDict::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        key_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        val_string_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        val_int_{0},
        val_float_{0} {}

template <typename>
PROTOBUF_CONSTEXPR MLDict::MLDict(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(MLDict_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MLDictDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MLDictDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MLDictDefaultTypeInternal() {}
  union {
    MLDict _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MLDictDefaultTypeInternal _MLDict_default_instance_;

inline constexpr MLDemoHeader::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        map_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        tick_rate_{0},
        version_{0u},
        steam_universe_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR MLDemoHeader::MLDemoHeader(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(MLDemoHeader_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MLDemoHeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MLDemoHeaderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MLDemoHeaderDefaultTypeInternal() {}
  union {
    MLDemoHeader _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MLDemoHeaderDefaultTypeInternal _MLDemoHeader_default_instance_;

inline constexpr MLPlayerState::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        weapons_{},
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        clan_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        abspos_{nullptr},
        eyeangle_{nullptr},
        eyeangle_fwd_{nullptr},
        account_id_{0},
        entindex_{0},
        team_{static_cast< ::ETeam >(0)},
        health_{0},
        armor_{0},
        flashed_{0},
        smoked_{0},
        money_{0},
        round_kills_{0},
        round_killhs_{0},
        burning_{0},
        helmet_{false},
        defuse_kit_{false},
        player_slot_{-1} {}

template <typename>
PROTOBUF_CONSTEXPR MLPlayerState::MLPlayerState(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(MLPlayerState_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MLPlayerStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MLPlayerStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MLPlayerStateDefaultTypeInternal() {}
  union {
    MLPlayerState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MLPlayerStateDefaultTypeInternal _MLPlayerState_default_instance_;

inline constexpr MLEvent::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        data_{},
        event_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()) {}

template <typename>
PROTOBUF_CONSTEXPR MLEvent::MLEvent(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(MLEvent_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MLEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MLEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MLEventDefaultTypeInternal() {}
  union {
    MLEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MLEventDefaultTypeInternal _MLEvent_default_instance_;

inline constexpr MLGameState::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        players_{},
        match_{nullptr},
        round_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR MLGameState::MLGameState(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(MLGameState_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MLGameStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MLGameStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MLGameStateDefaultTypeInternal() {}
  union {
    MLGameState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MLGameStateDefaultTypeInternal _MLGameState_default_instance_;

inline constexpr MLTick::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        events_{},
        state_{nullptr},
        tick_count_{0} {}

template <typename>
PROTOBUF_CONSTEXPR MLTick::MLTick(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(MLTick_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MLTickDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MLTickDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MLTickDefaultTypeInternal() {}
  union {
    MLTick _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MLTickDefaultTypeInternal _MLTick_default_instance_;
static const ::_pb::EnumDescriptor* PROTOBUF_NONNULL
    file_level_enum_descriptors_fatdemo_2eproto[3];
static constexpr const ::_pb::ServiceDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_service_descriptors_fatdemo_2eproto = nullptr;
const ::uint32_t
    TableStruct_fatdemo_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::MLDict, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::MLDict, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::MLDict, _impl_.key_),
        PROTOBUF_FIELD_OFFSET(::MLDict, _impl_.val_string_),
        PROTOBUF_FIELD_OFFSET(::MLDict, _impl_.val_int_),
        PROTOBUF_FIELD_OFFSET(::MLDict, _impl_.val_float_),
        0,
        1,
        2,
        3,
        PROTOBUF_FIELD_OFFSET(::MLEvent, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::MLEvent, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::MLEvent, _impl_.event_name_),
        PROTOBUF_FIELD_OFFSET(::MLEvent, _impl_.data_),
        0,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::MLMatchState, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::MLMatchState, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::MLMatchState, _impl_.game_mode_),
        PROTOBUF_FIELD_OFFSET(::MLMatchState, _impl_.phase_),
        PROTOBUF_FIELD_OFFSET(::MLMatchState, _impl_.round_),
        PROTOBUF_FIELD_OFFSET(::MLMatchState, _impl_.score_ct_),
        PROTOBUF_FIELD_OFFSET(::MLMatchState, _impl_.score_t_),
        0,
        1,
        2,
        3,
        4,
        PROTOBUF_FIELD_OFFSET(::MLRoundState, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::MLRoundState, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::MLRoundState, _impl_.phase_),
        PROTOBUF_FIELD_OFFSET(::MLRoundState, _impl_.win_team_),
        PROTOBUF_FIELD_OFFSET(::MLRoundState, _impl_.bomb_state_),
        0,
        2,
        1,
        PROTOBUF_FIELD_OFFSET(::MLWeaponState, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::MLWeaponState, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::MLWeaponState, _impl_.index_),
        PROTOBUF_FIELD_OFFSET(::MLWeaponState, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::MLWeaponState, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::MLWeaponState, _impl_.ammo_clip_),
        PROTOBUF_FIELD_OFFSET(::MLWeaponState, _impl_.ammo_clip_max_),
        PROTOBUF_FIELD_OFFSET(::MLWeaponState, _impl_.ammo_reserve_),
        PROTOBUF_FIELD_OFFSET(::MLWeaponState, _impl_.state_),
        PROTOBUF_FIELD_OFFSET(::MLWeaponState, _impl_.recoil_index_),
        2,
        0,
        3,
        4,
        5,
        6,
        1,
        7,
        PROTOBUF_FIELD_OFFSET(::MLPlayerState, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::MLPlayerState, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::MLPlayerState, _impl_.account_id_),
        PROTOBUF_FIELD_OFFSET(::MLPlayerState, _impl_.player_slot_),
        PROTOBUF_FIELD_OFFSET(::MLPlayerState, _impl_.entindex_),
        PROTOBUF_FIELD_OFFSET(::MLPlayerState, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::MLPlayerState, _impl_.clan_),
        PROTOBUF_FIELD_OFFSET(::MLPlayerState, _impl_.team_),
        PROTOBUF_FIELD_OFFSET(::MLPlayerState, _impl_.abspos_),
        PROTOBUF_FIELD_OFFSET(::MLPlayerState, _impl_.eyeangle_),
        PROTOBUF_FIELD_OFFSET(::MLPlayerState, _impl_.eyeangle_fwd_),
        PROTOBUF_FIELD_OFFSET(::MLPlayerState, _impl_.health_),
        PROTOBUF_FIELD_OFFSET(::MLPlayerState, _impl_.armor_),
        PROTOBUF_FIELD_OFFSET(::MLPlayerState, _impl_.flashed_),
        PROTOBUF_FIELD_OFFSET(::MLPlayerState, _impl_.smoked_),
        PROTOBUF_FIELD_OFFSET(::MLPlayerState, _impl_.money_),
        PROTOBUF_FIELD_OFFSET(::MLPlayerState, _impl_.round_kills_),
        PROTOBUF_FIELD_OFFSET(::MLPlayerState, _impl_.round_killhs_),
        PROTOBUF_FIELD_OFFSET(::MLPlayerState, _impl_.burning_),
        PROTOBUF_FIELD_OFFSET(::MLPlayerState, _impl_.helmet_),
        PROTOBUF_FIELD_OFFSET(::MLPlayerState, _impl_.defuse_kit_),
        PROTOBUF_FIELD_OFFSET(::MLPlayerState, _impl_.weapons_),
        5,
        18,
        6,
        0,
        1,
        7,
        2,
        3,
        4,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::MLGameState, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::MLGameState, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::MLGameState, _impl_.match_),
        PROTOBUF_FIELD_OFFSET(::MLGameState, _impl_.round_),
        PROTOBUF_FIELD_OFFSET(::MLGameState, _impl_.players_),
        0,
        1,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::MLDemoHeader, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::MLDemoHeader, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::MLDemoHeader, _impl_.map_name_),
        PROTOBUF_FIELD_OFFSET(::MLDemoHeader, _impl_.tick_rate_),
        PROTOBUF_FIELD_OFFSET(::MLDemoHeader, _impl_.version_),
        PROTOBUF_FIELD_OFFSET(::MLDemoHeader, _impl_.steam_universe_),
        0,
        1,
        2,
        3,
        PROTOBUF_FIELD_OFFSET(::MLTick, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::MLTick, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::MLTick, _impl_.tick_count_),
        PROTOBUF_FIELD_OFFSET(::MLTick, _impl_.state_),
        PROTOBUF_FIELD_OFFSET(::MLTick, _impl_.events_),
        1,
        0,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::VacNetShot, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::VacNetShot, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::VacNetShot, _impl_.steamid_player_),
        PROTOBUF_FIELD_OFFSET(::VacNetShot, _impl_.round_number_),
        PROTOBUF_FIELD_OFFSET(::VacNetShot, _impl_.hit_type_),
        PROTOBUF_FIELD_OFFSET(::VacNetShot, _impl_.weapon_type_),
        PROTOBUF_FIELD_OFFSET(::VacNetShot, _impl_.distance_to_hurt_target_),
        PROTOBUF_FIELD_OFFSET(::VacNetShot, _impl_.delta_yaw_window_),
        PROTOBUF_FIELD_OFFSET(::VacNetShot, _impl_.delta_pitch_window_),
        0,
        1,
        2,
        3,
        4,
        ~0u,
        ~0u,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 12, -1, sizeof(::MLDict)},
        {16, 26, -1, sizeof(::MLEvent)},
        {28, 41, -1, sizeof(::MLMatchState)},
        {46, 57, -1, sizeof(::MLRoundState)},
        {60, 76, -1, sizeof(::MLWeaponState)},
        {84, 112, -1, sizeof(::MLPlayerState)},
        {132, 143, -1, sizeof(::MLGameState)},
        {146, 158, -1, sizeof(::MLDemoHeader)},
        {162, 173, -1, sizeof(::MLTick)},
        {176, 191, -1, sizeof(::VacNetShot)},
};
static const ::_pb::Message* PROTOBUF_NONNULL const file_default_instances[] = {
    &::_MLDict_default_instance_._instance,
    &::_MLEvent_default_instance_._instance,
    &::_MLMatchState_default_instance_._instance,
    &::_MLRoundState_default_instance_._instance,
    &::_MLWeaponState_default_instance_._instance,
    &::_MLPlayerState_default_instance_._instance,
    &::_MLGameState_default_instance_._instance,
    &::_MLDemoHeader_default_instance_._instance,
    &::_MLTick_default_instance_._instance,
    &::_VacNetShot_default_instance_._instance,
};
const char descriptor_table_protodef_fatdemo_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\rfatdemo.proto\032\026networkbasetypes.proto\""
    "M\n\006MLDict\022\013\n\003key\030\001 \001(\t\022\022\n\nval_string\030\002 \001"
    "(\t\022\017\n\007val_int\030\003 \001(\005\022\021\n\tval_float\030\004 \001(\002\"4"
    "\n\007MLEvent\022\022\n\nevent_name\030\001 \001(\t\022\025\n\004data\030\002 "
    "\003(\0132\007.MLDict\"b\n\014MLMatchState\022\021\n\tgame_mod"
    "e\030\001 \001(\t\022\r\n\005phase\030\002 \001(\t\022\r\n\005round\030\003 \001(\005\022\020\n"
    "\010score_ct\030\004 \001(\005\022\017\n\007score_t\030\005 \001(\005\"W\n\014MLRo"
    "undState\022\r\n\005phase\030\001 \001(\t\022$\n\010win_team\030\002 \001("
    "\0162\006.ETeam:\nET_Unknown\022\022\n\nbomb_state\030\003 \001("
    "\t\"\270\001\n\rMLWeaponState\022\r\n\005index\030\001 \001(\005\022\014\n\004na"
    "me\030\002 \001(\t\022%\n\004type\030\003 \001(\0162\014.EWeaponType:\tEW"
    "T_Knife\022\021\n\tammo_clip\030\004 \001(\005\022\025\n\rammo_clip_"
    "max\030\005 \001(\005\022\024\n\014ammo_reserve\030\006 \001(\005\022\r\n\005state"
    "\030\007 \001(\t\022\024\n\014recoil_index\030\010 \001(\002\"\273\003\n\rMLPlaye"
    "rState\022\022\n\naccount_id\030\001 \001(\005\022\027\n\013player_slo"
    "t\030\002 \001(\005:\002-1\022\020\n\010entindex\030\003 \001(\005\022\014\n\004name\030\004 "
    "\001(\t\022\014\n\004clan\030\005 \001(\t\022 \n\004team\030\006 \001(\0162\006.ETeam:"
    "\nET_Unknown\022\033\n\006abspos\030\007 \001(\0132\013.CMsgVector"
    "\022\035\n\010eyeangle\030\010 \001(\0132\013.CMsgQAngle\022!\n\014eyean"
    "gle_fwd\030\t \001(\0132\013.CMsgVector\022\016\n\006health\030\n \001"
    "(\005\022\r\n\005armor\030\013 \001(\005\022\017\n\007flashed\030\014 \001(\002\022\016\n\006sm"
    "oked\030\r \001(\002\022\r\n\005money\030\016 \001(\005\022\023\n\013round_kills"
    "\030\017 \001(\005\022\024\n\014round_killhs\030\020 \001(\005\022\017\n\007burning\030"
    "\021 \001(\002\022\016\n\006helmet\030\022 \001(\010\022\022\n\ndefuse_kit\030\023 \001("
    "\010\022\037\n\007weapons\030\024 \003(\0132\016.MLWeaponState\"j\n\013ML"
    "GameState\022\034\n\005match\030\001 \001(\0132\r.MLMatchState\022"
    "\034\n\005round\030\002 \001(\0132\r.MLRoundState\022\037\n\007players"
    "\030\003 \003(\0132\016.MLPlayerState\"\\\n\014MLDemoHeader\022\020"
    "\n\010map_name\030\001 \001(\t\022\021\n\ttick_rate\030\002 \001(\005\022\017\n\007v"
    "ersion\030\003 \001(\r\022\026\n\016steam_universe\030\004 \001(\r\"S\n\006"
    "MLTick\022\022\n\ntick_count\030\001 \001(\005\022\033\n\005state\030\002 \001("
    "\0132\014.MLGameState\022\030\n\006events\030\003 \003(\0132\010.MLEven"
    "t\"\270\001\n\nVacNetShot\022\026\n\016steamid_player\030\001 \001(\006"
    "\022\024\n\014round_number\030\002 \001(\005\022\020\n\010hit_type\030\003 \001(\005"
    "\022\023\n\013weapon_type\030\004 \001(\005\022\037\n\027distance_to_hur"
    "t_target\030\005 \001(\002\022\030\n\020delta_yaw_window\030\006 \003(\002"
    "\022\032\n\022delta_pitch_window\030\007 \003(\002*\254\001\n\tEHitGro"
    "up\022\017\n\013EHG_Generic\020\000\022\014\n\010EHG_Head\020\001\022\r\n\tEHG"
    "_Chest\020\002\022\017\n\013EHG_Stomach\020\003\022\017\n\013EHG_LeftArm"
    "\020\004\022\020\n\014EHG_RightArm\020\005\022\017\n\013EHG_LeftLeg\020\006\022\020\n"
    "\014EHG_RightLeg\020\007\022\014\n\010EHG_Gear\020\010\022\014\n\010EHG_Mis"
    "s\020\t*F\n\005ETeam\022\016\n\nET_Unknown\020\000\022\020\n\014ET_Spect"
    "ator\020\001\022\020\n\014ET_Terrorist\020\002\022\t\n\005ET_CT\020\003*\344\001\n\013"
    "EWeaponType\022\r\n\tEWT_Knife\020\000\022\016\n\nEWT_Pistol"
    "\020\001\022\025\n\021EWT_SubMachineGun\020\002\022\r\n\tEWT_Rifle\020\003"
    "\022\017\n\013EWT_Shotgun\020\004\022\023\n\017EWT_SniperRifle\020\005\022\022"
    "\n\016EWT_MachineGun\020\006\022\n\n\006EWT_C4\020\007\022\017\n\013EWT_Gr"
    "enade\020\010\022\021\n\rEWT_Equipment\020\t\022\025\n\021EWT_Stacka"
    "bleItem\020\n\022\017\n\013EWT_Unknown\020\013"
};
static const ::_pbi::DescriptorTable* PROTOBUF_NONNULL const
    descriptor_table_fatdemo_2eproto_deps[1] = {
        &::descriptor_table_networkbasetypes_2eproto,
};
static ::absl::once_flag descriptor_table_fatdemo_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_fatdemo_2eproto = {
    false,
    false,
    1946,
    descriptor_table_protodef_fatdemo_2eproto,
    "fatdemo.proto",
    &descriptor_table_fatdemo_2eproto_once,
    descriptor_table_fatdemo_2eproto_deps,
    1,
    10,
    schemas,
    file_default_instances,
    TableStruct_fatdemo_2eproto::offsets,
    file_level_enum_descriptors_fatdemo_2eproto,
    file_level_service_descriptors_fatdemo_2eproto,
};
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL EHitGroup_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_fatdemo_2eproto);
  return file_level_enum_descriptors_fatdemo_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t EHitGroup_internal_data_[] = {
    655360u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL ETeam_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_fatdemo_2eproto);
  return file_level_enum_descriptors_fatdemo_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t ETeam_internal_data_[] = {
    262144u, 0u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL EWeaponType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_fatdemo_2eproto);
  return file_level_enum_descriptors_fatdemo_2eproto[2];
}
PROTOBUF_CONSTINIT const uint32_t EWeaponType_internal_data_[] = {
    786432u, 0u, };
// ===================================================================

class MLDict::_Internal {
 public:
  using HasBits =
      decltype(std::declval<MLDict>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(MLDict, _impl_._has_bits_);
};

MLDict::MLDict(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, MLDict_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:MLDict)
}
PROTOBUF_NDEBUG_INLINE MLDict::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::MLDict& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        key_(arena, from.key_),
        val_string_(arena, from.val_string_) {}

MLDict::MLDict(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const MLDict& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, MLDict_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MLDict* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, val_int_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, val_int_),
           offsetof(Impl_, val_float_) -
               offsetof(Impl_, val_int_) +
               sizeof(Impl_::val_float_));

  // @@protoc_insertion_point(copy_constructor:MLDict)
}
PROTOBUF_NDEBUG_INLINE MLDict::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        key_(arena),
        val_string_(arena) {}

inline void MLDict::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, val_int_),
           0,
           offsetof(Impl_, val_float_) -
               offsetof(Impl_, val_int_) +
               sizeof(Impl_::val_float_));
}
MLDict::~MLDict() {
  // @@protoc_insertion_point(destructor:MLDict)
  SharedDtor(*this);
}
inline void MLDict::SharedDtor(MessageLite& self) {
  MLDict& this_ = static_cast<MLDict&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.key_.Destroy();
  this_._impl_.val_string_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL MLDict::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) MLDict(arena);
}
constexpr auto MLDict::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(MLDict),
                                            alignof(MLDict));
}
constexpr auto MLDict::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_MLDict_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &MLDict::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<MLDict>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &MLDict::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<MLDict>(), &MLDict::ByteSizeLong,
              &MLDict::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(MLDict, _impl_._cached_size_),
          false,
      },
      &MLDict::kDescriptorMethods,
      &descriptor_table_fatdemo_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        MLDict_class_data_ =
            MLDict::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL MLDict::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&MLDict_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(MLDict_class_data_.tc_table);
  return MLDict_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 28, 2>
MLDict::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MLDict, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    MLDict_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::MLDict>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional float val_float = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 3, 0, PROTOBUF_FIELD_OFFSET(MLDict, _impl_.val_float_)}},
    // optional string key = 1;
    {::_pbi::TcParser::FastSS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(MLDict, _impl_.key_)}},
    // optional string val_string = 2;
    {::_pbi::TcParser::FastSS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(MLDict, _impl_.val_string_)}},
    // optional int32 val_int = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MLDict, _impl_.val_int_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(MLDict, _impl_.val_int_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string key = 1;
    {PROTOBUF_FIELD_OFFSET(MLDict, _impl_.key_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional string val_string = 2;
    {PROTOBUF_FIELD_OFFSET(MLDict, _impl_.val_string_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional int32 val_int = 3;
    {PROTOBUF_FIELD_OFFSET(MLDict, _impl_.val_int_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional float val_float = 4;
    {PROTOBUF_FIELD_OFFSET(MLDict, _impl_.val_float_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
    "\6\3\12\0\0\0\0\0"
    "MLDict"
    "key"
    "val_string"
  }},
};
PROTOBUF_NOINLINE void MLDict::Clear() {
// @@protoc_insertion_point(message_clear_start:MLDict)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.key_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.val_string_.ClearNonDefaultToEmpty();
    }
  }
  if ((cached_has_bits & 0x0000000cu) != 0) {
    ::memset(&_impl_.val_int_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.val_float_) -
        reinterpret_cast<char*>(&_impl_.val_int_)) + sizeof(_impl_.val_float_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL MLDict::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const MLDict& this_ = static_cast<const MLDict&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL MLDict::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const MLDict& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:MLDict)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional string key = 1;
  if ((cached_has_bits & 0x00000001u) != 0) {
    const std::string& _s = this_._internal_key();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "MLDict.key");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string val_string = 2;
  if ((cached_has_bits & 0x00000002u) != 0) {
    const std::string& _s = this_._internal_val_string();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "MLDict.val_string");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional int32 val_int = 3;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<3>(
            stream, this_._internal_val_int(), target);
  }

  // optional float val_float = 4;
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this_._internal_val_float(), target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLDict)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t MLDict::ByteSizeLong(const MessageLite& base) {
  const MLDict& this_ = static_cast<const MLDict&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t MLDict::ByteSizeLong() const {
  const MLDict& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:MLDict)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += static_cast<bool>(0x00000008u & cached_has_bits) * 5;
  if ((cached_has_bits & 0x00000007u) != 0) {
    // optional string key = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_key());
    }
    // optional string val_string = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_val_string());
    }
    // optional int32 val_int = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_val_int());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void MLDict::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MLDict*>(&to_msg);
  auto& from = static_cast<const MLDict&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:MLDict)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_internal_set_key(from._internal_key());
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_internal_set_val_string(from._internal_val_string());
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_impl_.val_int_ = from._impl_.val_int_;
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _this->_impl_.val_float_ = from._impl_.val_float_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MLDict::CopyFrom(const MLDict& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MLDict)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MLDict::InternalSwap(MLDict* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.key_, &other->_impl_.key_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.val_string_, &other->_impl_.val_string_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MLDict, _impl_.val_float_)
      + sizeof(MLDict::_impl_.val_float_)
      - PROTOBUF_FIELD_OFFSET(MLDict, _impl_.val_int_)>(
          reinterpret_cast<char*>(&_impl_.val_int_),
          reinterpret_cast<char*>(&other->_impl_.val_int_));
}

::google::protobuf::Metadata MLDict::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MLEvent::_Internal {
 public:
  using HasBits =
      decltype(std::declval<MLEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(MLEvent, _impl_._has_bits_);
};

MLEvent::MLEvent(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, MLEvent_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:MLEvent)
}
PROTOBUF_NDEBUG_INLINE MLEvent::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::MLEvent& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        data_{visibility, arena, from.data_},
        event_name_(arena, from.event_name_) {}

MLEvent::MLEvent(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const MLEvent& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, MLEvent_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MLEvent* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:MLEvent)
}
PROTOBUF_NDEBUG_INLINE MLEvent::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        data_{visibility, arena},
        event_name_(arena) {}

inline void MLEvent::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
MLEvent::~MLEvent() {
  // @@protoc_insertion_point(destructor:MLEvent)
  SharedDtor(*this);
}
inline void MLEvent::SharedDtor(MessageLite& self) {
  MLEvent& this_ = static_cast<MLEvent&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.event_name_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL MLEvent::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) MLEvent(arena);
}
constexpr auto MLEvent::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(MLEvent, _impl_.data_) +
          decltype(MLEvent::_impl_.data_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(MLEvent), alignof(MLEvent), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&MLEvent::PlacementNew_,
                                 sizeof(MLEvent),
                                 alignof(MLEvent));
  }
}
constexpr auto MLEvent::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_MLEvent_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &MLEvent::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<MLEvent>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &MLEvent::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<MLEvent>(), &MLEvent::ByteSizeLong,
              &MLEvent::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(MLEvent, _impl_._cached_size_),
          false,
      },
      &MLEvent::kDescriptorMethods,
      &descriptor_table_fatdemo_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        MLEvent_class_data_ =
            MLEvent::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL MLEvent::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&MLEvent_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(MLEvent_class_data_.tc_table);
  return MLEvent_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 26, 2>
MLEvent::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MLEvent, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    MLEvent_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::MLEvent>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .MLDict data = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(MLEvent, _impl_.data_)}},
    // optional string event_name = 1;
    {::_pbi::TcParser::FastSS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(MLEvent, _impl_.event_name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string event_name = 1;
    {PROTOBUF_FIELD_OFFSET(MLEvent, _impl_.event_name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // repeated .MLDict data = 2;
    {PROTOBUF_FIELD_OFFSET(MLEvent, _impl_.data_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::MLDict>()},
  }},
  {{
    "\7\12\0\0\0\0\0\0"
    "MLEvent"
    "event_name"
  }},
};
PROTOBUF_NOINLINE void MLEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:MLEvent)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _impl_.event_name_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL MLEvent::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const MLEvent& this_ = static_cast<const MLEvent&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL MLEvent::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const MLEvent& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:MLEvent)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional string event_name = 1;
  if ((cached_has_bits & 0x00000001u) != 0) {
    const std::string& _s = this_._internal_event_name();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "MLEvent.event_name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated .MLDict data = 2;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_data_size());
       i < n; i++) {
    const auto& repfield = this_._internal_data().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            2, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLEvent)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t MLEvent::ByteSizeLong(const MessageLite& base) {
  const MLEvent& this_ = static_cast<const MLEvent&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t MLEvent::ByteSizeLong() const {
  const MLEvent& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:MLEvent)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .MLDict data = 2;
    {
      total_size += 1UL * this_._internal_data_size();
      for (const auto& msg : this_._internal_data()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
   {
    // optional string event_name = 1;
    cached_has_bits = this_._impl_._has_bits_[0];
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_event_name());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void MLEvent::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MLEvent*>(&to_msg);
  auto& from = static_cast<const MLEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:MLEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_data()->MergeFrom(
      from._internal_data());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _this->_internal_set_event_name(from._internal_event_name());
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MLEvent::CopyFrom(const MLEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MLEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MLEvent::InternalSwap(MLEvent* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.data_.InternalSwap(&other->_impl_.data_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.event_name_, &other->_impl_.event_name_, arena);
}

::google::protobuf::Metadata MLEvent::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MLMatchState::_Internal {
 public:
  using HasBits =
      decltype(std::declval<MLMatchState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(MLMatchState, _impl_._has_bits_);
};

MLMatchState::MLMatchState(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, MLMatchState_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:MLMatchState)
}
PROTOBUF_NDEBUG_INLINE MLMatchState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::MLMatchState& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        game_mode_(arena, from.game_mode_),
        phase_(arena, from.phase_) {}

MLMatchState::MLMatchState(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const MLMatchState& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, MLMatchState_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MLMatchState* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, round_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, round_),
           offsetof(Impl_, score_t_) -
               offsetof(Impl_, round_) +
               sizeof(Impl_::score_t_));

  // @@protoc_insertion_point(copy_constructor:MLMatchState)
}
PROTOBUF_NDEBUG_INLINE MLMatchState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        game_mode_(arena),
        phase_(arena) {}

inline void MLMatchState::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, round_),
           0,
           offsetof(Impl_, score_t_) -
               offsetof(Impl_, round_) +
               sizeof(Impl_::score_t_));
}
MLMatchState::~MLMatchState() {
  // @@protoc_insertion_point(destructor:MLMatchState)
  SharedDtor(*this);
}
inline void MLMatchState::SharedDtor(MessageLite& self) {
  MLMatchState& this_ = static_cast<MLMatchState&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.game_mode_.Destroy();
  this_._impl_.phase_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL MLMatchState::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) MLMatchState(arena);
}
constexpr auto MLMatchState::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(MLMatchState),
                                            alignof(MLMatchState));
}
constexpr auto MLMatchState::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_MLMatchState_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &MLMatchState::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<MLMatchState>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &MLMatchState::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<MLMatchState>(), &MLMatchState::ByteSizeLong,
              &MLMatchState::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(MLMatchState, _impl_._cached_size_),
          false,
      },
      &MLMatchState::kDescriptorMethods,
      &descriptor_table_fatdemo_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        MLMatchState_class_data_ =
            MLMatchState::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL MLMatchState::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&MLMatchState_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(MLMatchState_class_data_.tc_table);
  return MLMatchState_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 35, 2>
MLMatchState::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MLMatchState, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    MLMatchState_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::MLMatchState>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional string game_mode = 1;
    {::_pbi::TcParser::FastSS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(MLMatchState, _impl_.game_mode_)}},
    // optional string phase = 2;
    {::_pbi::TcParser::FastSS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(MLMatchState, _impl_.phase_)}},
    // optional int32 round = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MLMatchState, _impl_.round_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(MLMatchState, _impl_.round_)}},
    // optional int32 score_ct = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MLMatchState, _impl_.score_ct_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(MLMatchState, _impl_.score_ct_)}},
    // optional int32 score_t = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MLMatchState, _impl_.score_t_), 4>(),
     {40, 4, 0, PROTOBUF_FIELD_OFFSET(MLMatchState, _impl_.score_t_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string game_mode = 1;
    {PROTOBUF_FIELD_OFFSET(MLMatchState, _impl_.game_mode_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional string phase = 2;
    {PROTOBUF_FIELD_OFFSET(MLMatchState, _impl_.phase_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional int32 round = 3;
    {PROTOBUF_FIELD_OFFSET(MLMatchState, _impl_.round_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 score_ct = 4;
    {PROTOBUF_FIELD_OFFSET(MLMatchState, _impl_.score_ct_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 score_t = 5;
    {PROTOBUF_FIELD_OFFSET(MLMatchState, _impl_.score_t_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
    "\14\11\5\0\0\0\0\0"
    "MLMatchState"
    "game_mode"
    "phase"
  }},
};
PROTOBUF_NOINLINE void MLMatchState::Clear() {
// @@protoc_insertion_point(message_clear_start:MLMatchState)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.game_mode_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.phase_.ClearNonDefaultToEmpty();
    }
  }
  if ((cached_has_bits & 0x0000001cu) != 0) {
    ::memset(&_impl_.round_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.score_t_) -
        reinterpret_cast<char*>(&_impl_.round_)) + sizeof(_impl_.score_t_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL MLMatchState::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const MLMatchState& this_ = static_cast<const MLMatchState&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL MLMatchState::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const MLMatchState& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:MLMatchState)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional string game_mode = 1;
  if ((cached_has_bits & 0x00000001u) != 0) {
    const std::string& _s = this_._internal_game_mode();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "MLMatchState.game_mode");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string phase = 2;
  if ((cached_has_bits & 0x00000002u) != 0) {
    const std::string& _s = this_._internal_phase();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "MLMatchState.phase");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional int32 round = 3;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<3>(
            stream, this_._internal_round(), target);
  }

  // optional int32 score_ct = 4;
  if ((cached_has_bits & 0x00000008u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<4>(
            stream, this_._internal_score_ct(), target);
  }

  // optional int32 score_t = 5;
  if ((cached_has_bits & 0x00000010u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<5>(
            stream, this_._internal_score_t(), target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLMatchState)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t MLMatchState::ByteSizeLong(const MessageLite& base) {
  const MLMatchState& this_ = static_cast<const MLMatchState&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t MLMatchState::ByteSizeLong() const {
  const MLMatchState& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:MLMatchState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fu) != 0) {
    // optional string game_mode = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_game_mode());
    }
    // optional string phase = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_phase());
    }
    // optional int32 round = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_round());
    }
    // optional int32 score_ct = 4;
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_score_ct());
    }
    // optional int32 score_t = 5;
    if ((cached_has_bits & 0x00000010u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_score_t());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void MLMatchState::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MLMatchState*>(&to_msg);
  auto& from = static_cast<const MLMatchState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:MLMatchState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_internal_set_game_mode(from._internal_game_mode());
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_internal_set_phase(from._internal_phase());
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_impl_.round_ = from._impl_.round_;
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _this->_impl_.score_ct_ = from._impl_.score_ct_;
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _this->_impl_.score_t_ = from._impl_.score_t_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MLMatchState::CopyFrom(const MLMatchState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MLMatchState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MLMatchState::InternalSwap(MLMatchState* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.game_mode_, &other->_impl_.game_mode_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.phase_, &other->_impl_.phase_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MLMatchState, _impl_.score_t_)
      + sizeof(MLMatchState::_impl_.score_t_)
      - PROTOBUF_FIELD_OFFSET(MLMatchState, _impl_.round_)>(
          reinterpret_cast<char*>(&_impl_.round_),
          reinterpret_cast<char*>(&other->_impl_.round_));
}

::google::protobuf::Metadata MLMatchState::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MLRoundState::_Internal {
 public:
  using HasBits =
      decltype(std::declval<MLRoundState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(MLRoundState, _impl_._has_bits_);
};

MLRoundState::MLRoundState(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, MLRoundState_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:MLRoundState)
}
PROTOBUF_NDEBUG_INLINE MLRoundState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::MLRoundState& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        phase_(arena, from.phase_),
        bomb_state_(arena, from.bomb_state_) {}

MLRoundState::MLRoundState(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const MLRoundState& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, MLRoundState_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MLRoundState* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.win_team_ = from._impl_.win_team_;

  // @@protoc_insertion_point(copy_constructor:MLRoundState)
}
PROTOBUF_NDEBUG_INLINE MLRoundState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        phase_(arena),
        bomb_state_(arena) {}

inline void MLRoundState::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.win_team_ = {};
}
MLRoundState::~MLRoundState() {
  // @@protoc_insertion_point(destructor:MLRoundState)
  SharedDtor(*this);
}
inline void MLRoundState::SharedDtor(MessageLite& self) {
  MLRoundState& this_ = static_cast<MLRoundState&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.phase_.Destroy();
  this_._impl_.bomb_state_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL MLRoundState::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) MLRoundState(arena);
}
constexpr auto MLRoundState::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(MLRoundState),
                                            alignof(MLRoundState));
}
constexpr auto MLRoundState::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_MLRoundState_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &MLRoundState::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<MLRoundState>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &MLRoundState::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<MLRoundState>(), &MLRoundState::ByteSizeLong,
              &MLRoundState::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(MLRoundState, _impl_._cached_size_),
          false,
      },
      &MLRoundState::kDescriptorMethods,
      &descriptor_table_fatdemo_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        MLRoundState_class_data_ =
            MLRoundState::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL MLRoundState::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&MLRoundState_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(MLRoundState_class_data_.tc_table);
  return MLRoundState_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 36, 2>
MLRoundState::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MLRoundState, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    MLRoundState_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::MLRoundState>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional string phase = 1;
    {::_pbi::TcParser::FastSS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(MLRoundState, _impl_.phase_)}},
    // optional .ETeam win_team = 2 [default = ET_Unknown];
    {::_pbi::TcParser::FastEr0S1,
     {16, 2, 3, PROTOBUF_FIELD_OFFSET(MLRoundState, _impl_.win_team_)}},
    // optional string bomb_state = 3;
    {::_pbi::TcParser::FastSS1,
     {26, 1, 0, PROTOBUF_FIELD_OFFSET(MLRoundState, _impl_.bomb_state_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string phase = 1;
    {PROTOBUF_FIELD_OFFSET(MLRoundState, _impl_.phase_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional .ETeam win_team = 2 [default = ET_Unknown];
    {PROTOBUF_FIELD_OFFSET(MLRoundState, _impl_.win_team_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional string bomb_state = 3;
    {PROTOBUF_FIELD_OFFSET(MLRoundState, _impl_.bomb_state_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
  }},
  {{
      {0, 4},
  }},
  {{
    "\14\5\0\12\0\0\0\0"
    "MLRoundState"
    "phase"
    "bomb_state"
  }},
};
PROTOBUF_NOINLINE void MLRoundState::Clear() {
// @@protoc_insertion_point(message_clear_start:MLRoundState)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.phase_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.bomb_state_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.win_team_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL MLRoundState::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const MLRoundState& this_ = static_cast<const MLRoundState&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL MLRoundState::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const MLRoundState& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:MLRoundState)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional string phase = 1;
  if ((cached_has_bits & 0x00000001u) != 0) {
    const std::string& _s = this_._internal_phase();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "MLRoundState.phase");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional .ETeam win_team = 2 [default = ET_Unknown];
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this_._internal_win_team(), target);
  }

  // optional string bomb_state = 3;
  if ((cached_has_bits & 0x00000002u) != 0) {
    const std::string& _s = this_._internal_bomb_state();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "MLRoundState.bomb_state");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLRoundState)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t MLRoundState::ByteSizeLong(const MessageLite& base) {
  const MLRoundState& this_ = static_cast<const MLRoundState&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t MLRoundState::ByteSizeLong() const {
  const MLRoundState& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:MLRoundState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    // optional string phase = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_phase());
    }
    // optional string bomb_state = 3;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_bomb_state());
    }
    // optional .ETeam win_team = 2 [default = ET_Unknown];
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this_._internal_win_team());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void MLRoundState::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MLRoundState*>(&to_msg);
  auto& from = static_cast<const MLRoundState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:MLRoundState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_internal_set_phase(from._internal_phase());
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_internal_set_bomb_state(from._internal_bomb_state());
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_impl_.win_team_ = from._impl_.win_team_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MLRoundState::CopyFrom(const MLRoundState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MLRoundState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MLRoundState::InternalSwap(MLRoundState* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.phase_, &other->_impl_.phase_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.bomb_state_, &other->_impl_.bomb_state_, arena);
  swap(_impl_.win_team_, other->_impl_.win_team_);
}

::google::protobuf::Metadata MLRoundState::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MLWeaponState::_Internal {
 public:
  using HasBits =
      decltype(std::declval<MLWeaponState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(MLWeaponState, _impl_._has_bits_);
};

MLWeaponState::MLWeaponState(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, MLWeaponState_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:MLWeaponState)
}
PROTOBUF_NDEBUG_INLINE MLWeaponState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::MLWeaponState& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        name_(arena, from.name_),
        state_(arena, from.state_) {}

MLWeaponState::MLWeaponState(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const MLWeaponState& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, MLWeaponState_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MLWeaponState* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, index_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, index_),
           offsetof(Impl_, recoil_index_) -
               offsetof(Impl_, index_) +
               sizeof(Impl_::recoil_index_));

  // @@protoc_insertion_point(copy_constructor:MLWeaponState)
}
PROTOBUF_NDEBUG_INLINE MLWeaponState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        name_(arena),
        state_(arena) {}

inline void MLWeaponState::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, index_),
           0,
           offsetof(Impl_, recoil_index_) -
               offsetof(Impl_, index_) +
               sizeof(Impl_::recoil_index_));
}
MLWeaponState::~MLWeaponState() {
  // @@protoc_insertion_point(destructor:MLWeaponState)
  SharedDtor(*this);
}
inline void MLWeaponState::SharedDtor(MessageLite& self) {
  MLWeaponState& this_ = static_cast<MLWeaponState&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.name_.Destroy();
  this_._impl_.state_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL MLWeaponState::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) MLWeaponState(arena);
}
constexpr auto MLWeaponState::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(MLWeaponState),
                                            alignof(MLWeaponState));
}
constexpr auto MLWeaponState::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_MLWeaponState_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &MLWeaponState::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<MLWeaponState>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &MLWeaponState::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<MLWeaponState>(), &MLWeaponState::ByteSizeLong,
              &MLWeaponState::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(MLWeaponState, _impl_._cached_size_),
          false,
      },
      &MLWeaponState::kDescriptorMethods,
      &descriptor_table_fatdemo_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        MLWeaponState_class_data_ =
            MLWeaponState::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL MLWeaponState::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&MLWeaponState_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(MLWeaponState_class_data_.tc_table);
  return MLWeaponState_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 1, 39, 2>
MLWeaponState::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MLWeaponState, _impl_._has_bits_),
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    MLWeaponState_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::MLWeaponState>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional float recoil_index = 8;
    {::_pbi::TcParser::FastF32S1,
     {69, 7, 0, PROTOBUF_FIELD_OFFSET(MLWeaponState, _impl_.recoil_index_)}},
    // optional int32 index = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MLWeaponState, _impl_.index_), 2>(),
     {8, 2, 0, PROTOBUF_FIELD_OFFSET(MLWeaponState, _impl_.index_)}},
    // optional string name = 2;
    {::_pbi::TcParser::FastSS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(MLWeaponState, _impl_.name_)}},
    // optional .EWeaponType type = 3 [default = EWT_Knife];
    {::_pbi::TcParser::FastEr0S1,
     {24, 3, 11, PROTOBUF_FIELD_OFFSET(MLWeaponState, _impl_.type_)}},
    // optional int32 ammo_clip = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MLWeaponState, _impl_.ammo_clip_), 4>(),
     {32, 4, 0, PROTOBUF_FIELD_OFFSET(MLWeaponState, _impl_.ammo_clip_)}},
    // optional int32 ammo_clip_max = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MLWeaponState, _impl_.ammo_clip_max_), 5>(),
     {40, 5, 0, PROTOBUF_FIELD_OFFSET(MLWeaponState, _impl_.ammo_clip_max_)}},
    // optional int32 ammo_reserve = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MLWeaponState, _impl_.ammo_reserve_), 6>(),
     {48, 6, 0, PROTOBUF_FIELD_OFFSET(MLWeaponState, _impl_.ammo_reserve_)}},
    // optional string state = 7;
    {::_pbi::TcParser::FastSS1,
     {58, 1, 0, PROTOBUF_FIELD_OFFSET(MLWeaponState, _impl_.state_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional int32 index = 1;
    {PROTOBUF_FIELD_OFFSET(MLWeaponState, _impl_.index_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional string name = 2;
    {PROTOBUF_FIELD_OFFSET(MLWeaponState, _impl_.name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional .EWeaponType type = 3 [default = EWT_Knife];
    {PROTOBUF_FIELD_OFFSET(MLWeaponState, _impl_.type_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional int32 ammo_clip = 4;
    {PROTOBUF_FIELD_OFFSET(MLWeaponState, _impl_.ammo_clip_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 ammo_clip_max = 5;
    {PROTOBUF_FIELD_OFFSET(MLWeaponState, _impl_.ammo_clip_max_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 ammo_reserve = 6;
    {PROTOBUF_FIELD_OFFSET(MLWeaponState, _impl_.ammo_reserve_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional string state = 7;
    {PROTOBUF_FIELD_OFFSET(MLWeaponState, _impl_.state_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional float recoil_index = 8;
    {PROTOBUF_FIELD_OFFSET(MLWeaponState, _impl_.recoil_index_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
  }},
  {{
      {0, 12},
  }},
  {{
    "\15\0\4\0\0\0\0\5\0\0\0\0\0\0\0\0"
    "MLWeaponState"
    "name"
    "state"
  }},
};
PROTOBUF_NOINLINE void MLWeaponState::Clear() {
// @@protoc_insertion_point(message_clear_start:MLWeaponState)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.state_.ClearNonDefaultToEmpty();
    }
  }
  if ((cached_has_bits & 0x000000fcu) != 0) {
    ::memset(&_impl_.index_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.recoil_index_) -
        reinterpret_cast<char*>(&_impl_.index_)) + sizeof(_impl_.recoil_index_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL MLWeaponState::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const MLWeaponState& this_ = static_cast<const MLWeaponState&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL MLWeaponState::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const MLWeaponState& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:MLWeaponState)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional int32 index = 1;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<1>(
            stream, this_._internal_index(), target);
  }

  // optional string name = 2;
  if ((cached_has_bits & 0x00000001u) != 0) {
    const std::string& _s = this_._internal_name();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "MLWeaponState.name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional .EWeaponType type = 3 [default = EWT_Knife];
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this_._internal_type(), target);
  }

  // optional int32 ammo_clip = 4;
  if ((cached_has_bits & 0x00000010u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<4>(
            stream, this_._internal_ammo_clip(), target);
  }

  // optional int32 ammo_clip_max = 5;
  if ((cached_has_bits & 0x00000020u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<5>(
            stream, this_._internal_ammo_clip_max(), target);
  }

  // optional int32 ammo_reserve = 6;
  if ((cached_has_bits & 0x00000040u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<6>(
            stream, this_._internal_ammo_reserve(), target);
  }

  // optional string state = 7;
  if ((cached_has_bits & 0x00000002u) != 0) {
    const std::string& _s = this_._internal_state();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "MLWeaponState.state");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // optional float recoil_index = 8;
  if ((cached_has_bits & 0x00000080u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        8, this_._internal_recoil_index(), target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLWeaponState)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t MLWeaponState::ByteSizeLong(const MessageLite& base) {
  const MLWeaponState& this_ = static_cast<const MLWeaponState&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t MLWeaponState::ByteSizeLong() const {
  const MLWeaponState& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:MLWeaponState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += static_cast<bool>(0x00000080u & cached_has_bits) * 5;
  if ((cached_has_bits & 0x0000007fu) != 0) {
    // optional string name = 2;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_name());
    }
    // optional string state = 7;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_state());
    }
    // optional int32 index = 1;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_index());
    }
    // optional .EWeaponType type = 3 [default = EWT_Knife];
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this_._internal_type());
    }
    // optional int32 ammo_clip = 4;
    if ((cached_has_bits & 0x00000010u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_ammo_clip());
    }
    // optional int32 ammo_clip_max = 5;
    if ((cached_has_bits & 0x00000020u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_ammo_clip_max());
    }
    // optional int32 ammo_reserve = 6;
    if ((cached_has_bits & 0x00000040u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_ammo_reserve());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void MLWeaponState::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MLWeaponState*>(&to_msg);
  auto& from = static_cast<const MLWeaponState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:MLWeaponState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_internal_set_name(from._internal_name());
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_internal_set_state(from._internal_state());
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_impl_.index_ = from._impl_.index_;
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _this->_impl_.ammo_clip_ = from._impl_.ammo_clip_;
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      _this->_impl_.ammo_clip_max_ = from._impl_.ammo_clip_max_;
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      _this->_impl_.ammo_reserve_ = from._impl_.ammo_reserve_;
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      _this->_impl_.recoil_index_ = from._impl_.recoil_index_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MLWeaponState::CopyFrom(const MLWeaponState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MLWeaponState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MLWeaponState::InternalSwap(MLWeaponState* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.state_, &other->_impl_.state_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MLWeaponState, _impl_.recoil_index_)
      + sizeof(MLWeaponState::_impl_.recoil_index_)
      - PROTOBUF_FIELD_OFFSET(MLWeaponState, _impl_.index_)>(
          reinterpret_cast<char*>(&_impl_.index_),
          reinterpret_cast<char*>(&other->_impl_.index_));
}

::google::protobuf::Metadata MLWeaponState::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MLPlayerState::_Internal {
 public:
  using HasBits =
      decltype(std::declval<MLPlayerState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_._has_bits_);
};

void MLPlayerState::clear_abspos() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.abspos_ != nullptr) _impl_.abspos_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void MLPlayerState::clear_eyeangle() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.eyeangle_ != nullptr) _impl_.eyeangle_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void MLPlayerState::clear_eyeangle_fwd() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.eyeangle_fwd_ != nullptr) _impl_.eyeangle_fwd_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
MLPlayerState::MLPlayerState(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, MLPlayerState_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:MLPlayerState)
}
PROTOBUF_NDEBUG_INLINE MLPlayerState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::MLPlayerState& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        weapons_{visibility, arena, from.weapons_},
        name_(arena, from.name_),
        clan_(arena, from.clan_) {}

MLPlayerState::MLPlayerState(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const MLPlayerState& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, MLPlayerState_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MLPlayerState* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.abspos_ = ((cached_has_bits & 0x00000004u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.abspos_)
                : nullptr;
  _impl_.eyeangle_ = ((cached_has_bits & 0x00000008u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.eyeangle_)
                : nullptr;
  _impl_.eyeangle_fwd_ = ((cached_has_bits & 0x00000010u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.eyeangle_fwd_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, account_id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, account_id_),
           offsetof(Impl_, player_slot_) -
               offsetof(Impl_, account_id_) +
               sizeof(Impl_::player_slot_));

  // @@protoc_insertion_point(copy_constructor:MLPlayerState)
}
PROTOBUF_NDEBUG_INLINE MLPlayerState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        weapons_{visibility, arena},
        name_(arena),
        clan_(arena),
        player_slot_{-1} {}

inline void MLPlayerState::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, abspos_),
           0,
           offsetof(Impl_, defuse_kit_) -
               offsetof(Impl_, abspos_) +
               sizeof(Impl_::defuse_kit_));
}
MLPlayerState::~MLPlayerState() {
  // @@protoc_insertion_point(destructor:MLPlayerState)
  SharedDtor(*this);
}
inline void MLPlayerState::SharedDtor(MessageLite& self) {
  MLPlayerState& this_ = static_cast<MLPlayerState&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.name_.Destroy();
  this_._impl_.clan_.Destroy();
  delete this_._impl_.abspos_;
  delete this_._impl_.eyeangle_;
  delete this_._impl_.eyeangle_fwd_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL MLPlayerState::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) MLPlayerState(arena);
}
constexpr auto MLPlayerState::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.weapons_) +
          decltype(MLPlayerState::_impl_.weapons_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(MLPlayerState), alignof(MLPlayerState), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&MLPlayerState::PlacementNew_,
                                 sizeof(MLPlayerState),
                                 alignof(MLPlayerState));
  }
}
constexpr auto MLPlayerState::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_MLPlayerState_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &MLPlayerState::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<MLPlayerState>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &MLPlayerState::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<MLPlayerState>(), &MLPlayerState::ByteSizeLong,
              &MLPlayerState::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_._cached_size_),
          false,
      },
      &MLPlayerState::kDescriptorMethods,
      &descriptor_table_fatdemo_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        MLPlayerState_class_data_ =
            MLPlayerState::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL MLPlayerState::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&MLPlayerState_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(MLPlayerState_class_data_.tc_table);
  return MLPlayerState_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 20, 5, 46, 2>
MLPlayerState::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_._has_bits_),
    0, // no _extensions_
    20, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4293918720,  // skipmap
    offsetof(decltype(_table_), field_entries),
    20,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    MLPlayerState_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::MLPlayerState>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional int32 account_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MLPlayerState, _impl_.account_id_), 5>(),
     {8, 5, 0, PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.account_id_)}},
    // optional int32 player_slot = 2 [default = -1];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MLPlayerState, _impl_.player_slot_), 18>(),
     {16, 18, 0, PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.player_slot_)}},
    // optional int32 entindex = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MLPlayerState, _impl_.entindex_), 6>(),
     {24, 6, 0, PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.entindex_)}},
    // optional string name = 4;
    {::_pbi::TcParser::FastSS1,
     {34, 0, 0, PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.name_)}},
    // optional string clan = 5;
    {::_pbi::TcParser::FastSS1,
     {42, 1, 0, PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.clan_)}},
    // optional .ETeam team = 6 [default = ET_Unknown];
    {::_pbi::TcParser::FastEr0S1,
     {48, 7, 3, PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.team_)}},
    // optional .CMsgVector abspos = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 2, 0, PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.abspos_)}},
    // optional .CMsgQAngle eyeangle = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 3, 1, PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.eyeangle_)}},
    // optional .CMsgVector eyeangle_fwd = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 4, 2, PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.eyeangle_fwd_)}},
    // optional int32 health = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MLPlayerState, _impl_.health_), 8>(),
     {80, 8, 0, PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.health_)}},
    // optional int32 armor = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MLPlayerState, _impl_.armor_), 9>(),
     {88, 9, 0, PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.armor_)}},
    // optional float flashed = 12;
    {::_pbi::TcParser::FastF32S1,
     {101, 10, 0, PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.flashed_)}},
    // optional float smoked = 13;
    {::_pbi::TcParser::FastF32S1,
     {109, 11, 0, PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.smoked_)}},
    // optional int32 money = 14;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MLPlayerState, _impl_.money_), 12>(),
     {112, 12, 0, PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.money_)}},
    // optional int32 round_kills = 15;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MLPlayerState, _impl_.round_kills_), 13>(),
     {120, 13, 0, PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.round_kills_)}},
    // optional int32 round_killhs = 16;
    {::_pbi::TcParser::FastV32S2,
     {384, 14, 0, PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.round_killhs_)}},
    // optional float burning = 17;
    {::_pbi::TcParser::FastF32S2,
     {397, 15, 0, PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.burning_)}},
    // optional bool helmet = 18;
    {::_pbi::TcParser::FastV8S2,
     {400, 16, 0, PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.helmet_)}},
    // optional bool defuse_kit = 19;
    {::_pbi::TcParser::FastV8S2,
     {408, 17, 0, PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.defuse_kit_)}},
    // repeated .MLWeaponState weapons = 20;
    {::_pbi::TcParser::FastMtR2,
     {418, 63, 3, PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.weapons_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional int32 account_id = 1;
    {PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.account_id_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 player_slot = 2 [default = -1];
    {PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.player_slot_), _Internal::kHasBitsOffset + 18, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 entindex = 3;
    {PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.entindex_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional string name = 4;
    {PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional string clan = 5;
    {PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.clan_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional .ETeam team = 6 [default = ET_Unknown];
    {PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.team_), _Internal::kHasBitsOffset + 7, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kEnumRange)},
    // optional .CMsgVector abspos = 7;
    {PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.abspos_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .CMsgQAngle eyeangle = 8;
    {PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.eyeangle_), _Internal::kHasBitsOffset + 3, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .CMsgVector eyeangle_fwd = 9;
    {PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.eyeangle_fwd_), _Internal::kHasBitsOffset + 4, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional int32 health = 10;
    {PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.health_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 armor = 11;
    {PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.armor_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional float flashed = 12;
    {PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.flashed_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float smoked = 13;
    {PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.smoked_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional int32 money = 14;
    {PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.money_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 round_kills = 15;
    {PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.round_kills_), _Internal::kHasBitsOffset + 13, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 round_killhs = 16;
    {PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.round_killhs_), _Internal::kHasBitsOffset + 14, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional float burning = 17;
    {PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.burning_), _Internal::kHasBitsOffset + 15, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional bool helmet = 18;
    {PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.helmet_), _Internal::kHasBitsOffset + 16, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool defuse_kit = 19;
    {PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.defuse_kit_), _Internal::kHasBitsOffset + 17, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // repeated .MLWeaponState weapons = 20;
    {PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.weapons_), -1, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::CMsgVector>()},
      {::_pbi::TcParser::GetTable<::CMsgQAngle>()},
      {::_pbi::TcParser::GetTable<::CMsgVector>()},
      {::_pbi::TcParser::GetTable<::MLWeaponState>()},
      {0, 4},
  }},
  {{
    "\15\0\0\0\4\4\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "MLPlayerState"
    "name"
    "clan"
  }},
};
PROTOBUF_NOINLINE void MLPlayerState::Clear() {
// @@protoc_insertion_point(message_clear_start:MLPlayerState)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.weapons_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.clan_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(_impl_.abspos_ != nullptr);
      _impl_.abspos_->Clear();
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      ABSL_DCHECK(_impl_.eyeangle_ != nullptr);
      _impl_.eyeangle_->Clear();
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      ABSL_DCHECK(_impl_.eyeangle_fwd_ != nullptr);
      _impl_.eyeangle_fwd_->Clear();
    }
  }
  if ((cached_has_bits & 0x000000e0u) != 0) {
    ::memset(&_impl_.account_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.team_) -
        reinterpret_cast<char*>(&_impl_.account_id_)) + sizeof(_impl_.team_));
  }
  if ((cached_has_bits & 0x0000ff00u) != 0) {
    ::memset(&_impl_.health_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.burning_) -
        reinterpret_cast<char*>(&_impl_.health_)) + sizeof(_impl_.burning_));
  }
  if ((cached_has_bits & 0x00070000u) != 0) {
    ::memset(&_impl_.helmet_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.defuse_kit_) -
        reinterpret_cast<char*>(&_impl_.helmet_)) + sizeof(_impl_.defuse_kit_));
    _impl_.player_slot_ = -1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL MLPlayerState::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const MLPlayerState& this_ = static_cast<const MLPlayerState&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL MLPlayerState::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const MLPlayerState& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:MLPlayerState)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional int32 account_id = 1;
  if ((cached_has_bits & 0x00000020u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<1>(
            stream, this_._internal_account_id(), target);
  }

  // optional int32 player_slot = 2 [default = -1];
  if ((cached_has_bits & 0x00040000u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<2>(
            stream, this_._internal_player_slot(), target);
  }

  // optional int32 entindex = 3;
  if ((cached_has_bits & 0x00000040u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<3>(
            stream, this_._internal_entindex(), target);
  }

  // optional string name = 4;
  if ((cached_has_bits & 0x00000001u) != 0) {
    const std::string& _s = this_._internal_name();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "MLPlayerState.name");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // optional string clan = 5;
  if ((cached_has_bits & 0x00000002u) != 0) {
    const std::string& _s = this_._internal_clan();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "MLPlayerState.clan");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // optional .ETeam team = 6 [default = ET_Unknown];
  if ((cached_has_bits & 0x00000080u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        6, this_._internal_team(), target);
  }

  // optional .CMsgVector abspos = 7;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, *this_._impl_.abspos_, this_._impl_.abspos_->GetCachedSize(), target,
        stream);
  }

  // optional .CMsgQAngle eyeangle = 8;
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        8, *this_._impl_.eyeangle_, this_._impl_.eyeangle_->GetCachedSize(), target,
        stream);
  }

  // optional .CMsgVector eyeangle_fwd = 9;
  if ((cached_has_bits & 0x00000010u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        9, *this_._impl_.eyeangle_fwd_, this_._impl_.eyeangle_fwd_->GetCachedSize(), target,
        stream);
  }

  // optional int32 health = 10;
  if ((cached_has_bits & 0x00000100u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<10>(
            stream, this_._internal_health(), target);
  }

  // optional int32 armor = 11;
  if ((cached_has_bits & 0x00000200u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<11>(
            stream, this_._internal_armor(), target);
  }

  // optional float flashed = 12;
  if ((cached_has_bits & 0x00000400u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        12, this_._internal_flashed(), target);
  }

  // optional float smoked = 13;
  if ((cached_has_bits & 0x00000800u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        13, this_._internal_smoked(), target);
  }

  // optional int32 money = 14;
  if ((cached_has_bits & 0x00001000u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<14>(
            stream, this_._internal_money(), target);
  }

  // optional int32 round_kills = 15;
  if ((cached_has_bits & 0x00002000u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<15>(
            stream, this_._internal_round_kills(), target);
  }

  // optional int32 round_killhs = 16;
  if ((cached_has_bits & 0x00004000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        16, this_._internal_round_killhs(), target);
  }

  // optional float burning = 17;
  if ((cached_has_bits & 0x00008000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        17, this_._internal_burning(), target);
  }

  // optional bool helmet = 18;
  if ((cached_has_bits & 0x00010000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        18, this_._internal_helmet(), target);
  }

  // optional bool defuse_kit = 19;
  if ((cached_has_bits & 0x00020000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        19, this_._internal_defuse_kit(), target);
  }

  // repeated .MLWeaponState weapons = 20;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_weapons_size());
       i < n; i++) {
    const auto& repfield = this_._internal_weapons().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            20, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLPlayerState)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t MLPlayerState::ByteSizeLong(const MessageLite& base) {
  const MLPlayerState& this_ = static_cast<const MLPlayerState&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t MLPlayerState::ByteSizeLong() const {
  const MLPlayerState& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:MLPlayerState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .MLWeaponState weapons = 20;
    {
      total_size += 2UL * this_._internal_weapons_size();
      for (const auto& msg : this_._internal_weapons()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += static_cast<bool>(0x00008000u & cached_has_bits) * 6;
  total_size += ::absl::popcount(0x00000c00u & cached_has_bits) * 5;
  total_size += ::absl::popcount(0x00030000u & cached_has_bits) * 3;
  if ((cached_has_bits & 0x000000ffu) != 0) {
    // optional string name = 4;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_name());
    }
    // optional string clan = 5;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_clan());
    }
    // optional .CMsgVector abspos = 7;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.abspos_);
    }
    // optional .CMsgQAngle eyeangle = 8;
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.eyeangle_);
    }
    // optional .CMsgVector eyeangle_fwd = 9;
    if ((cached_has_bits & 0x00000010u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.eyeangle_fwd_);
    }
    // optional int32 account_id = 1;
    if ((cached_has_bits & 0x00000020u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_account_id());
    }
    // optional int32 entindex = 3;
    if ((cached_has_bits & 0x00000040u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_entindex());
    }
    // optional .ETeam team = 6 [default = ET_Unknown];
    if ((cached_has_bits & 0x00000080u) != 0) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this_._internal_team());
    }
  }
  if ((cached_has_bits & 0x00007300u) != 0) {
    // optional int32 health = 10;
    if ((cached_has_bits & 0x00000100u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_health());
    }
    // optional int32 armor = 11;
    if ((cached_has_bits & 0x00000200u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_armor());
    }
    // optional int32 money = 14;
    if ((cached_has_bits & 0x00001000u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_money());
    }
    // optional int32 round_kills = 15;
    if ((cached_has_bits & 0x00002000u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_round_kills());
    }
    // optional int32 round_killhs = 16;
    if ((cached_has_bits & 0x00004000u) != 0) {
      total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                      this_._internal_round_killhs());
    }
  }
   {
    // optional int32 player_slot = 2 [default = -1];
    if ((cached_has_bits & 0x00040000u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_player_slot());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void MLPlayerState::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MLPlayerState*>(&to_msg);
  auto& from = static_cast<const MLPlayerState&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:MLPlayerState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_weapons()->MergeFrom(
      from._internal_weapons());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_internal_set_name(from._internal_name());
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_internal_set_clan(from._internal_clan());
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(from._impl_.abspos_ != nullptr);
      if (_this->_impl_.abspos_ == nullptr) {
        _this->_impl_.abspos_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.abspos_);
      } else {
        _this->_impl_.abspos_->MergeFrom(*from._impl_.abspos_);
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      ABSL_DCHECK(from._impl_.eyeangle_ != nullptr);
      if (_this->_impl_.eyeangle_ == nullptr) {
        _this->_impl_.eyeangle_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.eyeangle_);
      } else {
        _this->_impl_.eyeangle_->MergeFrom(*from._impl_.eyeangle_);
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      ABSL_DCHECK(from._impl_.eyeangle_fwd_ != nullptr);
      if (_this->_impl_.eyeangle_fwd_ == nullptr) {
        _this->_impl_.eyeangle_fwd_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.eyeangle_fwd_);
      } else {
        _this->_impl_.eyeangle_fwd_->MergeFrom(*from._impl_.eyeangle_fwd_);
      }
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      _this->_impl_.account_id_ = from._impl_.account_id_;
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      _this->_impl_.entindex_ = from._impl_.entindex_;
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      _this->_impl_.team_ = from._impl_.team_;
    }
  }
  if ((cached_has_bits & 0x0000ff00u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      _this->_impl_.health_ = from._impl_.health_;
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      _this->_impl_.armor_ = from._impl_.armor_;
    }
    if ((cached_has_bits & 0x00000400u) != 0) {
      _this->_impl_.flashed_ = from._impl_.flashed_;
    }
    if ((cached_has_bits & 0x00000800u) != 0) {
      _this->_impl_.smoked_ = from._impl_.smoked_;
    }
    if ((cached_has_bits & 0x00001000u) != 0) {
      _this->_impl_.money_ = from._impl_.money_;
    }
    if ((cached_has_bits & 0x00002000u) != 0) {
      _this->_impl_.round_kills_ = from._impl_.round_kills_;
    }
    if ((cached_has_bits & 0x00004000u) != 0) {
      _this->_impl_.round_killhs_ = from._impl_.round_killhs_;
    }
    if ((cached_has_bits & 0x00008000u) != 0) {
      _this->_impl_.burning_ = from._impl_.burning_;
    }
  }
  if ((cached_has_bits & 0x00070000u) != 0) {
    if ((cached_has_bits & 0x00010000u) != 0) {
      _this->_impl_.helmet_ = from._impl_.helmet_;
    }
    if ((cached_has_bits & 0x00020000u) != 0) {
      _this->_impl_.defuse_kit_ = from._impl_.defuse_kit_;
    }
    if ((cached_has_bits & 0x00040000u) != 0) {
      _this->_impl_.player_slot_ = from._impl_.player_slot_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MLPlayerState::CopyFrom(const MLPlayerState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MLPlayerState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MLPlayerState::InternalSwap(MLPlayerState* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.weapons_.InternalSwap(&other->_impl_.weapons_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.clan_, &other->_impl_.clan_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.player_slot_)
      + sizeof(MLPlayerState::_impl_.player_slot_)
      - PROTOBUF_FIELD_OFFSET(MLPlayerState, _impl_.abspos_)>(
          reinterpret_cast<char*>(&_impl_.abspos_),
          reinterpret_cast<char*>(&other->_impl_.abspos_));
}

::google::protobuf::Metadata MLPlayerState::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MLGameState::_Internal {
 public:
  using HasBits =
      decltype(std::declval<MLGameState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(MLGameState, _impl_._has_bits_);
};

MLGameState::MLGameState(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, MLGameState_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:MLGameState)
}
PROTOBUF_NDEBUG_INLINE MLGameState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::MLGameState& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        players_{visibility, arena, from.players_} {}

MLGameState::MLGameState(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const MLGameState& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, MLGameState_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MLGameState* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.match_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.match_)
                : nullptr;
  _impl_.round_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.round_)
                : nullptr;

  // @@protoc_insertion_point(copy_constructor:MLGameState)
}
PROTOBUF_NDEBUG_INLINE MLGameState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        players_{visibility, arena} {}

inline void MLGameState::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, match_),
           0,
           offsetof(Impl_, round_) -
               offsetof(Impl_, match_) +
               sizeof(Impl_::round_));
}
MLGameState::~MLGameState() {
  // @@protoc_insertion_point(destructor:MLGameState)
  SharedDtor(*this);
}
inline void MLGameState::SharedDtor(MessageLite& self) {
  MLGameState& this_ = static_cast<MLGameState&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.match_;
  delete this_._impl_.round_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL MLGameState::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) MLGameState(arena);
}
constexpr auto MLGameState::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(MLGameState, _impl_.players_) +
          decltype(MLGameState::_impl_.players_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(MLGameState), alignof(MLGameState), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&MLGameState::PlacementNew_,
                                 sizeof(MLGameState),
                                 alignof(MLGameState));
  }
}
constexpr auto MLGameState::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_MLGameState_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &MLGameState::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<MLGameState>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &MLGameState::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<MLGameState>(), &MLGameState::ByteSizeLong,
              &MLGameState::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(MLGameState, _impl_._cached_size_),
          false,
      },
      &MLGameState::kDescriptorMethods,
      &descriptor_table_fatdemo_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        MLGameState_class_data_ =
            MLGameState::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL MLGameState::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&MLGameState_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(MLGameState_class_data_.tc_table);
  return MLGameState_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 3, 0, 2>
MLGameState::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MLGameState, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    MLGameState_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::MLGameState>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional .MLMatchState match = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(MLGameState, _impl_.match_)}},
    // optional .MLRoundState round = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(MLGameState, _impl_.round_)}},
    // repeated .MLPlayerState players = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 2, PROTOBUF_FIELD_OFFSET(MLGameState, _impl_.players_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .MLMatchState match = 1;
    {PROTOBUF_FIELD_OFFSET(MLGameState, _impl_.match_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .MLRoundState round = 2;
    {PROTOBUF_FIELD_OFFSET(MLGameState, _impl_.round_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .MLPlayerState players = 3;
    {PROTOBUF_FIELD_OFFSET(MLGameState, _impl_.players_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::MLMatchState>()},
      {::_pbi::TcParser::GetTable<::MLRoundState>()},
      {::_pbi::TcParser::GetTable<::MLPlayerState>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void MLGameState::Clear() {
// @@protoc_insertion_point(message_clear_start:MLGameState)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.players_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(_impl_.match_ != nullptr);
      _impl_.match_->Clear();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.round_ != nullptr);
      _impl_.round_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL MLGameState::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const MLGameState& this_ = static_cast<const MLGameState&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL MLGameState::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const MLGameState& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:MLGameState)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional .MLMatchState match = 1;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.match_, this_._impl_.match_->GetCachedSize(), target,
        stream);
  }

  // optional .MLRoundState round = 2;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.round_, this_._impl_.round_->GetCachedSize(), target,
        stream);
  }

  // repeated .MLPlayerState players = 3;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_players_size());
       i < n; i++) {
    const auto& repfield = this_._internal_players().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            3, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLGameState)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t MLGameState::ByteSizeLong(const MessageLite& base) {
  const MLGameState& this_ = static_cast<const MLGameState&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t MLGameState::ByteSizeLong() const {
  const MLGameState& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:MLGameState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .MLPlayerState players = 3;
    {
      total_size += 1UL * this_._internal_players_size();
      for (const auto& msg : this_._internal_players()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // optional .MLMatchState match = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.match_);
    }
    // optional .MLRoundState round = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.round_);
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void MLGameState::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MLGameState*>(&to_msg);
  auto& from = static_cast<const MLGameState&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:MLGameState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_players()->MergeFrom(
      from._internal_players());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.match_ != nullptr);
      if (_this->_impl_.match_ == nullptr) {
        _this->_impl_.match_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.match_);
      } else {
        _this->_impl_.match_->MergeFrom(*from._impl_.match_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.round_ != nullptr);
      if (_this->_impl_.round_ == nullptr) {
        _this->_impl_.round_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.round_);
      } else {
        _this->_impl_.round_->MergeFrom(*from._impl_.round_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MLGameState::CopyFrom(const MLGameState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MLGameState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MLGameState::InternalSwap(MLGameState* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MLGameState, _impl_.round_)
      + sizeof(MLGameState::_impl_.round_)
      - PROTOBUF_FIELD_OFFSET(MLGameState, _impl_.match_)>(
          reinterpret_cast<char*>(&_impl_.match_),
          reinterpret_cast<char*>(&other->_impl_.match_));
}

::google::protobuf::Metadata MLGameState::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MLDemoHeader::_Internal {
 public:
  using HasBits =
      decltype(std::declval<MLDemoHeader>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(MLDemoHeader, _impl_._has_bits_);
};

MLDemoHeader::MLDemoHeader(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, MLDemoHeader_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:MLDemoHeader)
}
PROTOBUF_NDEBUG_INLINE MLDemoHeader::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::MLDemoHeader& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        map_name_(arena, from.map_name_) {}

MLDemoHeader::MLDemoHeader(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const MLDemoHeader& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, MLDemoHeader_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MLDemoHeader* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, tick_rate_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, tick_rate_),
           offsetof(Impl_, steam_universe_) -
               offsetof(Impl_, tick_rate_) +
               sizeof(Impl_::steam_universe_));

  // @@protoc_insertion_point(copy_constructor:MLDemoHeader)
}
PROTOBUF_NDEBUG_INLINE MLDemoHeader::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        map_name_(arena) {}

inline void MLDemoHeader::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, tick_rate_),
           0,
           offsetof(Impl_, steam_universe_) -
               offsetof(Impl_, tick_rate_) +
               sizeof(Impl_::steam_universe_));
}
MLDemoHeader::~MLDemoHeader() {
  // @@protoc_insertion_point(destructor:MLDemoHeader)
  SharedDtor(*this);
}
inline void MLDemoHeader::SharedDtor(MessageLite& self) {
  MLDemoHeader& this_ = static_cast<MLDemoHeader&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.map_name_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL MLDemoHeader::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) MLDemoHeader(arena);
}
constexpr auto MLDemoHeader::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(MLDemoHeader),
                                            alignof(MLDemoHeader));
}
constexpr auto MLDemoHeader::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_MLDemoHeader_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &MLDemoHeader::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<MLDemoHeader>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &MLDemoHeader::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<MLDemoHeader>(), &MLDemoHeader::ByteSizeLong,
              &MLDemoHeader::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(MLDemoHeader, _impl_._cached_size_),
          false,
      },
      &MLDemoHeader::kDescriptorMethods,
      &descriptor_table_fatdemo_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        MLDemoHeader_class_data_ =
            MLDemoHeader::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL MLDemoHeader::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&MLDemoHeader_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(MLDemoHeader_class_data_.tc_table);
  return MLDemoHeader_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 29, 2>
MLDemoHeader::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MLDemoHeader, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    MLDemoHeader_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::MLDemoHeader>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional uint32 steam_universe = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MLDemoHeader, _impl_.steam_universe_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(MLDemoHeader, _impl_.steam_universe_)}},
    // optional string map_name = 1;
    {::_pbi::TcParser::FastSS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(MLDemoHeader, _impl_.map_name_)}},
    // optional int32 tick_rate = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MLDemoHeader, _impl_.tick_rate_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(MLDemoHeader, _impl_.tick_rate_)}},
    // optional uint32 version = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MLDemoHeader, _impl_.version_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(MLDemoHeader, _impl_.version_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string map_name = 1;
    {PROTOBUF_FIELD_OFFSET(MLDemoHeader, _impl_.map_name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional int32 tick_rate = 2;
    {PROTOBUF_FIELD_OFFSET(MLDemoHeader, _impl_.tick_rate_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional uint32 version = 3;
    {PROTOBUF_FIELD_OFFSET(MLDemoHeader, _impl_.version_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 steam_universe = 4;
    {PROTOBUF_FIELD_OFFSET(MLDemoHeader, _impl_.steam_universe_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
    "\14\10\0\0\0\0\0\0"
    "MLDemoHeader"
    "map_name"
  }},
};
PROTOBUF_NOINLINE void MLDemoHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:MLDemoHeader)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _impl_.map_name_.ClearNonDefaultToEmpty();
  }
  if ((cached_has_bits & 0x0000000eu) != 0) {
    ::memset(&_impl_.tick_rate_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.steam_universe_) -
        reinterpret_cast<char*>(&_impl_.tick_rate_)) + sizeof(_impl_.steam_universe_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL MLDemoHeader::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const MLDemoHeader& this_ = static_cast<const MLDemoHeader&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL MLDemoHeader::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const MLDemoHeader& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:MLDemoHeader)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional string map_name = 1;
  if ((cached_has_bits & 0x00000001u) != 0) {
    const std::string& _s = this_._internal_map_name();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "MLDemoHeader.map_name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional int32 tick_rate = 2;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<2>(
            stream, this_._internal_tick_rate(), target);
  }

  // optional uint32 version = 3;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this_._internal_version(), target);
  }

  // optional uint32 steam_universe = 4;
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this_._internal_steam_universe(), target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLDemoHeader)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t MLDemoHeader::ByteSizeLong(const MessageLite& base) {
  const MLDemoHeader& this_ = static_cast<const MLDemoHeader&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t MLDemoHeader::ByteSizeLong() const {
  const MLDemoHeader& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:MLDemoHeader)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    // optional string map_name = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_map_name());
    }
    // optional int32 tick_rate = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_tick_rate());
    }
    // optional uint32 version = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_version());
    }
    // optional uint32 steam_universe = 4;
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_steam_universe());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void MLDemoHeader::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MLDemoHeader*>(&to_msg);
  auto& from = static_cast<const MLDemoHeader&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:MLDemoHeader)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_internal_set_map_name(from._internal_map_name());
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_impl_.tick_rate_ = from._impl_.tick_rate_;
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_impl_.version_ = from._impl_.version_;
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _this->_impl_.steam_universe_ = from._impl_.steam_universe_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MLDemoHeader::CopyFrom(const MLDemoHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MLDemoHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MLDemoHeader::InternalSwap(MLDemoHeader* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.map_name_, &other->_impl_.map_name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MLDemoHeader, _impl_.steam_universe_)
      + sizeof(MLDemoHeader::_impl_.steam_universe_)
      - PROTOBUF_FIELD_OFFSET(MLDemoHeader, _impl_.tick_rate_)>(
          reinterpret_cast<char*>(&_impl_.tick_rate_),
          reinterpret_cast<char*>(&other->_impl_.tick_rate_));
}

::google::protobuf::Metadata MLDemoHeader::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MLTick::_Internal {
 public:
  using HasBits =
      decltype(std::declval<MLTick>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(MLTick, _impl_._has_bits_);
};

MLTick::MLTick(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, MLTick_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:MLTick)
}
PROTOBUF_NDEBUG_INLINE MLTick::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::MLTick& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        events_{visibility, arena, from.events_} {}

MLTick::MLTick(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const MLTick& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, MLTick_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  MLTick* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.state_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.state_)
                : nullptr;
  _impl_.tick_count_ = from._impl_.tick_count_;

  // @@protoc_insertion_point(copy_constructor:MLTick)
}
PROTOBUF_NDEBUG_INLINE MLTick::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        events_{visibility, arena} {}

inline void MLTick::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, state_),
           0,
           offsetof(Impl_, tick_count_) -
               offsetof(Impl_, state_) +
               sizeof(Impl_::tick_count_));
}
MLTick::~MLTick() {
  // @@protoc_insertion_point(destructor:MLTick)
  SharedDtor(*this);
}
inline void MLTick::SharedDtor(MessageLite& self) {
  MLTick& this_ = static_cast<MLTick&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.state_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL MLTick::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) MLTick(arena);
}
constexpr auto MLTick::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(MLTick, _impl_.events_) +
          decltype(MLTick::_impl_.events_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(MLTick), alignof(MLTick), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&MLTick::PlacementNew_,
                                 sizeof(MLTick),
                                 alignof(MLTick));
  }
}
constexpr auto MLTick::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_MLTick_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &MLTick::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<MLTick>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &MLTick::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<MLTick>(), &MLTick::ByteSizeLong,
              &MLTick::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(MLTick, _impl_._cached_size_),
          false,
      },
      &MLTick::kDescriptorMethods,
      &descriptor_table_fatdemo_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        MLTick_class_data_ =
            MLTick::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL MLTick::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&MLTick_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(MLTick_class_data_.tc_table);
  return MLTick_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 0, 2>
MLTick::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MLTick, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    MLTick_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::MLTick>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional int32 tick_count = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MLTick, _impl_.tick_count_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(MLTick, _impl_.tick_count_)}},
    // optional .MLGameState state = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(MLTick, _impl_.state_)}},
    // repeated .MLEvent events = 3;
    {::_pbi::TcParser::FastMtR1,
     {26, 63, 1, PROTOBUF_FIELD_OFFSET(MLTick, _impl_.events_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional int32 tick_count = 1;
    {PROTOBUF_FIELD_OFFSET(MLTick, _impl_.tick_count_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional .MLGameState state = 2;
    {PROTOBUF_FIELD_OFFSET(MLTick, _impl_.state_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .MLEvent events = 3;
    {PROTOBUF_FIELD_OFFSET(MLTick, _impl_.events_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::MLGameState>()},
      {::_pbi::TcParser::GetTable<::MLEvent>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void MLTick::Clear() {
// @@protoc_insertion_point(message_clear_start:MLTick)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.events_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(_impl_.state_ != nullptr);
    _impl_.state_->Clear();
  }
  _impl_.tick_count_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL MLTick::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const MLTick& this_ = static_cast<const MLTick&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL MLTick::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const MLTick& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:MLTick)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional int32 tick_count = 1;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<1>(
            stream, this_._internal_tick_count(), target);
  }

  // optional .MLGameState state = 2;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        2, *this_._impl_.state_, this_._impl_.state_->GetCachedSize(), target,
        stream);
  }

  // repeated .MLEvent events = 3;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_events_size());
       i < n; i++) {
    const auto& repfield = this_._internal_events().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            3, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MLTick)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t MLTick::ByteSizeLong(const MessageLite& base) {
  const MLTick& this_ = static_cast<const MLTick&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t MLTick::ByteSizeLong() const {
  const MLTick& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:MLTick)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .MLEvent events = 3;
    {
      total_size += 1UL * this_._internal_events_size();
      for (const auto& msg : this_._internal_events()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // optional .MLGameState state = 2;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.state_);
    }
    // optional int32 tick_count = 1;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_tick_count());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void MLTick::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MLTick*>(&to_msg);
  auto& from = static_cast<const MLTick&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:MLTick)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_events()->MergeFrom(
      from._internal_events());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.state_ != nullptr);
      if (_this->_impl_.state_ == nullptr) {
        _this->_impl_.state_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.state_);
      } else {
        _this->_impl_.state_->MergeFrom(*from._impl_.state_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_impl_.tick_count_ = from._impl_.tick_count_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MLTick::CopyFrom(const MLTick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MLTick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MLTick::InternalSwap(MLTick* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.events_.InternalSwap(&other->_impl_.events_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MLTick, _impl_.tick_count_)
      + sizeof(MLTick::_impl_.tick_count_)
      - PROTOBUF_FIELD_OFFSET(MLTick, _impl_.state_)>(
          reinterpret_cast<char*>(&_impl_.state_),
          reinterpret_cast<char*>(&other->_impl_.state_));
}

::google::protobuf::Metadata MLTick::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class VacNetShot::_Internal {
 public:
  using HasBits =
      decltype(std::declval<VacNetShot>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(VacNetShot, _impl_._has_bits_);
};

VacNetShot::VacNetShot(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, VacNetShot_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:VacNetShot)
}
PROTOBUF_NDEBUG_INLINE VacNetShot::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::VacNetShot& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        delta_yaw_window_{visibility, arena, from.delta_yaw_window_},
        delta_pitch_window_{visibility, arena, from.delta_pitch_window_} {}

VacNetShot::VacNetShot(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const VacNetShot& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, VacNetShot_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  VacNetShot* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, steamid_player_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, steamid_player_),
           offsetof(Impl_, distance_to_hurt_target_) -
               offsetof(Impl_, steamid_player_) +
               sizeof(Impl_::distance_to_hurt_target_));

  // @@protoc_insertion_point(copy_constructor:VacNetShot)
}
PROTOBUF_NDEBUG_INLINE VacNetShot::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        delta_yaw_window_{visibility, arena},
        delta_pitch_window_{visibility, arena} {}

inline void VacNetShot::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, steamid_player_),
           0,
           offsetof(Impl_, distance_to_hurt_target_) -
               offsetof(Impl_, steamid_player_) +
               sizeof(Impl_::distance_to_hurt_target_));
}
VacNetShot::~VacNetShot() {
  // @@protoc_insertion_point(destructor:VacNetShot)
  SharedDtor(*this);
}
inline void VacNetShot::SharedDtor(MessageLite& self) {
  VacNetShot& this_ = static_cast<VacNetShot&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL VacNetShot::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) VacNetShot(arena);
}
constexpr auto VacNetShot::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(VacNetShot, _impl_.delta_yaw_window_) +
          decltype(VacNetShot::_impl_.delta_yaw_window_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(VacNetShot, _impl_.delta_pitch_window_) +
          decltype(VacNetShot::_impl_.delta_pitch_window_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(VacNetShot), alignof(VacNetShot), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&VacNetShot::PlacementNew_,
                                 sizeof(VacNetShot),
                                 alignof(VacNetShot));
  }
}
constexpr auto VacNetShot::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_VacNetShot_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &VacNetShot::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<VacNetShot>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &VacNetShot::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<VacNetShot>(), &VacNetShot::ByteSizeLong,
              &VacNetShot::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(VacNetShot, _impl_._cached_size_),
          false,
      },
      &VacNetShot::kDescriptorMethods,
      &descriptor_table_fatdemo_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        VacNetShot_class_data_ =
            VacNetShot::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL VacNetShot::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&VacNetShot_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(VacNetShot_class_data_.tc_table);
  return VacNetShot_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 0, 0, 2>
VacNetShot::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(VacNetShot, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    VacNetShot_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::VacNetShot>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional fixed64 steamid_player = 1;
    {::_pbi::TcParser::FastF64S1,
     {9, 0, 0, PROTOBUF_FIELD_OFFSET(VacNetShot, _impl_.steamid_player_)}},
    // optional int32 round_number = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(VacNetShot, _impl_.round_number_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(VacNetShot, _impl_.round_number_)}},
    // optional int32 hit_type = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(VacNetShot, _impl_.hit_type_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(VacNetShot, _impl_.hit_type_)}},
    // optional int32 weapon_type = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(VacNetShot, _impl_.weapon_type_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(VacNetShot, _impl_.weapon_type_)}},
    // optional float distance_to_hurt_target = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 4, 0, PROTOBUF_FIELD_OFFSET(VacNetShot, _impl_.distance_to_hurt_target_)}},
    // repeated float delta_yaw_window = 6;
    {::_pbi::TcParser::FastF32R1,
     {53, 63, 0, PROTOBUF_FIELD_OFFSET(VacNetShot, _impl_.delta_yaw_window_)}},
    // repeated float delta_pitch_window = 7;
    {::_pbi::TcParser::FastF32R1,
     {61, 63, 0, PROTOBUF_FIELD_OFFSET(VacNetShot, _impl_.delta_pitch_window_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional fixed64 steamid_player = 1;
    {PROTOBUF_FIELD_OFFSET(VacNetShot, _impl_.steamid_player_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
    // optional int32 round_number = 2;
    {PROTOBUF_FIELD_OFFSET(VacNetShot, _impl_.round_number_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 hit_type = 3;
    {PROTOBUF_FIELD_OFFSET(VacNetShot, _impl_.hit_type_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 weapon_type = 4;
    {PROTOBUF_FIELD_OFFSET(VacNetShot, _impl_.weapon_type_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional float distance_to_hurt_target = 5;
    {PROTOBUF_FIELD_OFFSET(VacNetShot, _impl_.distance_to_hurt_target_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // repeated float delta_yaw_window = 6;
    {PROTOBUF_FIELD_OFFSET(VacNetShot, _impl_.delta_yaw_window_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kFloat)},
    // repeated float delta_pitch_window = 7;
    {PROTOBUF_FIELD_OFFSET(VacNetShot, _impl_.delta_pitch_window_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};
PROTOBUF_NOINLINE void VacNetShot::Clear() {
// @@protoc_insertion_point(message_clear_start:VacNetShot)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.delta_yaw_window_.Clear();
  _impl_.delta_pitch_window_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fu) != 0) {
    ::memset(&_impl_.steamid_player_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.distance_to_hurt_target_) -
        reinterpret_cast<char*>(&_impl_.steamid_player_)) + sizeof(_impl_.distance_to_hurt_target_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL VacNetShot::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const VacNetShot& this_ = static_cast<const VacNetShot&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL VacNetShot::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const VacNetShot& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:VacNetShot)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional fixed64 steamid_player = 1;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        1, this_._internal_steamid_player(), target);
  }

  // optional int32 round_number = 2;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<2>(
            stream, this_._internal_round_number(), target);
  }

  // optional int32 hit_type = 3;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<3>(
            stream, this_._internal_hit_type(), target);
  }

  // optional int32 weapon_type = 4;
  if ((cached_has_bits & 0x00000008u) != 0) {
    target =
        ::google::protobuf::internal::WireFormatLite::WriteInt32ToArrayWithField<4>(
            stream, this_._internal_weapon_type(), target);
  }

  // optional float distance_to_hurt_target = 5;
  if ((cached_has_bits & 0x00000010u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        5, this_._internal_distance_to_hurt_target(), target);
  }

  // repeated float delta_yaw_window = 6;
  for (int i = 0, n = this_._internal_delta_yaw_window_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        6, this_._internal_delta_yaw_window().Get(i), target);
  }

  // repeated float delta_pitch_window = 7;
  for (int i = 0, n = this_._internal_delta_pitch_window_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        7, this_._internal_delta_pitch_window().Get(i), target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:VacNetShot)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t VacNetShot::ByteSizeLong(const MessageLite& base) {
  const VacNetShot& this_ = static_cast<const VacNetShot&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t VacNetShot::ByteSizeLong() const {
  const VacNetShot& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:VacNetShot)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated float delta_yaw_window = 6;
    {
      std::size_t data_size = std::size_t{4} *
          ::_pbi::FromIntSize(this_._internal_delta_yaw_window_size());
      std::size_t tag_size = std::size_t{1} *
          ::_pbi::FromIntSize(this_._internal_delta_yaw_window_size());
      total_size += tag_size + data_size;
    }
    // repeated float delta_pitch_window = 7;
    {
      std::size_t data_size = std::size_t{4} *
          ::_pbi::FromIntSize(this_._internal_delta_pitch_window_size());
      std::size_t tag_size = std::size_t{1} *
          ::_pbi::FromIntSize(this_._internal_delta_pitch_window_size());
      total_size += tag_size + data_size;
    }
  }
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += static_cast<bool>(0x00000001u & cached_has_bits) * 9;
  total_size += static_cast<bool>(0x00000010u & cached_has_bits) * 5;
  if ((cached_has_bits & 0x0000000eu) != 0) {
    // optional int32 round_number = 2;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_round_number());
    }
    // optional int32 hit_type = 3;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_hit_type());
    }
    // optional int32 weapon_type = 4;
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this_._internal_weapon_type());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void VacNetShot::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<VacNetShot*>(&to_msg);
  auto& from = static_cast<const VacNetShot&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:VacNetShot)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_delta_yaw_window()->MergeFrom(from._internal_delta_yaw_window());
  _this->_internal_mutable_delta_pitch_window()->MergeFrom(from._internal_delta_pitch_window());
  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_impl_.steamid_player_ = from._impl_.steamid_player_;
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_impl_.round_number_ = from._impl_.round_number_;
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_impl_.hit_type_ = from._impl_.hit_type_;
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _this->_impl_.weapon_type_ = from._impl_.weapon_type_;
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _this->_impl_.distance_to_hurt_target_ = from._impl_.distance_to_hurt_target_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void VacNetShot::CopyFrom(const VacNetShot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:VacNetShot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void VacNetShot::InternalSwap(VacNetShot* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.delta_yaw_window_.InternalSwap(&other->_impl_.delta_yaw_window_);
  _impl_.delta_pitch_window_.InternalSwap(&other->_impl_.delta_pitch_window_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VacNetShot, _impl_.distance_to_hurt_target_)
      + sizeof(VacNetShot::_impl_.distance_to_hurt_target_)
      - PROTOBUF_FIELD_OFFSET(VacNetShot, _impl_.steamid_player_)>(
          reinterpret_cast<char*>(&_impl_.steamid_player_),
          reinterpret_cast<char*>(&other->_impl_.steamid_player_));
}

::google::protobuf::Metadata VacNetShot::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ [[maybe_unused]] =
        (::_pbi::AddDescriptors(&descriptor_table_fatdemo_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"

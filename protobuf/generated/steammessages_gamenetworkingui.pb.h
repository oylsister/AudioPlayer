// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: steammessages_gamenetworkingui.proto
// Protobuf C++ Version: 6.30.0-rc1

#ifndef steammessages_5fgamenetworkingui_2eproto_2epb_2eh
#define steammessages_5fgamenetworkingui_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6030000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "steamnetworkingsockets_messages.pb.h"
#include "steamdatagram_messages_sdr.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_steammessages_5fgamenetworkingui_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_steammessages_5fgamenetworkingui_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
extern const ::google::protobuf::internal::DescriptorTable descriptor_table_steammessages_5fgamenetworkingui_2eproto;
}  // extern "C"
class CGameNetworkingUI_AppSummary;
struct CGameNetworkingUI_AppSummaryDefaultTypeInternal;
extern CGameNetworkingUI_AppSummaryDefaultTypeInternal _CGameNetworkingUI_AppSummary_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull CGameNetworkingUI_AppSummary_class_data_;
class CGameNetworkingUI_ConnectionState;
struct CGameNetworkingUI_ConnectionStateDefaultTypeInternal;
extern CGameNetworkingUI_ConnectionStateDefaultTypeInternal _CGameNetworkingUI_ConnectionState_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull CGameNetworkingUI_ConnectionState_class_data_;
class CGameNetworkingUI_ConnectionSummary;
struct CGameNetworkingUI_ConnectionSummaryDefaultTypeInternal;
extern CGameNetworkingUI_ConnectionSummaryDefaultTypeInternal _CGameNetworkingUI_ConnectionSummary_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull CGameNetworkingUI_ConnectionSummary_class_data_;
class CGameNetworkingUI_GlobalState;
struct CGameNetworkingUI_GlobalStateDefaultTypeInternal;
extern CGameNetworkingUI_GlobalStateDefaultTypeInternal _CGameNetworkingUI_GlobalState_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull CGameNetworkingUI_GlobalState_class_data_;
class CGameNetworkingUI_Message;
struct CGameNetworkingUI_MessageDefaultTypeInternal;
extern CGameNetworkingUI_MessageDefaultTypeInternal _CGameNetworkingUI_Message_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull CGameNetworkingUI_Message_class_data_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class CGameNetworkingUI_GlobalState final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:CGameNetworkingUI_GlobalState) */ {
 public:
  inline CGameNetworkingUI_GlobalState() : CGameNetworkingUI_GlobalState(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CGameNetworkingUI_GlobalState* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CGameNetworkingUI_GlobalState));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CGameNetworkingUI_GlobalState(::google::protobuf::internal::ConstantInitialized);

  inline CGameNetworkingUI_GlobalState(const CGameNetworkingUI_GlobalState& from) : CGameNetworkingUI_GlobalState(nullptr, from) {}
  inline CGameNetworkingUI_GlobalState(CGameNetworkingUI_GlobalState&& from) noexcept
      : CGameNetworkingUI_GlobalState(nullptr, std::move(from)) {}
  inline CGameNetworkingUI_GlobalState& operator=(const CGameNetworkingUI_GlobalState& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameNetworkingUI_GlobalState& operator=(CGameNetworkingUI_GlobalState&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGameNetworkingUI_GlobalState& default_instance() {
    return *reinterpret_cast<const CGameNetworkingUI_GlobalState*>(
        &_CGameNetworkingUI_GlobalState_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(CGameNetworkingUI_GlobalState& a, CGameNetworkingUI_GlobalState& b) { a.Swap(&b); }
  inline void Swap(CGameNetworkingUI_GlobalState* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameNetworkingUI_GlobalState* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CGameNetworkingUI_GlobalState* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<CGameNetworkingUI_GlobalState>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CGameNetworkingUI_GlobalState& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CGameNetworkingUI_GlobalState& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "CGameNetworkingUI_GlobalState"; }

 protected:
  explicit CGameNetworkingUI_GlobalState(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  CGameNetworkingUI_GlobalState(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const CGameNetworkingUI_GlobalState& from);
  CGameNetworkingUI_GlobalState(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, CGameNetworkingUI_GlobalState&& from) noexcept
      : CGameNetworkingUI_GlobalState(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:CGameNetworkingUI_GlobalState)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 0,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const CGameNetworkingUI_GlobalState& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_steammessages_5fgamenetworkingui_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull CGameNetworkingUI_GlobalState_class_data_;
// -------------------------------------------------------------------

class CGameNetworkingUI_ConnectionSummary final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:CGameNetworkingUI_ConnectionSummary) */ {
 public:
  inline CGameNetworkingUI_ConnectionSummary() : CGameNetworkingUI_ConnectionSummary(nullptr) {}
  ~CGameNetworkingUI_ConnectionSummary() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CGameNetworkingUI_ConnectionSummary* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CGameNetworkingUI_ConnectionSummary));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CGameNetworkingUI_ConnectionSummary(::google::protobuf::internal::ConstantInitialized);

  inline CGameNetworkingUI_ConnectionSummary(const CGameNetworkingUI_ConnectionSummary& from) : CGameNetworkingUI_ConnectionSummary(nullptr, from) {}
  inline CGameNetworkingUI_ConnectionSummary(CGameNetworkingUI_ConnectionSummary&& from) noexcept
      : CGameNetworkingUI_ConnectionSummary(nullptr, std::move(from)) {}
  inline CGameNetworkingUI_ConnectionSummary& operator=(const CGameNetworkingUI_ConnectionSummary& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameNetworkingUI_ConnectionSummary& operator=(CGameNetworkingUI_ConnectionSummary&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGameNetworkingUI_ConnectionSummary& default_instance() {
    return *reinterpret_cast<const CGameNetworkingUI_ConnectionSummary*>(
        &_CGameNetworkingUI_ConnectionSummary_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(CGameNetworkingUI_ConnectionSummary& a, CGameNetworkingUI_ConnectionSummary& b) { a.Swap(&b); }
  inline void Swap(CGameNetworkingUI_ConnectionSummary* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameNetworkingUI_ConnectionSummary* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CGameNetworkingUI_ConnectionSummary* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CGameNetworkingUI_ConnectionSummary>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CGameNetworkingUI_ConnectionSummary& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CGameNetworkingUI_ConnectionSummary& from) { CGameNetworkingUI_ConnectionSummary::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CGameNetworkingUI_ConnectionSummary* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "CGameNetworkingUI_ConnectionSummary"; }

 protected:
  explicit CGameNetworkingUI_ConnectionSummary(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  CGameNetworkingUI_ConnectionSummary(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const CGameNetworkingUI_ConnectionSummary& from);
  CGameNetworkingUI_ConnectionSummary(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, CGameNetworkingUI_ConnectionSummary&& from) noexcept
      : CGameNetworkingUI_ConnectionSummary(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSdrpopLocalFieldNumber = 2,
    kSdrpopRemoteFieldNumber = 3,
    kTransportKindFieldNumber = 1,
    kPingMsFieldNumber = 4,
    kPacketLossFieldNumber = 5,
    kPingDefaultInternetRouteFieldNumber = 6,
    kIpWasSharedFieldNumber = 7,
    kConnectionStateFieldNumber = 8,
  };
  // optional string sdrpop_local = 2;
  bool has_sdrpop_local() const;
  void clear_sdrpop_local() ;
  const std::string& sdrpop_local() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sdrpop_local(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_sdrpop_local();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_sdrpop_local();
  void set_allocated_sdrpop_local(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_sdrpop_local() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_sdrpop_local(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_sdrpop_local();

  public:
  // optional string sdrpop_remote = 3;
  bool has_sdrpop_remote() const;
  void clear_sdrpop_remote() ;
  const std::string& sdrpop_remote() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sdrpop_remote(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_sdrpop_remote();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_sdrpop_remote();
  void set_allocated_sdrpop_remote(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_sdrpop_remote() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_sdrpop_remote(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_sdrpop_remote();

  public:
  // optional uint32 transport_kind = 1;
  bool has_transport_kind() const;
  void clear_transport_kind() ;
  ::uint32_t transport_kind() const;
  void set_transport_kind(::uint32_t value);

  private:
  ::uint32_t _internal_transport_kind() const;
  void _internal_set_transport_kind(::uint32_t value);

  public:
  // optional uint32 ping_ms = 4;
  bool has_ping_ms() const;
  void clear_ping_ms() ;
  ::uint32_t ping_ms() const;
  void set_ping_ms(::uint32_t value);

  private:
  ::uint32_t _internal_ping_ms() const;
  void _internal_set_ping_ms(::uint32_t value);

  public:
  // optional float packet_loss = 5;
  bool has_packet_loss() const;
  void clear_packet_loss() ;
  float packet_loss() const;
  void set_packet_loss(float value);

  private:
  float _internal_packet_loss() const;
  void _internal_set_packet_loss(float value);

  public:
  // optional uint32 ping_default_internet_route = 6;
  bool has_ping_default_internet_route() const;
  void clear_ping_default_internet_route() ;
  ::uint32_t ping_default_internet_route() const;
  void set_ping_default_internet_route(::uint32_t value);

  private:
  ::uint32_t _internal_ping_default_internet_route() const;
  void _internal_set_ping_default_internet_route(::uint32_t value);

  public:
  // optional bool ip_was_shared = 7;
  bool has_ip_was_shared() const;
  void clear_ip_was_shared() ;
  bool ip_was_shared() const;
  void set_ip_was_shared(bool value);

  private:
  bool _internal_ip_was_shared() const;
  void _internal_set_ip_was_shared(bool value);

  public:
  // optional uint32 connection_state = 8;
  bool has_connection_state() const;
  void clear_connection_state() ;
  ::uint32_t connection_state() const;
  void set_connection_state(::uint32_t value);

  private:
  ::uint32_t _internal_connection_state() const;
  void _internal_set_connection_state(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:CGameNetworkingUI_ConnectionSummary)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 8,
                                   0, 77,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const CGameNetworkingUI_ConnectionSummary& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr sdrpop_local_;
    ::google::protobuf::internal::ArenaStringPtr sdrpop_remote_;
    ::uint32_t transport_kind_;
    ::uint32_t ping_ms_;
    float packet_loss_;
    ::uint32_t ping_default_internet_route_;
    bool ip_was_shared_;
    ::uint32_t connection_state_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fgamenetworkingui_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull CGameNetworkingUI_ConnectionSummary_class_data_;
// -------------------------------------------------------------------

class CGameNetworkingUI_AppSummary final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:CGameNetworkingUI_AppSummary) */ {
 public:
  inline CGameNetworkingUI_AppSummary() : CGameNetworkingUI_AppSummary(nullptr) {}
  ~CGameNetworkingUI_AppSummary() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CGameNetworkingUI_AppSummary* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CGameNetworkingUI_AppSummary));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CGameNetworkingUI_AppSummary(::google::protobuf::internal::ConstantInitialized);

  inline CGameNetworkingUI_AppSummary(const CGameNetworkingUI_AppSummary& from) : CGameNetworkingUI_AppSummary(nullptr, from) {}
  inline CGameNetworkingUI_AppSummary(CGameNetworkingUI_AppSummary&& from) noexcept
      : CGameNetworkingUI_AppSummary(nullptr, std::move(from)) {}
  inline CGameNetworkingUI_AppSummary& operator=(const CGameNetworkingUI_AppSummary& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameNetworkingUI_AppSummary& operator=(CGameNetworkingUI_AppSummary&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGameNetworkingUI_AppSummary& default_instance() {
    return *reinterpret_cast<const CGameNetworkingUI_AppSummary*>(
        &_CGameNetworkingUI_AppSummary_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(CGameNetworkingUI_AppSummary& a, CGameNetworkingUI_AppSummary& b) { a.Swap(&b); }
  inline void Swap(CGameNetworkingUI_AppSummary* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameNetworkingUI_AppSummary* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CGameNetworkingUI_AppSummary* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CGameNetworkingUI_AppSummary>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CGameNetworkingUI_AppSummary& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CGameNetworkingUI_AppSummary& from) { CGameNetworkingUI_AppSummary::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CGameNetworkingUI_AppSummary* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "CGameNetworkingUI_AppSummary"; }

 protected:
  explicit CGameNetworkingUI_AppSummary(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  CGameNetworkingUI_AppSummary(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const CGameNetworkingUI_AppSummary& from);
  CGameNetworkingUI_AppSummary(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, CGameNetworkingUI_AppSummary&& from) noexcept
      : CGameNetworkingUI_AppSummary(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kMainCxnFieldNumber = 30,
    kAppidFieldNumber = 1,
    kIpWasSharedWithFriendFieldNumber = 10,
    kIpWasSharedWithNonfriendFieldNumber = 11,
    kActiveConnectionsFieldNumber = 20,
  };
  // optional .CGameNetworkingUI_ConnectionSummary main_cxn = 30;
  bool has_main_cxn() const;
  void clear_main_cxn() ;
  const ::CGameNetworkingUI_ConnectionSummary& main_cxn() const;
  [[nodiscard]] ::CGameNetworkingUI_ConnectionSummary* PROTOBUF_NULLABLE release_main_cxn();
  ::CGameNetworkingUI_ConnectionSummary* PROTOBUF_NONNULL mutable_main_cxn();
  void set_allocated_main_cxn(::CGameNetworkingUI_ConnectionSummary* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_main_cxn(::CGameNetworkingUI_ConnectionSummary* PROTOBUF_NULLABLE value);
  ::CGameNetworkingUI_ConnectionSummary* PROTOBUF_NULLABLE unsafe_arena_release_main_cxn();

  private:
  const ::CGameNetworkingUI_ConnectionSummary& _internal_main_cxn() const;
  ::CGameNetworkingUI_ConnectionSummary* PROTOBUF_NONNULL _internal_mutable_main_cxn();

  public:
  // optional uint32 appid = 1;
  bool has_appid() const;
  void clear_appid() ;
  ::uint32_t appid() const;
  void set_appid(::uint32_t value);

  private:
  ::uint32_t _internal_appid() const;
  void _internal_set_appid(::uint32_t value);

  public:
  // optional bool ip_was_shared_with_friend = 10;
  bool has_ip_was_shared_with_friend() const;
  void clear_ip_was_shared_with_friend() ;
  bool ip_was_shared_with_friend() const;
  void set_ip_was_shared_with_friend(bool value);

  private:
  bool _internal_ip_was_shared_with_friend() const;
  void _internal_set_ip_was_shared_with_friend(bool value);

  public:
  // optional bool ip_was_shared_with_nonfriend = 11;
  bool has_ip_was_shared_with_nonfriend() const;
  void clear_ip_was_shared_with_nonfriend() ;
  bool ip_was_shared_with_nonfriend() const;
  void set_ip_was_shared_with_nonfriend(bool value);

  private:
  bool _internal_ip_was_shared_with_nonfriend() const;
  void _internal_set_ip_was_shared_with_nonfriend(bool value);

  public:
  // optional uint32 active_connections = 20;
  bool has_active_connections() const;
  void clear_active_connections() ;
  ::uint32_t active_connections() const;
  void set_active_connections(::uint32_t value);

  private:
  ::uint32_t _internal_active_connections() const;
  void _internal_set_active_connections(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:CGameNetworkingUI_AppSummary)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const CGameNetworkingUI_AppSummary& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::CGameNetworkingUI_ConnectionSummary* PROTOBUF_NULLABLE main_cxn_;
    ::uint32_t appid_;
    bool ip_was_shared_with_friend_;
    bool ip_was_shared_with_nonfriend_;
    ::uint32_t active_connections_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fgamenetworkingui_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull CGameNetworkingUI_AppSummary_class_data_;
// -------------------------------------------------------------------

class CGameNetworkingUI_ConnectionState final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:CGameNetworkingUI_ConnectionState) */ {
 public:
  inline CGameNetworkingUI_ConnectionState() : CGameNetworkingUI_ConnectionState(nullptr) {}
  ~CGameNetworkingUI_ConnectionState() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CGameNetworkingUI_ConnectionState* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CGameNetworkingUI_ConnectionState));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CGameNetworkingUI_ConnectionState(::google::protobuf::internal::ConstantInitialized);

  inline CGameNetworkingUI_ConnectionState(const CGameNetworkingUI_ConnectionState& from) : CGameNetworkingUI_ConnectionState(nullptr, from) {}
  inline CGameNetworkingUI_ConnectionState(CGameNetworkingUI_ConnectionState&& from) noexcept
      : CGameNetworkingUI_ConnectionState(nullptr, std::move(from)) {}
  inline CGameNetworkingUI_ConnectionState& operator=(const CGameNetworkingUI_ConnectionState& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameNetworkingUI_ConnectionState& operator=(CGameNetworkingUI_ConnectionState&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGameNetworkingUI_ConnectionState& default_instance() {
    return *reinterpret_cast<const CGameNetworkingUI_ConnectionState*>(
        &_CGameNetworkingUI_ConnectionState_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(CGameNetworkingUI_ConnectionState& a, CGameNetworkingUI_ConnectionState& b) { a.Swap(&b); }
  inline void Swap(CGameNetworkingUI_ConnectionState* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameNetworkingUI_ConnectionState* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CGameNetworkingUI_ConnectionState* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CGameNetworkingUI_ConnectionState>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CGameNetworkingUI_ConnectionState& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CGameNetworkingUI_ConnectionState& from) { CGameNetworkingUI_ConnectionState::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CGameNetworkingUI_ConnectionState* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "CGameNetworkingUI_ConnectionState"; }

 protected:
  explicit CGameNetworkingUI_ConnectionState(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  CGameNetworkingUI_ConnectionState(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const CGameNetworkingUI_ConnectionState& from);
  CGameNetworkingUI_ConnectionState(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, CGameNetworkingUI_ConnectionState&& from) noexcept
      : CGameNetworkingUI_ConnectionState(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kConnectionKeyFieldNumber = 1,
    kIdentityLocalFieldNumber = 4,
    kIdentityRemoteFieldNumber = 5,
    kCloseMessageFieldNumber = 15,
    kStatusLocTokenFieldNumber = 16,
    kSdrpopidLocalFieldNumber = 21,
    kSdrpopidRemoteFieldNumber = 22,
    kAddressRemoteFieldNumber = 23,
    kP2PRoutingFieldNumber = 24,
    kE2EQualityLocalFieldNumber = 30,
    kE2EQualityRemoteFieldNumber = 31,
    kFrontQualityLocalFieldNumber = 40,
    kFrontQualityRemoteFieldNumber = 41,
    kAppidFieldNumber = 2,
    kConnectionIdLocalFieldNumber = 3,
    kConnectionStateFieldNumber = 10,
    kStartTimeFieldNumber = 12,
    kCloseTimeFieldNumber = 13,
    kCloseReasonFieldNumber = 14,
    kTransportKindFieldNumber = 20,
    kPingInteriorFieldNumber = 25,
    kPingRemoteFrontFieldNumber = 26,
    kPingDefaultInternetRouteFieldNumber = 27,
    kE2EQualityRemoteInstantaneousTimeFieldNumber = 32,
    kE2EQualityRemoteLifetimeTimeFieldNumber = 33,
    kFrontQualityRemoteInstantaneousTimeFieldNumber = 42,
    kFrontQualityRemoteLifetimeTimeFieldNumber = 43,
  };
  // optional string connection_key = 1;
  bool has_connection_key() const;
  void clear_connection_key() ;
  const std::string& connection_key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_connection_key(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_connection_key();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_connection_key();
  void set_allocated_connection_key(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_connection_key() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_connection_key(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_connection_key();

  public:
  // optional string identity_local = 4;
  bool has_identity_local() const;
  void clear_identity_local() ;
  const std::string& identity_local() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_identity_local(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_identity_local();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_identity_local();
  void set_allocated_identity_local(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_identity_local() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_identity_local(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_identity_local();

  public:
  // optional string identity_remote = 5;
  bool has_identity_remote() const;
  void clear_identity_remote() ;
  const std::string& identity_remote() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_identity_remote(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_identity_remote();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_identity_remote();
  void set_allocated_identity_remote(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_identity_remote() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_identity_remote(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_identity_remote();

  public:
  // optional string close_message = 15;
  bool has_close_message() const;
  void clear_close_message() ;
  const std::string& close_message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_close_message(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_close_message();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_close_message();
  void set_allocated_close_message(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_close_message() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_close_message(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_close_message();

  public:
  // optional string status_loc_token = 16;
  bool has_status_loc_token() const;
  void clear_status_loc_token() ;
  const std::string& status_loc_token() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_status_loc_token(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_status_loc_token();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_status_loc_token();
  void set_allocated_status_loc_token(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_status_loc_token() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_status_loc_token(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_status_loc_token();

  public:
  // optional string sdrpopid_local = 21;
  bool has_sdrpopid_local() const;
  void clear_sdrpopid_local() ;
  const std::string& sdrpopid_local() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sdrpopid_local(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_sdrpopid_local();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_sdrpopid_local();
  void set_allocated_sdrpopid_local(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_sdrpopid_local() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_sdrpopid_local(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_sdrpopid_local();

  public:
  // optional string sdrpopid_remote = 22;
  bool has_sdrpopid_remote() const;
  void clear_sdrpopid_remote() ;
  const std::string& sdrpopid_remote() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sdrpopid_remote(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_sdrpopid_remote();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_sdrpopid_remote();
  void set_allocated_sdrpopid_remote(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_sdrpopid_remote() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_sdrpopid_remote(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_sdrpopid_remote();

  public:
  // optional string address_remote = 23;
  bool has_address_remote() const;
  void clear_address_remote() ;
  const std::string& address_remote() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_address_remote(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_address_remote();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_address_remote();
  void set_allocated_address_remote(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_address_remote() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_address_remote(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_address_remote();

  public:
  // optional .CMsgSteamDatagramP2PRoutingSummary p2p_routing = 24;
  bool has_p2p_routing() const;
  void clear_p2p_routing() ;
  const ::CMsgSteamDatagramP2PRoutingSummary& p2p_routing() const;
  [[nodiscard]] ::CMsgSteamDatagramP2PRoutingSummary* PROTOBUF_NULLABLE release_p2p_routing();
  ::CMsgSteamDatagramP2PRoutingSummary* PROTOBUF_NONNULL mutable_p2p_routing();
  void set_allocated_p2p_routing(::CMsgSteamDatagramP2PRoutingSummary* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_p2p_routing(::CMsgSteamDatagramP2PRoutingSummary* PROTOBUF_NULLABLE value);
  ::CMsgSteamDatagramP2PRoutingSummary* PROTOBUF_NULLABLE unsafe_arena_release_p2p_routing();

  private:
  const ::CMsgSteamDatagramP2PRoutingSummary& _internal_p2p_routing() const;
  ::CMsgSteamDatagramP2PRoutingSummary* PROTOBUF_NONNULL _internal_mutable_p2p_routing();

  public:
  // optional .CMsgSteamDatagramConnectionQuality e2e_quality_local = 30;
  bool has_e2e_quality_local() const;
  void clear_e2e_quality_local() ;
  const ::CMsgSteamDatagramConnectionQuality& e2e_quality_local() const;
  [[nodiscard]] ::CMsgSteamDatagramConnectionQuality* PROTOBUF_NULLABLE release_e2e_quality_local();
  ::CMsgSteamDatagramConnectionQuality* PROTOBUF_NONNULL mutable_e2e_quality_local();
  void set_allocated_e2e_quality_local(::CMsgSteamDatagramConnectionQuality* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_e2e_quality_local(::CMsgSteamDatagramConnectionQuality* PROTOBUF_NULLABLE value);
  ::CMsgSteamDatagramConnectionQuality* PROTOBUF_NULLABLE unsafe_arena_release_e2e_quality_local();

  private:
  const ::CMsgSteamDatagramConnectionQuality& _internal_e2e_quality_local() const;
  ::CMsgSteamDatagramConnectionQuality* PROTOBUF_NONNULL _internal_mutable_e2e_quality_local();

  public:
  // optional .CMsgSteamDatagramConnectionQuality e2e_quality_remote = 31;
  bool has_e2e_quality_remote() const;
  void clear_e2e_quality_remote() ;
  const ::CMsgSteamDatagramConnectionQuality& e2e_quality_remote() const;
  [[nodiscard]] ::CMsgSteamDatagramConnectionQuality* PROTOBUF_NULLABLE release_e2e_quality_remote();
  ::CMsgSteamDatagramConnectionQuality* PROTOBUF_NONNULL mutable_e2e_quality_remote();
  void set_allocated_e2e_quality_remote(::CMsgSteamDatagramConnectionQuality* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_e2e_quality_remote(::CMsgSteamDatagramConnectionQuality* PROTOBUF_NULLABLE value);
  ::CMsgSteamDatagramConnectionQuality* PROTOBUF_NULLABLE unsafe_arena_release_e2e_quality_remote();

  private:
  const ::CMsgSteamDatagramConnectionQuality& _internal_e2e_quality_remote() const;
  ::CMsgSteamDatagramConnectionQuality* PROTOBUF_NONNULL _internal_mutable_e2e_quality_remote();

  public:
  // optional .CMsgSteamDatagramConnectionQuality front_quality_local = 40;
  bool has_front_quality_local() const;
  void clear_front_quality_local() ;
  const ::CMsgSteamDatagramConnectionQuality& front_quality_local() const;
  [[nodiscard]] ::CMsgSteamDatagramConnectionQuality* PROTOBUF_NULLABLE release_front_quality_local();
  ::CMsgSteamDatagramConnectionQuality* PROTOBUF_NONNULL mutable_front_quality_local();
  void set_allocated_front_quality_local(::CMsgSteamDatagramConnectionQuality* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_front_quality_local(::CMsgSteamDatagramConnectionQuality* PROTOBUF_NULLABLE value);
  ::CMsgSteamDatagramConnectionQuality* PROTOBUF_NULLABLE unsafe_arena_release_front_quality_local();

  private:
  const ::CMsgSteamDatagramConnectionQuality& _internal_front_quality_local() const;
  ::CMsgSteamDatagramConnectionQuality* PROTOBUF_NONNULL _internal_mutable_front_quality_local();

  public:
  // optional .CMsgSteamDatagramConnectionQuality front_quality_remote = 41;
  bool has_front_quality_remote() const;
  void clear_front_quality_remote() ;
  const ::CMsgSteamDatagramConnectionQuality& front_quality_remote() const;
  [[nodiscard]] ::CMsgSteamDatagramConnectionQuality* PROTOBUF_NULLABLE release_front_quality_remote();
  ::CMsgSteamDatagramConnectionQuality* PROTOBUF_NONNULL mutable_front_quality_remote();
  void set_allocated_front_quality_remote(::CMsgSteamDatagramConnectionQuality* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_front_quality_remote(::CMsgSteamDatagramConnectionQuality* PROTOBUF_NULLABLE value);
  ::CMsgSteamDatagramConnectionQuality* PROTOBUF_NULLABLE unsafe_arena_release_front_quality_remote();

  private:
  const ::CMsgSteamDatagramConnectionQuality& _internal_front_quality_remote() const;
  ::CMsgSteamDatagramConnectionQuality* PROTOBUF_NONNULL _internal_mutable_front_quality_remote();

  public:
  // optional uint32 appid = 2;
  bool has_appid() const;
  void clear_appid() ;
  ::uint32_t appid() const;
  void set_appid(::uint32_t value);

  private:
  ::uint32_t _internal_appid() const;
  void _internal_set_appid(::uint32_t value);

  public:
  // optional fixed32 connection_id_local = 3;
  bool has_connection_id_local() const;
  void clear_connection_id_local() ;
  ::uint32_t connection_id_local() const;
  void set_connection_id_local(::uint32_t value);

  private:
  ::uint32_t _internal_connection_id_local() const;
  void _internal_set_connection_id_local(::uint32_t value);

  public:
  // optional uint32 connection_state = 10;
  bool has_connection_state() const;
  void clear_connection_state() ;
  ::uint32_t connection_state() const;
  void set_connection_state(::uint32_t value);

  private:
  ::uint32_t _internal_connection_state() const;
  void _internal_set_connection_state(::uint32_t value);

  public:
  // optional uint32 start_time = 12;
  bool has_start_time() const;
  void clear_start_time() ;
  ::uint32_t start_time() const;
  void set_start_time(::uint32_t value);

  private:
  ::uint32_t _internal_start_time() const;
  void _internal_set_start_time(::uint32_t value);

  public:
  // optional uint32 close_time = 13;
  bool has_close_time() const;
  void clear_close_time() ;
  ::uint32_t close_time() const;
  void set_close_time(::uint32_t value);

  private:
  ::uint32_t _internal_close_time() const;
  void _internal_set_close_time(::uint32_t value);

  public:
  // optional uint32 close_reason = 14;
  bool has_close_reason() const;
  void clear_close_reason() ;
  ::uint32_t close_reason() const;
  void set_close_reason(::uint32_t value);

  private:
  ::uint32_t _internal_close_reason() const;
  void _internal_set_close_reason(::uint32_t value);

  public:
  // optional uint32 transport_kind = 20;
  bool has_transport_kind() const;
  void clear_transport_kind() ;
  ::uint32_t transport_kind() const;
  void set_transport_kind(::uint32_t value);

  private:
  ::uint32_t _internal_transport_kind() const;
  void _internal_set_transport_kind(::uint32_t value);

  public:
  // optional uint32 ping_interior = 25;
  bool has_ping_interior() const;
  void clear_ping_interior() ;
  ::uint32_t ping_interior() const;
  void set_ping_interior(::uint32_t value);

  private:
  ::uint32_t _internal_ping_interior() const;
  void _internal_set_ping_interior(::uint32_t value);

  public:
  // optional uint32 ping_remote_front = 26;
  bool has_ping_remote_front() const;
  void clear_ping_remote_front() ;
  ::uint32_t ping_remote_front() const;
  void set_ping_remote_front(::uint32_t value);

  private:
  ::uint32_t _internal_ping_remote_front() const;
  void _internal_set_ping_remote_front(::uint32_t value);

  public:
  // optional uint32 ping_default_internet_route = 27;
  bool has_ping_default_internet_route() const;
  void clear_ping_default_internet_route() ;
  ::uint32_t ping_default_internet_route() const;
  void set_ping_default_internet_route(::uint32_t value);

  private:
  ::uint32_t _internal_ping_default_internet_route() const;
  void _internal_set_ping_default_internet_route(::uint32_t value);

  public:
  // optional uint64 e2e_quality_remote_instantaneous_time = 32;
  bool has_e2e_quality_remote_instantaneous_time() const;
  void clear_e2e_quality_remote_instantaneous_time() ;
  ::uint64_t e2e_quality_remote_instantaneous_time() const;
  void set_e2e_quality_remote_instantaneous_time(::uint64_t value);

  private:
  ::uint64_t _internal_e2e_quality_remote_instantaneous_time() const;
  void _internal_set_e2e_quality_remote_instantaneous_time(::uint64_t value);

  public:
  // optional uint64 e2e_quality_remote_lifetime_time = 33;
  bool has_e2e_quality_remote_lifetime_time() const;
  void clear_e2e_quality_remote_lifetime_time() ;
  ::uint64_t e2e_quality_remote_lifetime_time() const;
  void set_e2e_quality_remote_lifetime_time(::uint64_t value);

  private:
  ::uint64_t _internal_e2e_quality_remote_lifetime_time() const;
  void _internal_set_e2e_quality_remote_lifetime_time(::uint64_t value);

  public:
  // optional uint64 front_quality_remote_instantaneous_time = 42;
  bool has_front_quality_remote_instantaneous_time() const;
  void clear_front_quality_remote_instantaneous_time() ;
  ::uint64_t front_quality_remote_instantaneous_time() const;
  void set_front_quality_remote_instantaneous_time(::uint64_t value);

  private:
  ::uint64_t _internal_front_quality_remote_instantaneous_time() const;
  void _internal_set_front_quality_remote_instantaneous_time(::uint64_t value);

  public:
  // optional uint64 front_quality_remote_lifetime_time = 43;
  bool has_front_quality_remote_lifetime_time() const;
  void clear_front_quality_remote_lifetime_time() ;
  ::uint64_t front_quality_remote_lifetime_time() const;
  void set_front_quality_remote_lifetime_time(::uint64_t value);

  private:
  ::uint64_t _internal_front_quality_remote_lifetime_time() const;
  void _internal_set_front_quality_remote_lifetime_time(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:CGameNetworkingUI_ConnectionState)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<5, 27,
                                   5, 181,
                                   7>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const CGameNetworkingUI_ConnectionState& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr connection_key_;
    ::google::protobuf::internal::ArenaStringPtr identity_local_;
    ::google::protobuf::internal::ArenaStringPtr identity_remote_;
    ::google::protobuf::internal::ArenaStringPtr close_message_;
    ::google::protobuf::internal::ArenaStringPtr status_loc_token_;
    ::google::protobuf::internal::ArenaStringPtr sdrpopid_local_;
    ::google::protobuf::internal::ArenaStringPtr sdrpopid_remote_;
    ::google::protobuf::internal::ArenaStringPtr address_remote_;
    ::CMsgSteamDatagramP2PRoutingSummary* PROTOBUF_NULLABLE p2p_routing_;
    ::CMsgSteamDatagramConnectionQuality* PROTOBUF_NULLABLE e2e_quality_local_;
    ::CMsgSteamDatagramConnectionQuality* PROTOBUF_NULLABLE e2e_quality_remote_;
    ::CMsgSteamDatagramConnectionQuality* PROTOBUF_NULLABLE front_quality_local_;
    ::CMsgSteamDatagramConnectionQuality* PROTOBUF_NULLABLE front_quality_remote_;
    ::uint32_t appid_;
    ::uint32_t connection_id_local_;
    ::uint32_t connection_state_;
    ::uint32_t start_time_;
    ::uint32_t close_time_;
    ::uint32_t close_reason_;
    ::uint32_t transport_kind_;
    ::uint32_t ping_interior_;
    ::uint32_t ping_remote_front_;
    ::uint32_t ping_default_internet_route_;
    ::uint64_t e2e_quality_remote_instantaneous_time_;
    ::uint64_t e2e_quality_remote_lifetime_time_;
    ::uint64_t front_quality_remote_instantaneous_time_;
    ::uint64_t front_quality_remote_lifetime_time_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fgamenetworkingui_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull CGameNetworkingUI_ConnectionState_class_data_;
// -------------------------------------------------------------------

class CGameNetworkingUI_Message final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:CGameNetworkingUI_Message) */ {
 public:
  inline CGameNetworkingUI_Message() : CGameNetworkingUI_Message(nullptr) {}
  ~CGameNetworkingUI_Message() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CGameNetworkingUI_Message* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CGameNetworkingUI_Message));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CGameNetworkingUI_Message(::google::protobuf::internal::ConstantInitialized);

  inline CGameNetworkingUI_Message(const CGameNetworkingUI_Message& from) : CGameNetworkingUI_Message(nullptr, from) {}
  inline CGameNetworkingUI_Message(CGameNetworkingUI_Message&& from) noexcept
      : CGameNetworkingUI_Message(nullptr, std::move(from)) {}
  inline CGameNetworkingUI_Message& operator=(const CGameNetworkingUI_Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline CGameNetworkingUI_Message& operator=(CGameNetworkingUI_Message&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CGameNetworkingUI_Message& default_instance() {
    return *reinterpret_cast<const CGameNetworkingUI_Message*>(
        &_CGameNetworkingUI_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(CGameNetworkingUI_Message& a, CGameNetworkingUI_Message& b) { a.Swap(&b); }
  inline void Swap(CGameNetworkingUI_Message* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CGameNetworkingUI_Message* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CGameNetworkingUI_Message* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CGameNetworkingUI_Message>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CGameNetworkingUI_Message& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CGameNetworkingUI_Message& from) { CGameNetworkingUI_Message::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CGameNetworkingUI_Message* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "CGameNetworkingUI_Message"; }

 protected:
  explicit CGameNetworkingUI_Message(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  CGameNetworkingUI_Message(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const CGameNetworkingUI_Message& from);
  CGameNetworkingUI_Message(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, CGameNetworkingUI_Message&& from) noexcept
      : CGameNetworkingUI_Message(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kConnectionStateFieldNumber = 1,
  };
  // repeated .CGameNetworkingUI_ConnectionState connection_state = 1;
  int connection_state_size() const;
  private:
  int _internal_connection_state_size() const;

  public:
  void clear_connection_state() ;
  ::CGameNetworkingUI_ConnectionState* PROTOBUF_NONNULL mutable_connection_state(int index);
  ::google::protobuf::RepeatedPtrField<::CGameNetworkingUI_ConnectionState>* PROTOBUF_NONNULL mutable_connection_state();

  private:
  const ::google::protobuf::RepeatedPtrField<::CGameNetworkingUI_ConnectionState>& _internal_connection_state() const;
  ::google::protobuf::RepeatedPtrField<::CGameNetworkingUI_ConnectionState>* PROTOBUF_NONNULL _internal_mutable_connection_state();
  public:
  const ::CGameNetworkingUI_ConnectionState& connection_state(int index) const;
  ::CGameNetworkingUI_ConnectionState* PROTOBUF_NONNULL add_connection_state();
  const ::google::protobuf::RepeatedPtrField<::CGameNetworkingUI_ConnectionState>& connection_state() const;
  // @@protoc_insertion_point(class_scope:CGameNetworkingUI_Message)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const CGameNetworkingUI_Message& from_msg);
    ::google::protobuf::RepeatedPtrField< ::CGameNetworkingUI_ConnectionState > connection_state_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steammessages_5fgamenetworkingui_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull CGameNetworkingUI_Message_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// CGameNetworkingUI_GlobalState

// -------------------------------------------------------------------

// CGameNetworkingUI_ConnectionState

// optional string connection_key = 1;
inline bool CGameNetworkingUI_ConnectionState::has_connection_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CGameNetworkingUI_ConnectionState::clear_connection_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.connection_key_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CGameNetworkingUI_ConnectionState::connection_key() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CGameNetworkingUI_ConnectionState.connection_key)
  return _internal_connection_key();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void CGameNetworkingUI_ConnectionState::set_connection_key(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.connection_key_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:CGameNetworkingUI_ConnectionState.connection_key)
}
inline std::string* PROTOBUF_NONNULL CGameNetworkingUI_ConnectionState::mutable_connection_key()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_connection_key();
  // @@protoc_insertion_point(field_mutable:CGameNetworkingUI_ConnectionState.connection_key)
  return _s;
}
inline const std::string& CGameNetworkingUI_ConnectionState::_internal_connection_key() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.connection_key_.Get();
}
inline void CGameNetworkingUI_ConnectionState::_internal_set_connection_key(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.connection_key_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL CGameNetworkingUI_ConnectionState::_internal_mutable_connection_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.connection_key_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE CGameNetworkingUI_ConnectionState::release_connection_key() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:CGameNetworkingUI_ConnectionState.connection_key)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.connection_key_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.connection_key_.Set("", GetArena());
  }
  return released;
}
inline void CGameNetworkingUI_ConnectionState::set_allocated_connection_key(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.connection_key_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.connection_key_.IsDefault()) {
    _impl_.connection_key_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:CGameNetworkingUI_ConnectionState.connection_key)
}

// optional uint32 appid = 2;
inline bool CGameNetworkingUI_ConnectionState::has_appid() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void CGameNetworkingUI_ConnectionState::clear_appid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.appid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline ::uint32_t CGameNetworkingUI_ConnectionState::appid() const {
  // @@protoc_insertion_point(field_get:CGameNetworkingUI_ConnectionState.appid)
  return _internal_appid();
}
inline void CGameNetworkingUI_ConnectionState::set_appid(::uint32_t value) {
  _internal_set_appid(value);
  _impl_._has_bits_[0] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:CGameNetworkingUI_ConnectionState.appid)
}
inline ::uint32_t CGameNetworkingUI_ConnectionState::_internal_appid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.appid_;
}
inline void CGameNetworkingUI_ConnectionState::_internal_set_appid(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.appid_ = value;
}

// optional fixed32 connection_id_local = 3;
inline bool CGameNetworkingUI_ConnectionState::has_connection_id_local() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void CGameNetworkingUI_ConnectionState::clear_connection_id_local() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.connection_id_local_ = 0u;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline ::uint32_t CGameNetworkingUI_ConnectionState::connection_id_local() const {
  // @@protoc_insertion_point(field_get:CGameNetworkingUI_ConnectionState.connection_id_local)
  return _internal_connection_id_local();
}
inline void CGameNetworkingUI_ConnectionState::set_connection_id_local(::uint32_t value) {
  _internal_set_connection_id_local(value);
  _impl_._has_bits_[0] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:CGameNetworkingUI_ConnectionState.connection_id_local)
}
inline ::uint32_t CGameNetworkingUI_ConnectionState::_internal_connection_id_local() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.connection_id_local_;
}
inline void CGameNetworkingUI_ConnectionState::_internal_set_connection_id_local(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.connection_id_local_ = value;
}

// optional string identity_local = 4;
inline bool CGameNetworkingUI_ConnectionState::has_identity_local() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void CGameNetworkingUI_ConnectionState::clear_identity_local() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.identity_local_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CGameNetworkingUI_ConnectionState::identity_local() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CGameNetworkingUI_ConnectionState.identity_local)
  return _internal_identity_local();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void CGameNetworkingUI_ConnectionState::set_identity_local(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.identity_local_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:CGameNetworkingUI_ConnectionState.identity_local)
}
inline std::string* PROTOBUF_NONNULL CGameNetworkingUI_ConnectionState::mutable_identity_local()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_identity_local();
  // @@protoc_insertion_point(field_mutable:CGameNetworkingUI_ConnectionState.identity_local)
  return _s;
}
inline const std::string& CGameNetworkingUI_ConnectionState::_internal_identity_local() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.identity_local_.Get();
}
inline void CGameNetworkingUI_ConnectionState::_internal_set_identity_local(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.identity_local_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL CGameNetworkingUI_ConnectionState::_internal_mutable_identity_local() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.identity_local_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE CGameNetworkingUI_ConnectionState::release_identity_local() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:CGameNetworkingUI_ConnectionState.identity_local)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.identity_local_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.identity_local_.Set("", GetArena());
  }
  return released;
}
inline void CGameNetworkingUI_ConnectionState::set_allocated_identity_local(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.identity_local_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.identity_local_.IsDefault()) {
    _impl_.identity_local_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:CGameNetworkingUI_ConnectionState.identity_local)
}

// optional string identity_remote = 5;
inline bool CGameNetworkingUI_ConnectionState::has_identity_remote() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void CGameNetworkingUI_ConnectionState::clear_identity_remote() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.identity_remote_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CGameNetworkingUI_ConnectionState::identity_remote() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CGameNetworkingUI_ConnectionState.identity_remote)
  return _internal_identity_remote();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void CGameNetworkingUI_ConnectionState::set_identity_remote(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.identity_remote_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:CGameNetworkingUI_ConnectionState.identity_remote)
}
inline std::string* PROTOBUF_NONNULL CGameNetworkingUI_ConnectionState::mutable_identity_remote()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_identity_remote();
  // @@protoc_insertion_point(field_mutable:CGameNetworkingUI_ConnectionState.identity_remote)
  return _s;
}
inline const std::string& CGameNetworkingUI_ConnectionState::_internal_identity_remote() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.identity_remote_.Get();
}
inline void CGameNetworkingUI_ConnectionState::_internal_set_identity_remote(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.identity_remote_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL CGameNetworkingUI_ConnectionState::_internal_mutable_identity_remote() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.identity_remote_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE CGameNetworkingUI_ConnectionState::release_identity_remote() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:CGameNetworkingUI_ConnectionState.identity_remote)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.identity_remote_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.identity_remote_.Set("", GetArena());
  }
  return released;
}
inline void CGameNetworkingUI_ConnectionState::set_allocated_identity_remote(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.identity_remote_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.identity_remote_.IsDefault()) {
    _impl_.identity_remote_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:CGameNetworkingUI_ConnectionState.identity_remote)
}

// optional uint32 connection_state = 10;
inline bool CGameNetworkingUI_ConnectionState::has_connection_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void CGameNetworkingUI_ConnectionState::clear_connection_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.connection_state_ = 0u;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline ::uint32_t CGameNetworkingUI_ConnectionState::connection_state() const {
  // @@protoc_insertion_point(field_get:CGameNetworkingUI_ConnectionState.connection_state)
  return _internal_connection_state();
}
inline void CGameNetworkingUI_ConnectionState::set_connection_state(::uint32_t value) {
  _internal_set_connection_state(value);
  _impl_._has_bits_[0] |= 0x00008000u;
  // @@protoc_insertion_point(field_set:CGameNetworkingUI_ConnectionState.connection_state)
}
inline ::uint32_t CGameNetworkingUI_ConnectionState::_internal_connection_state() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.connection_state_;
}
inline void CGameNetworkingUI_ConnectionState::_internal_set_connection_state(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.connection_state_ = value;
}

// optional uint32 start_time = 12;
inline bool CGameNetworkingUI_ConnectionState::has_start_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline void CGameNetworkingUI_ConnectionState::clear_start_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.start_time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline ::uint32_t CGameNetworkingUI_ConnectionState::start_time() const {
  // @@protoc_insertion_point(field_get:CGameNetworkingUI_ConnectionState.start_time)
  return _internal_start_time();
}
inline void CGameNetworkingUI_ConnectionState::set_start_time(::uint32_t value) {
  _internal_set_start_time(value);
  _impl_._has_bits_[0] |= 0x00010000u;
  // @@protoc_insertion_point(field_set:CGameNetworkingUI_ConnectionState.start_time)
}
inline ::uint32_t CGameNetworkingUI_ConnectionState::_internal_start_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.start_time_;
}
inline void CGameNetworkingUI_ConnectionState::_internal_set_start_time(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.start_time_ = value;
}

// optional uint32 close_time = 13;
inline bool CGameNetworkingUI_ConnectionState::has_close_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline void CGameNetworkingUI_ConnectionState::clear_close_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.close_time_ = 0u;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline ::uint32_t CGameNetworkingUI_ConnectionState::close_time() const {
  // @@protoc_insertion_point(field_get:CGameNetworkingUI_ConnectionState.close_time)
  return _internal_close_time();
}
inline void CGameNetworkingUI_ConnectionState::set_close_time(::uint32_t value) {
  _internal_set_close_time(value);
  _impl_._has_bits_[0] |= 0x00020000u;
  // @@protoc_insertion_point(field_set:CGameNetworkingUI_ConnectionState.close_time)
}
inline ::uint32_t CGameNetworkingUI_ConnectionState::_internal_close_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.close_time_;
}
inline void CGameNetworkingUI_ConnectionState::_internal_set_close_time(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.close_time_ = value;
}

// optional uint32 close_reason = 14;
inline bool CGameNetworkingUI_ConnectionState::has_close_reason() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline void CGameNetworkingUI_ConnectionState::clear_close_reason() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.close_reason_ = 0u;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline ::uint32_t CGameNetworkingUI_ConnectionState::close_reason() const {
  // @@protoc_insertion_point(field_get:CGameNetworkingUI_ConnectionState.close_reason)
  return _internal_close_reason();
}
inline void CGameNetworkingUI_ConnectionState::set_close_reason(::uint32_t value) {
  _internal_set_close_reason(value);
  _impl_._has_bits_[0] |= 0x00040000u;
  // @@protoc_insertion_point(field_set:CGameNetworkingUI_ConnectionState.close_reason)
}
inline ::uint32_t CGameNetworkingUI_ConnectionState::_internal_close_reason() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.close_reason_;
}
inline void CGameNetworkingUI_ConnectionState::_internal_set_close_reason(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.close_reason_ = value;
}

// optional string close_message = 15;
inline bool CGameNetworkingUI_ConnectionState::has_close_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void CGameNetworkingUI_ConnectionState::clear_close_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.close_message_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CGameNetworkingUI_ConnectionState::close_message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CGameNetworkingUI_ConnectionState.close_message)
  return _internal_close_message();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void CGameNetworkingUI_ConnectionState::set_close_message(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.close_message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:CGameNetworkingUI_ConnectionState.close_message)
}
inline std::string* PROTOBUF_NONNULL CGameNetworkingUI_ConnectionState::mutable_close_message()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_close_message();
  // @@protoc_insertion_point(field_mutable:CGameNetworkingUI_ConnectionState.close_message)
  return _s;
}
inline const std::string& CGameNetworkingUI_ConnectionState::_internal_close_message() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.close_message_.Get();
}
inline void CGameNetworkingUI_ConnectionState::_internal_set_close_message(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.close_message_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL CGameNetworkingUI_ConnectionState::_internal_mutable_close_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.close_message_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE CGameNetworkingUI_ConnectionState::release_close_message() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:CGameNetworkingUI_ConnectionState.close_message)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.close_message_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.close_message_.Set("", GetArena());
  }
  return released;
}
inline void CGameNetworkingUI_ConnectionState::set_allocated_close_message(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.close_message_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.close_message_.IsDefault()) {
    _impl_.close_message_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:CGameNetworkingUI_ConnectionState.close_message)
}

// optional string status_loc_token = 16;
inline bool CGameNetworkingUI_ConnectionState::has_status_loc_token() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void CGameNetworkingUI_ConnectionState::clear_status_loc_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_loc_token_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& CGameNetworkingUI_ConnectionState::status_loc_token() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CGameNetworkingUI_ConnectionState.status_loc_token)
  return _internal_status_loc_token();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void CGameNetworkingUI_ConnectionState::set_status_loc_token(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.status_loc_token_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:CGameNetworkingUI_ConnectionState.status_loc_token)
}
inline std::string* PROTOBUF_NONNULL CGameNetworkingUI_ConnectionState::mutable_status_loc_token()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_status_loc_token();
  // @@protoc_insertion_point(field_mutable:CGameNetworkingUI_ConnectionState.status_loc_token)
  return _s;
}
inline const std::string& CGameNetworkingUI_ConnectionState::_internal_status_loc_token() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.status_loc_token_.Get();
}
inline void CGameNetworkingUI_ConnectionState::_internal_set_status_loc_token(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.status_loc_token_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL CGameNetworkingUI_ConnectionState::_internal_mutable_status_loc_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.status_loc_token_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE CGameNetworkingUI_ConnectionState::release_status_loc_token() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:CGameNetworkingUI_ConnectionState.status_loc_token)
  if ((_impl_._has_bits_[0] & 0x00000010u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* released = _impl_.status_loc_token_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.status_loc_token_.Set("", GetArena());
  }
  return released;
}
inline void CGameNetworkingUI_ConnectionState::set_allocated_status_loc_token(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.status_loc_token_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.status_loc_token_.IsDefault()) {
    _impl_.status_loc_token_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:CGameNetworkingUI_ConnectionState.status_loc_token)
}

// optional uint32 transport_kind = 20;
inline bool CGameNetworkingUI_ConnectionState::has_transport_kind() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline void CGameNetworkingUI_ConnectionState::clear_transport_kind() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transport_kind_ = 0u;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline ::uint32_t CGameNetworkingUI_ConnectionState::transport_kind() const {
  // @@protoc_insertion_point(field_get:CGameNetworkingUI_ConnectionState.transport_kind)
  return _internal_transport_kind();
}
inline void CGameNetworkingUI_ConnectionState::set_transport_kind(::uint32_t value) {
  _internal_set_transport_kind(value);
  _impl_._has_bits_[0] |= 0x00080000u;
  // @@protoc_insertion_point(field_set:CGameNetworkingUI_ConnectionState.transport_kind)
}
inline ::uint32_t CGameNetworkingUI_ConnectionState::_internal_transport_kind() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.transport_kind_;
}
inline void CGameNetworkingUI_ConnectionState::_internal_set_transport_kind(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transport_kind_ = value;
}

// optional string sdrpopid_local = 21;
inline bool CGameNetworkingUI_ConnectionState::has_sdrpopid_local() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void CGameNetworkingUI_ConnectionState::clear_sdrpopid_local() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sdrpopid_local_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& CGameNetworkingUI_ConnectionState::sdrpopid_local() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CGameNetworkingUI_ConnectionState.sdrpopid_local)
  return _internal_sdrpopid_local();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void CGameNetworkingUI_ConnectionState::set_sdrpopid_local(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.sdrpopid_local_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:CGameNetworkingUI_ConnectionState.sdrpopid_local)
}
inline std::string* PROTOBUF_NONNULL CGameNetworkingUI_ConnectionState::mutable_sdrpopid_local()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_sdrpopid_local();
  // @@protoc_insertion_point(field_mutable:CGameNetworkingUI_ConnectionState.sdrpopid_local)
  return _s;
}
inline const std::string& CGameNetworkingUI_ConnectionState::_internal_sdrpopid_local() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sdrpopid_local_.Get();
}
inline void CGameNetworkingUI_ConnectionState::_internal_set_sdrpopid_local(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.sdrpopid_local_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL CGameNetworkingUI_ConnectionState::_internal_mutable_sdrpopid_local() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.sdrpopid_local_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE CGameNetworkingUI_ConnectionState::release_sdrpopid_local() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:CGameNetworkingUI_ConnectionState.sdrpopid_local)
  if ((_impl_._has_bits_[0] & 0x00000020u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* released = _impl_.sdrpopid_local_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.sdrpopid_local_.Set("", GetArena());
  }
  return released;
}
inline void CGameNetworkingUI_ConnectionState::set_allocated_sdrpopid_local(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.sdrpopid_local_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.sdrpopid_local_.IsDefault()) {
    _impl_.sdrpopid_local_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:CGameNetworkingUI_ConnectionState.sdrpopid_local)
}

// optional string sdrpopid_remote = 22;
inline bool CGameNetworkingUI_ConnectionState::has_sdrpopid_remote() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void CGameNetworkingUI_ConnectionState::clear_sdrpopid_remote() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sdrpopid_remote_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const std::string& CGameNetworkingUI_ConnectionState::sdrpopid_remote() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CGameNetworkingUI_ConnectionState.sdrpopid_remote)
  return _internal_sdrpopid_remote();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void CGameNetworkingUI_ConnectionState::set_sdrpopid_remote(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.sdrpopid_remote_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:CGameNetworkingUI_ConnectionState.sdrpopid_remote)
}
inline std::string* PROTOBUF_NONNULL CGameNetworkingUI_ConnectionState::mutable_sdrpopid_remote()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_sdrpopid_remote();
  // @@protoc_insertion_point(field_mutable:CGameNetworkingUI_ConnectionState.sdrpopid_remote)
  return _s;
}
inline const std::string& CGameNetworkingUI_ConnectionState::_internal_sdrpopid_remote() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sdrpopid_remote_.Get();
}
inline void CGameNetworkingUI_ConnectionState::_internal_set_sdrpopid_remote(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.sdrpopid_remote_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL CGameNetworkingUI_ConnectionState::_internal_mutable_sdrpopid_remote() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000040u;
  return _impl_.sdrpopid_remote_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE CGameNetworkingUI_ConnectionState::release_sdrpopid_remote() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:CGameNetworkingUI_ConnectionState.sdrpopid_remote)
  if ((_impl_._has_bits_[0] & 0x00000040u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000040u;
  auto* released = _impl_.sdrpopid_remote_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.sdrpopid_remote_.Set("", GetArena());
  }
  return released;
}
inline void CGameNetworkingUI_ConnectionState::set_allocated_sdrpopid_remote(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.sdrpopid_remote_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.sdrpopid_remote_.IsDefault()) {
    _impl_.sdrpopid_remote_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:CGameNetworkingUI_ConnectionState.sdrpopid_remote)
}

// optional string address_remote = 23;
inline bool CGameNetworkingUI_ConnectionState::has_address_remote() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void CGameNetworkingUI_ConnectionState::clear_address_remote() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.address_remote_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const std::string& CGameNetworkingUI_ConnectionState::address_remote() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CGameNetworkingUI_ConnectionState.address_remote)
  return _internal_address_remote();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void CGameNetworkingUI_ConnectionState::set_address_remote(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.address_remote_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:CGameNetworkingUI_ConnectionState.address_remote)
}
inline std::string* PROTOBUF_NONNULL CGameNetworkingUI_ConnectionState::mutable_address_remote()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_address_remote();
  // @@protoc_insertion_point(field_mutable:CGameNetworkingUI_ConnectionState.address_remote)
  return _s;
}
inline const std::string& CGameNetworkingUI_ConnectionState::_internal_address_remote() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.address_remote_.Get();
}
inline void CGameNetworkingUI_ConnectionState::_internal_set_address_remote(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.address_remote_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL CGameNetworkingUI_ConnectionState::_internal_mutable_address_remote() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000080u;
  return _impl_.address_remote_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE CGameNetworkingUI_ConnectionState::release_address_remote() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:CGameNetworkingUI_ConnectionState.address_remote)
  if ((_impl_._has_bits_[0] & 0x00000080u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000080u;
  auto* released = _impl_.address_remote_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.address_remote_.Set("", GetArena());
  }
  return released;
}
inline void CGameNetworkingUI_ConnectionState::set_allocated_address_remote(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.address_remote_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.address_remote_.IsDefault()) {
    _impl_.address_remote_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:CGameNetworkingUI_ConnectionState.address_remote)
}

// optional .CMsgSteamDatagramP2PRoutingSummary p2p_routing = 24;
inline bool CGameNetworkingUI_ConnectionState::has_p2p_routing() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.p2p_routing_ != nullptr);
  return value;
}
inline const ::CMsgSteamDatagramP2PRoutingSummary& CGameNetworkingUI_ConnectionState::_internal_p2p_routing() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::CMsgSteamDatagramP2PRoutingSummary* p = _impl_.p2p_routing_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgSteamDatagramP2PRoutingSummary&>(::_CMsgSteamDatagramP2PRoutingSummary_default_instance_);
}
inline const ::CMsgSteamDatagramP2PRoutingSummary& CGameNetworkingUI_ConnectionState::p2p_routing() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CGameNetworkingUI_ConnectionState.p2p_routing)
  return _internal_p2p_routing();
}
inline void CGameNetworkingUI_ConnectionState::unsafe_arena_set_allocated_p2p_routing(
    ::CMsgSteamDatagramP2PRoutingSummary* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.p2p_routing_);
  }
  _impl_.p2p_routing_ = reinterpret_cast<::CMsgSteamDatagramP2PRoutingSummary*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CGameNetworkingUI_ConnectionState.p2p_routing)
}
inline ::CMsgSteamDatagramP2PRoutingSummary* PROTOBUF_NULLABLE CGameNetworkingUI_ConnectionState::release_p2p_routing() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::CMsgSteamDatagramP2PRoutingSummary* released = _impl_.p2p_routing_;
  _impl_.p2p_routing_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::CMsgSteamDatagramP2PRoutingSummary* PROTOBUF_NULLABLE CGameNetworkingUI_ConnectionState::unsafe_arena_release_p2p_routing() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:CGameNetworkingUI_ConnectionState.p2p_routing)

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::CMsgSteamDatagramP2PRoutingSummary* temp = _impl_.p2p_routing_;
  _impl_.p2p_routing_ = nullptr;
  return temp;
}
inline ::CMsgSteamDatagramP2PRoutingSummary* PROTOBUF_NONNULL CGameNetworkingUI_ConnectionState::_internal_mutable_p2p_routing() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.p2p_routing_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::CMsgSteamDatagramP2PRoutingSummary>(GetArena());
    _impl_.p2p_routing_ = reinterpret_cast<::CMsgSteamDatagramP2PRoutingSummary*>(p);
  }
  return _impl_.p2p_routing_;
}
inline ::CMsgSteamDatagramP2PRoutingSummary* PROTOBUF_NONNULL CGameNetworkingUI_ConnectionState::mutable_p2p_routing()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000100u;
  ::CMsgSteamDatagramP2PRoutingSummary* _msg = _internal_mutable_p2p_routing();
  // @@protoc_insertion_point(field_mutable:CGameNetworkingUI_ConnectionState.p2p_routing)
  return _msg;
}
inline void CGameNetworkingUI_ConnectionState::set_allocated_p2p_routing(::CMsgSteamDatagramP2PRoutingSummary* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.p2p_routing_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }

  _impl_.p2p_routing_ = reinterpret_cast<::CMsgSteamDatagramP2PRoutingSummary*>(value);
  // @@protoc_insertion_point(field_set_allocated:CGameNetworkingUI_ConnectionState.p2p_routing)
}

// optional uint32 ping_interior = 25;
inline bool CGameNetworkingUI_ConnectionState::has_ping_interior() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline void CGameNetworkingUI_ConnectionState::clear_ping_interior() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ping_interior_ = 0u;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline ::uint32_t CGameNetworkingUI_ConnectionState::ping_interior() const {
  // @@protoc_insertion_point(field_get:CGameNetworkingUI_ConnectionState.ping_interior)
  return _internal_ping_interior();
}
inline void CGameNetworkingUI_ConnectionState::set_ping_interior(::uint32_t value) {
  _internal_set_ping_interior(value);
  _impl_._has_bits_[0] |= 0x00100000u;
  // @@protoc_insertion_point(field_set:CGameNetworkingUI_ConnectionState.ping_interior)
}
inline ::uint32_t CGameNetworkingUI_ConnectionState::_internal_ping_interior() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ping_interior_;
}
inline void CGameNetworkingUI_ConnectionState::_internal_set_ping_interior(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ping_interior_ = value;
}

// optional uint32 ping_remote_front = 26;
inline bool CGameNetworkingUI_ConnectionState::has_ping_remote_front() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline void CGameNetworkingUI_ConnectionState::clear_ping_remote_front() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ping_remote_front_ = 0u;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline ::uint32_t CGameNetworkingUI_ConnectionState::ping_remote_front() const {
  // @@protoc_insertion_point(field_get:CGameNetworkingUI_ConnectionState.ping_remote_front)
  return _internal_ping_remote_front();
}
inline void CGameNetworkingUI_ConnectionState::set_ping_remote_front(::uint32_t value) {
  _internal_set_ping_remote_front(value);
  _impl_._has_bits_[0] |= 0x00200000u;
  // @@protoc_insertion_point(field_set:CGameNetworkingUI_ConnectionState.ping_remote_front)
}
inline ::uint32_t CGameNetworkingUI_ConnectionState::_internal_ping_remote_front() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ping_remote_front_;
}
inline void CGameNetworkingUI_ConnectionState::_internal_set_ping_remote_front(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ping_remote_front_ = value;
}

// optional uint32 ping_default_internet_route = 27;
inline bool CGameNetworkingUI_ConnectionState::has_ping_default_internet_route() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline void CGameNetworkingUI_ConnectionState::clear_ping_default_internet_route() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ping_default_internet_route_ = 0u;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline ::uint32_t CGameNetworkingUI_ConnectionState::ping_default_internet_route() const {
  // @@protoc_insertion_point(field_get:CGameNetworkingUI_ConnectionState.ping_default_internet_route)
  return _internal_ping_default_internet_route();
}
inline void CGameNetworkingUI_ConnectionState::set_ping_default_internet_route(::uint32_t value) {
  _internal_set_ping_default_internet_route(value);
  _impl_._has_bits_[0] |= 0x00400000u;
  // @@protoc_insertion_point(field_set:CGameNetworkingUI_ConnectionState.ping_default_internet_route)
}
inline ::uint32_t CGameNetworkingUI_ConnectionState::_internal_ping_default_internet_route() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ping_default_internet_route_;
}
inline void CGameNetworkingUI_ConnectionState::_internal_set_ping_default_internet_route(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ping_default_internet_route_ = value;
}

// optional .CMsgSteamDatagramConnectionQuality e2e_quality_local = 30;
inline bool CGameNetworkingUI_ConnectionState::has_e2e_quality_local() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.e2e_quality_local_ != nullptr);
  return value;
}
inline const ::CMsgSteamDatagramConnectionQuality& CGameNetworkingUI_ConnectionState::_internal_e2e_quality_local() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::CMsgSteamDatagramConnectionQuality* p = _impl_.e2e_quality_local_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgSteamDatagramConnectionQuality&>(::_CMsgSteamDatagramConnectionQuality_default_instance_);
}
inline const ::CMsgSteamDatagramConnectionQuality& CGameNetworkingUI_ConnectionState::e2e_quality_local() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CGameNetworkingUI_ConnectionState.e2e_quality_local)
  return _internal_e2e_quality_local();
}
inline void CGameNetworkingUI_ConnectionState::unsafe_arena_set_allocated_e2e_quality_local(
    ::CMsgSteamDatagramConnectionQuality* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.e2e_quality_local_);
  }
  _impl_.e2e_quality_local_ = reinterpret_cast<::CMsgSteamDatagramConnectionQuality*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CGameNetworkingUI_ConnectionState.e2e_quality_local)
}
inline ::CMsgSteamDatagramConnectionQuality* PROTOBUF_NULLABLE CGameNetworkingUI_ConnectionState::release_e2e_quality_local() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000200u;
  ::CMsgSteamDatagramConnectionQuality* released = _impl_.e2e_quality_local_;
  _impl_.e2e_quality_local_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::CMsgSteamDatagramConnectionQuality* PROTOBUF_NULLABLE CGameNetworkingUI_ConnectionState::unsafe_arena_release_e2e_quality_local() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:CGameNetworkingUI_ConnectionState.e2e_quality_local)

  _impl_._has_bits_[0] &= ~0x00000200u;
  ::CMsgSteamDatagramConnectionQuality* temp = _impl_.e2e_quality_local_;
  _impl_.e2e_quality_local_ = nullptr;
  return temp;
}
inline ::CMsgSteamDatagramConnectionQuality* PROTOBUF_NONNULL CGameNetworkingUI_ConnectionState::_internal_mutable_e2e_quality_local() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.e2e_quality_local_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::CMsgSteamDatagramConnectionQuality>(GetArena());
    _impl_.e2e_quality_local_ = reinterpret_cast<::CMsgSteamDatagramConnectionQuality*>(p);
  }
  return _impl_.e2e_quality_local_;
}
inline ::CMsgSteamDatagramConnectionQuality* PROTOBUF_NONNULL CGameNetworkingUI_ConnectionState::mutable_e2e_quality_local()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000200u;
  ::CMsgSteamDatagramConnectionQuality* _msg = _internal_mutable_e2e_quality_local();
  // @@protoc_insertion_point(field_mutable:CGameNetworkingUI_ConnectionState.e2e_quality_local)
  return _msg;
}
inline void CGameNetworkingUI_ConnectionState::set_allocated_e2e_quality_local(::CMsgSteamDatagramConnectionQuality* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.e2e_quality_local_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }

  _impl_.e2e_quality_local_ = reinterpret_cast<::CMsgSteamDatagramConnectionQuality*>(value);
  // @@protoc_insertion_point(field_set_allocated:CGameNetworkingUI_ConnectionState.e2e_quality_local)
}

// optional .CMsgSteamDatagramConnectionQuality e2e_quality_remote = 31;
inline bool CGameNetworkingUI_ConnectionState::has_e2e_quality_remote() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.e2e_quality_remote_ != nullptr);
  return value;
}
inline const ::CMsgSteamDatagramConnectionQuality& CGameNetworkingUI_ConnectionState::_internal_e2e_quality_remote() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::CMsgSteamDatagramConnectionQuality* p = _impl_.e2e_quality_remote_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgSteamDatagramConnectionQuality&>(::_CMsgSteamDatagramConnectionQuality_default_instance_);
}
inline const ::CMsgSteamDatagramConnectionQuality& CGameNetworkingUI_ConnectionState::e2e_quality_remote() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CGameNetworkingUI_ConnectionState.e2e_quality_remote)
  return _internal_e2e_quality_remote();
}
inline void CGameNetworkingUI_ConnectionState::unsafe_arena_set_allocated_e2e_quality_remote(
    ::CMsgSteamDatagramConnectionQuality* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.e2e_quality_remote_);
  }
  _impl_.e2e_quality_remote_ = reinterpret_cast<::CMsgSteamDatagramConnectionQuality*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CGameNetworkingUI_ConnectionState.e2e_quality_remote)
}
inline ::CMsgSteamDatagramConnectionQuality* PROTOBUF_NULLABLE CGameNetworkingUI_ConnectionState::release_e2e_quality_remote() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000400u;
  ::CMsgSteamDatagramConnectionQuality* released = _impl_.e2e_quality_remote_;
  _impl_.e2e_quality_remote_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::CMsgSteamDatagramConnectionQuality* PROTOBUF_NULLABLE CGameNetworkingUI_ConnectionState::unsafe_arena_release_e2e_quality_remote() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:CGameNetworkingUI_ConnectionState.e2e_quality_remote)

  _impl_._has_bits_[0] &= ~0x00000400u;
  ::CMsgSteamDatagramConnectionQuality* temp = _impl_.e2e_quality_remote_;
  _impl_.e2e_quality_remote_ = nullptr;
  return temp;
}
inline ::CMsgSteamDatagramConnectionQuality* PROTOBUF_NONNULL CGameNetworkingUI_ConnectionState::_internal_mutable_e2e_quality_remote() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.e2e_quality_remote_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::CMsgSteamDatagramConnectionQuality>(GetArena());
    _impl_.e2e_quality_remote_ = reinterpret_cast<::CMsgSteamDatagramConnectionQuality*>(p);
  }
  return _impl_.e2e_quality_remote_;
}
inline ::CMsgSteamDatagramConnectionQuality* PROTOBUF_NONNULL CGameNetworkingUI_ConnectionState::mutable_e2e_quality_remote()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000400u;
  ::CMsgSteamDatagramConnectionQuality* _msg = _internal_mutable_e2e_quality_remote();
  // @@protoc_insertion_point(field_mutable:CGameNetworkingUI_ConnectionState.e2e_quality_remote)
  return _msg;
}
inline void CGameNetworkingUI_ConnectionState::set_allocated_e2e_quality_remote(::CMsgSteamDatagramConnectionQuality* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.e2e_quality_remote_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }

  _impl_.e2e_quality_remote_ = reinterpret_cast<::CMsgSteamDatagramConnectionQuality*>(value);
  // @@protoc_insertion_point(field_set_allocated:CGameNetworkingUI_ConnectionState.e2e_quality_remote)
}

// optional uint64 e2e_quality_remote_instantaneous_time = 32;
inline bool CGameNetworkingUI_ConnectionState::has_e2e_quality_remote_instantaneous_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline void CGameNetworkingUI_ConnectionState::clear_e2e_quality_remote_instantaneous_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.e2e_quality_remote_instantaneous_time_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline ::uint64_t CGameNetworkingUI_ConnectionState::e2e_quality_remote_instantaneous_time() const {
  // @@protoc_insertion_point(field_get:CGameNetworkingUI_ConnectionState.e2e_quality_remote_instantaneous_time)
  return _internal_e2e_quality_remote_instantaneous_time();
}
inline void CGameNetworkingUI_ConnectionState::set_e2e_quality_remote_instantaneous_time(::uint64_t value) {
  _internal_set_e2e_quality_remote_instantaneous_time(value);
  _impl_._has_bits_[0] |= 0x00800000u;
  // @@protoc_insertion_point(field_set:CGameNetworkingUI_ConnectionState.e2e_quality_remote_instantaneous_time)
}
inline ::uint64_t CGameNetworkingUI_ConnectionState::_internal_e2e_quality_remote_instantaneous_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.e2e_quality_remote_instantaneous_time_;
}
inline void CGameNetworkingUI_ConnectionState::_internal_set_e2e_quality_remote_instantaneous_time(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.e2e_quality_remote_instantaneous_time_ = value;
}

// optional uint64 e2e_quality_remote_lifetime_time = 33;
inline bool CGameNetworkingUI_ConnectionState::has_e2e_quality_remote_lifetime_time() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline void CGameNetworkingUI_ConnectionState::clear_e2e_quality_remote_lifetime_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.e2e_quality_remote_lifetime_time_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline ::uint64_t CGameNetworkingUI_ConnectionState::e2e_quality_remote_lifetime_time() const {
  // @@protoc_insertion_point(field_get:CGameNetworkingUI_ConnectionState.e2e_quality_remote_lifetime_time)
  return _internal_e2e_quality_remote_lifetime_time();
}
inline void CGameNetworkingUI_ConnectionState::set_e2e_quality_remote_lifetime_time(::uint64_t value) {
  _internal_set_e2e_quality_remote_lifetime_time(value);
  _impl_._has_bits_[0] |= 0x01000000u;
  // @@protoc_insertion_point(field_set:CGameNetworkingUI_ConnectionState.e2e_quality_remote_lifetime_time)
}
inline ::uint64_t CGameNetworkingUI_ConnectionState::_internal_e2e_quality_remote_lifetime_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.e2e_quality_remote_lifetime_time_;
}
inline void CGameNetworkingUI_ConnectionState::_internal_set_e2e_quality_remote_lifetime_time(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.e2e_quality_remote_lifetime_time_ = value;
}

// optional .CMsgSteamDatagramConnectionQuality front_quality_local = 40;
inline bool CGameNetworkingUI_ConnectionState::has_front_quality_local() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.front_quality_local_ != nullptr);
  return value;
}
inline const ::CMsgSteamDatagramConnectionQuality& CGameNetworkingUI_ConnectionState::_internal_front_quality_local() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::CMsgSteamDatagramConnectionQuality* p = _impl_.front_quality_local_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgSteamDatagramConnectionQuality&>(::_CMsgSteamDatagramConnectionQuality_default_instance_);
}
inline const ::CMsgSteamDatagramConnectionQuality& CGameNetworkingUI_ConnectionState::front_quality_local() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CGameNetworkingUI_ConnectionState.front_quality_local)
  return _internal_front_quality_local();
}
inline void CGameNetworkingUI_ConnectionState::unsafe_arena_set_allocated_front_quality_local(
    ::CMsgSteamDatagramConnectionQuality* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.front_quality_local_);
  }
  _impl_.front_quality_local_ = reinterpret_cast<::CMsgSteamDatagramConnectionQuality*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CGameNetworkingUI_ConnectionState.front_quality_local)
}
inline ::CMsgSteamDatagramConnectionQuality* PROTOBUF_NULLABLE CGameNetworkingUI_ConnectionState::release_front_quality_local() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000800u;
  ::CMsgSteamDatagramConnectionQuality* released = _impl_.front_quality_local_;
  _impl_.front_quality_local_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::CMsgSteamDatagramConnectionQuality* PROTOBUF_NULLABLE CGameNetworkingUI_ConnectionState::unsafe_arena_release_front_quality_local() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:CGameNetworkingUI_ConnectionState.front_quality_local)

  _impl_._has_bits_[0] &= ~0x00000800u;
  ::CMsgSteamDatagramConnectionQuality* temp = _impl_.front_quality_local_;
  _impl_.front_quality_local_ = nullptr;
  return temp;
}
inline ::CMsgSteamDatagramConnectionQuality* PROTOBUF_NONNULL CGameNetworkingUI_ConnectionState::_internal_mutable_front_quality_local() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.front_quality_local_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::CMsgSteamDatagramConnectionQuality>(GetArena());
    _impl_.front_quality_local_ = reinterpret_cast<::CMsgSteamDatagramConnectionQuality*>(p);
  }
  return _impl_.front_quality_local_;
}
inline ::CMsgSteamDatagramConnectionQuality* PROTOBUF_NONNULL CGameNetworkingUI_ConnectionState::mutable_front_quality_local()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000800u;
  ::CMsgSteamDatagramConnectionQuality* _msg = _internal_mutable_front_quality_local();
  // @@protoc_insertion_point(field_mutable:CGameNetworkingUI_ConnectionState.front_quality_local)
  return _msg;
}
inline void CGameNetworkingUI_ConnectionState::set_allocated_front_quality_local(::CMsgSteamDatagramConnectionQuality* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.front_quality_local_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }

  _impl_.front_quality_local_ = reinterpret_cast<::CMsgSteamDatagramConnectionQuality*>(value);
  // @@protoc_insertion_point(field_set_allocated:CGameNetworkingUI_ConnectionState.front_quality_local)
}

// optional .CMsgSteamDatagramConnectionQuality front_quality_remote = 41;
inline bool CGameNetworkingUI_ConnectionState::has_front_quality_remote() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.front_quality_remote_ != nullptr);
  return value;
}
inline const ::CMsgSteamDatagramConnectionQuality& CGameNetworkingUI_ConnectionState::_internal_front_quality_remote() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::CMsgSteamDatagramConnectionQuality* p = _impl_.front_quality_remote_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgSteamDatagramConnectionQuality&>(::_CMsgSteamDatagramConnectionQuality_default_instance_);
}
inline const ::CMsgSteamDatagramConnectionQuality& CGameNetworkingUI_ConnectionState::front_quality_remote() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CGameNetworkingUI_ConnectionState.front_quality_remote)
  return _internal_front_quality_remote();
}
inline void CGameNetworkingUI_ConnectionState::unsafe_arena_set_allocated_front_quality_remote(
    ::CMsgSteamDatagramConnectionQuality* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.front_quality_remote_);
  }
  _impl_.front_quality_remote_ = reinterpret_cast<::CMsgSteamDatagramConnectionQuality*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CGameNetworkingUI_ConnectionState.front_quality_remote)
}
inline ::CMsgSteamDatagramConnectionQuality* PROTOBUF_NULLABLE CGameNetworkingUI_ConnectionState::release_front_quality_remote() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00001000u;
  ::CMsgSteamDatagramConnectionQuality* released = _impl_.front_quality_remote_;
  _impl_.front_quality_remote_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::CMsgSteamDatagramConnectionQuality* PROTOBUF_NULLABLE CGameNetworkingUI_ConnectionState::unsafe_arena_release_front_quality_remote() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:CGameNetworkingUI_ConnectionState.front_quality_remote)

  _impl_._has_bits_[0] &= ~0x00001000u;
  ::CMsgSteamDatagramConnectionQuality* temp = _impl_.front_quality_remote_;
  _impl_.front_quality_remote_ = nullptr;
  return temp;
}
inline ::CMsgSteamDatagramConnectionQuality* PROTOBUF_NONNULL CGameNetworkingUI_ConnectionState::_internal_mutable_front_quality_remote() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.front_quality_remote_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::CMsgSteamDatagramConnectionQuality>(GetArena());
    _impl_.front_quality_remote_ = reinterpret_cast<::CMsgSteamDatagramConnectionQuality*>(p);
  }
  return _impl_.front_quality_remote_;
}
inline ::CMsgSteamDatagramConnectionQuality* PROTOBUF_NONNULL CGameNetworkingUI_ConnectionState::mutable_front_quality_remote()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00001000u;
  ::CMsgSteamDatagramConnectionQuality* _msg = _internal_mutable_front_quality_remote();
  // @@protoc_insertion_point(field_mutable:CGameNetworkingUI_ConnectionState.front_quality_remote)
  return _msg;
}
inline void CGameNetworkingUI_ConnectionState::set_allocated_front_quality_remote(::CMsgSteamDatagramConnectionQuality* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.front_quality_remote_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }

  _impl_.front_quality_remote_ = reinterpret_cast<::CMsgSteamDatagramConnectionQuality*>(value);
  // @@protoc_insertion_point(field_set_allocated:CGameNetworkingUI_ConnectionState.front_quality_remote)
}

// optional uint64 front_quality_remote_instantaneous_time = 42;
inline bool CGameNetworkingUI_ConnectionState::has_front_quality_remote_instantaneous_time() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline void CGameNetworkingUI_ConnectionState::clear_front_quality_remote_instantaneous_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.front_quality_remote_instantaneous_time_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline ::uint64_t CGameNetworkingUI_ConnectionState::front_quality_remote_instantaneous_time() const {
  // @@protoc_insertion_point(field_get:CGameNetworkingUI_ConnectionState.front_quality_remote_instantaneous_time)
  return _internal_front_quality_remote_instantaneous_time();
}
inline void CGameNetworkingUI_ConnectionState::set_front_quality_remote_instantaneous_time(::uint64_t value) {
  _internal_set_front_quality_remote_instantaneous_time(value);
  _impl_._has_bits_[0] |= 0x02000000u;
  // @@protoc_insertion_point(field_set:CGameNetworkingUI_ConnectionState.front_quality_remote_instantaneous_time)
}
inline ::uint64_t CGameNetworkingUI_ConnectionState::_internal_front_quality_remote_instantaneous_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.front_quality_remote_instantaneous_time_;
}
inline void CGameNetworkingUI_ConnectionState::_internal_set_front_quality_remote_instantaneous_time(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.front_quality_remote_instantaneous_time_ = value;
}

// optional uint64 front_quality_remote_lifetime_time = 43;
inline bool CGameNetworkingUI_ConnectionState::has_front_quality_remote_lifetime_time() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline void CGameNetworkingUI_ConnectionState::clear_front_quality_remote_lifetime_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.front_quality_remote_lifetime_time_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline ::uint64_t CGameNetworkingUI_ConnectionState::front_quality_remote_lifetime_time() const {
  // @@protoc_insertion_point(field_get:CGameNetworkingUI_ConnectionState.front_quality_remote_lifetime_time)
  return _internal_front_quality_remote_lifetime_time();
}
inline void CGameNetworkingUI_ConnectionState::set_front_quality_remote_lifetime_time(::uint64_t value) {
  _internal_set_front_quality_remote_lifetime_time(value);
  _impl_._has_bits_[0] |= 0x04000000u;
  // @@protoc_insertion_point(field_set:CGameNetworkingUI_ConnectionState.front_quality_remote_lifetime_time)
}
inline ::uint64_t CGameNetworkingUI_ConnectionState::_internal_front_quality_remote_lifetime_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.front_quality_remote_lifetime_time_;
}
inline void CGameNetworkingUI_ConnectionState::_internal_set_front_quality_remote_lifetime_time(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.front_quality_remote_lifetime_time_ = value;
}

// -------------------------------------------------------------------

// CGameNetworkingUI_Message

// repeated .CGameNetworkingUI_ConnectionState connection_state = 1;
inline int CGameNetworkingUI_Message::_internal_connection_state_size() const {
  return _internal_connection_state().size();
}
inline int CGameNetworkingUI_Message::connection_state_size() const {
  return _internal_connection_state_size();
}
inline void CGameNetworkingUI_Message::clear_connection_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.connection_state_.Clear();
}
inline ::CGameNetworkingUI_ConnectionState* PROTOBUF_NONNULL CGameNetworkingUI_Message::mutable_connection_state(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:CGameNetworkingUI_Message.connection_state)
  return _internal_mutable_connection_state()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::CGameNetworkingUI_ConnectionState>* PROTOBUF_NONNULL CGameNetworkingUI_Message::mutable_connection_state()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:CGameNetworkingUI_Message.connection_state)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_connection_state();
}
inline const ::CGameNetworkingUI_ConnectionState& CGameNetworkingUI_Message::connection_state(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CGameNetworkingUI_Message.connection_state)
  return _internal_connection_state().Get(index);
}
inline ::CGameNetworkingUI_ConnectionState* PROTOBUF_NONNULL CGameNetworkingUI_Message::add_connection_state()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::CGameNetworkingUI_ConnectionState* _add = _internal_mutable_connection_state()->Add();
  // @@protoc_insertion_point(field_add:CGameNetworkingUI_Message.connection_state)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::CGameNetworkingUI_ConnectionState>& CGameNetworkingUI_Message::connection_state() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:CGameNetworkingUI_Message.connection_state)
  return _internal_connection_state();
}
inline const ::google::protobuf::RepeatedPtrField<::CGameNetworkingUI_ConnectionState>&
CGameNetworkingUI_Message::_internal_connection_state() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.connection_state_;
}
inline ::google::protobuf::RepeatedPtrField<::CGameNetworkingUI_ConnectionState>* PROTOBUF_NONNULL
CGameNetworkingUI_Message::_internal_mutable_connection_state() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.connection_state_;
}

// -------------------------------------------------------------------

// CGameNetworkingUI_ConnectionSummary

// optional uint32 transport_kind = 1;
inline bool CGameNetworkingUI_ConnectionSummary::has_transport_kind() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void CGameNetworkingUI_ConnectionSummary::clear_transport_kind() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transport_kind_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t CGameNetworkingUI_ConnectionSummary::transport_kind() const {
  // @@protoc_insertion_point(field_get:CGameNetworkingUI_ConnectionSummary.transport_kind)
  return _internal_transport_kind();
}
inline void CGameNetworkingUI_ConnectionSummary::set_transport_kind(::uint32_t value) {
  _internal_set_transport_kind(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:CGameNetworkingUI_ConnectionSummary.transport_kind)
}
inline ::uint32_t CGameNetworkingUI_ConnectionSummary::_internal_transport_kind() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.transport_kind_;
}
inline void CGameNetworkingUI_ConnectionSummary::_internal_set_transport_kind(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.transport_kind_ = value;
}

// optional uint32 connection_state = 8;
inline bool CGameNetworkingUI_ConnectionSummary::has_connection_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void CGameNetworkingUI_ConnectionSummary::clear_connection_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.connection_state_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::uint32_t CGameNetworkingUI_ConnectionSummary::connection_state() const {
  // @@protoc_insertion_point(field_get:CGameNetworkingUI_ConnectionSummary.connection_state)
  return _internal_connection_state();
}
inline void CGameNetworkingUI_ConnectionSummary::set_connection_state(::uint32_t value) {
  _internal_set_connection_state(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:CGameNetworkingUI_ConnectionSummary.connection_state)
}
inline ::uint32_t CGameNetworkingUI_ConnectionSummary::_internal_connection_state() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.connection_state_;
}
inline void CGameNetworkingUI_ConnectionSummary::_internal_set_connection_state(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.connection_state_ = value;
}

// optional string sdrpop_local = 2;
inline bool CGameNetworkingUI_ConnectionSummary::has_sdrpop_local() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CGameNetworkingUI_ConnectionSummary::clear_sdrpop_local() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sdrpop_local_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CGameNetworkingUI_ConnectionSummary::sdrpop_local() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CGameNetworkingUI_ConnectionSummary.sdrpop_local)
  return _internal_sdrpop_local();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void CGameNetworkingUI_ConnectionSummary::set_sdrpop_local(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.sdrpop_local_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:CGameNetworkingUI_ConnectionSummary.sdrpop_local)
}
inline std::string* PROTOBUF_NONNULL CGameNetworkingUI_ConnectionSummary::mutable_sdrpop_local()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_sdrpop_local();
  // @@protoc_insertion_point(field_mutable:CGameNetworkingUI_ConnectionSummary.sdrpop_local)
  return _s;
}
inline const std::string& CGameNetworkingUI_ConnectionSummary::_internal_sdrpop_local() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sdrpop_local_.Get();
}
inline void CGameNetworkingUI_ConnectionSummary::_internal_set_sdrpop_local(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.sdrpop_local_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL CGameNetworkingUI_ConnectionSummary::_internal_mutable_sdrpop_local() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.sdrpop_local_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE CGameNetworkingUI_ConnectionSummary::release_sdrpop_local() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:CGameNetworkingUI_ConnectionSummary.sdrpop_local)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.sdrpop_local_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.sdrpop_local_.Set("", GetArena());
  }
  return released;
}
inline void CGameNetworkingUI_ConnectionSummary::set_allocated_sdrpop_local(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.sdrpop_local_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.sdrpop_local_.IsDefault()) {
    _impl_.sdrpop_local_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:CGameNetworkingUI_ConnectionSummary.sdrpop_local)
}

// optional string sdrpop_remote = 3;
inline bool CGameNetworkingUI_ConnectionSummary::has_sdrpop_remote() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void CGameNetworkingUI_ConnectionSummary::clear_sdrpop_remote() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sdrpop_remote_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CGameNetworkingUI_ConnectionSummary::sdrpop_remote() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CGameNetworkingUI_ConnectionSummary.sdrpop_remote)
  return _internal_sdrpop_remote();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void CGameNetworkingUI_ConnectionSummary::set_sdrpop_remote(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.sdrpop_remote_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:CGameNetworkingUI_ConnectionSummary.sdrpop_remote)
}
inline std::string* PROTOBUF_NONNULL CGameNetworkingUI_ConnectionSummary::mutable_sdrpop_remote()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_sdrpop_remote();
  // @@protoc_insertion_point(field_mutable:CGameNetworkingUI_ConnectionSummary.sdrpop_remote)
  return _s;
}
inline const std::string& CGameNetworkingUI_ConnectionSummary::_internal_sdrpop_remote() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sdrpop_remote_.Get();
}
inline void CGameNetworkingUI_ConnectionSummary::_internal_set_sdrpop_remote(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.sdrpop_remote_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL CGameNetworkingUI_ConnectionSummary::_internal_mutable_sdrpop_remote() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.sdrpop_remote_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE CGameNetworkingUI_ConnectionSummary::release_sdrpop_remote() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:CGameNetworkingUI_ConnectionSummary.sdrpop_remote)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.sdrpop_remote_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.sdrpop_remote_.Set("", GetArena());
  }
  return released;
}
inline void CGameNetworkingUI_ConnectionSummary::set_allocated_sdrpop_remote(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.sdrpop_remote_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.sdrpop_remote_.IsDefault()) {
    _impl_.sdrpop_remote_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:CGameNetworkingUI_ConnectionSummary.sdrpop_remote)
}

// optional uint32 ping_ms = 4;
inline bool CGameNetworkingUI_ConnectionSummary::has_ping_ms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void CGameNetworkingUI_ConnectionSummary::clear_ping_ms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ping_ms_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t CGameNetworkingUI_ConnectionSummary::ping_ms() const {
  // @@protoc_insertion_point(field_get:CGameNetworkingUI_ConnectionSummary.ping_ms)
  return _internal_ping_ms();
}
inline void CGameNetworkingUI_ConnectionSummary::set_ping_ms(::uint32_t value) {
  _internal_set_ping_ms(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:CGameNetworkingUI_ConnectionSummary.ping_ms)
}
inline ::uint32_t CGameNetworkingUI_ConnectionSummary::_internal_ping_ms() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ping_ms_;
}
inline void CGameNetworkingUI_ConnectionSummary::_internal_set_ping_ms(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ping_ms_ = value;
}

// optional float packet_loss = 5;
inline bool CGameNetworkingUI_ConnectionSummary::has_packet_loss() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void CGameNetworkingUI_ConnectionSummary::clear_packet_loss() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.packet_loss_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float CGameNetworkingUI_ConnectionSummary::packet_loss() const {
  // @@protoc_insertion_point(field_get:CGameNetworkingUI_ConnectionSummary.packet_loss)
  return _internal_packet_loss();
}
inline void CGameNetworkingUI_ConnectionSummary::set_packet_loss(float value) {
  _internal_set_packet_loss(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:CGameNetworkingUI_ConnectionSummary.packet_loss)
}
inline float CGameNetworkingUI_ConnectionSummary::_internal_packet_loss() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.packet_loss_;
}
inline void CGameNetworkingUI_ConnectionSummary::_internal_set_packet_loss(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.packet_loss_ = value;
}

// optional uint32 ping_default_internet_route = 6;
inline bool CGameNetworkingUI_ConnectionSummary::has_ping_default_internet_route() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void CGameNetworkingUI_ConnectionSummary::clear_ping_default_internet_route() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ping_default_internet_route_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint32_t CGameNetworkingUI_ConnectionSummary::ping_default_internet_route() const {
  // @@protoc_insertion_point(field_get:CGameNetworkingUI_ConnectionSummary.ping_default_internet_route)
  return _internal_ping_default_internet_route();
}
inline void CGameNetworkingUI_ConnectionSummary::set_ping_default_internet_route(::uint32_t value) {
  _internal_set_ping_default_internet_route(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:CGameNetworkingUI_ConnectionSummary.ping_default_internet_route)
}
inline ::uint32_t CGameNetworkingUI_ConnectionSummary::_internal_ping_default_internet_route() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ping_default_internet_route_;
}
inline void CGameNetworkingUI_ConnectionSummary::_internal_set_ping_default_internet_route(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ping_default_internet_route_ = value;
}

// optional bool ip_was_shared = 7;
inline bool CGameNetworkingUI_ConnectionSummary::has_ip_was_shared() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void CGameNetworkingUI_ConnectionSummary::clear_ip_was_shared() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ip_was_shared_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool CGameNetworkingUI_ConnectionSummary::ip_was_shared() const {
  // @@protoc_insertion_point(field_get:CGameNetworkingUI_ConnectionSummary.ip_was_shared)
  return _internal_ip_was_shared();
}
inline void CGameNetworkingUI_ConnectionSummary::set_ip_was_shared(bool value) {
  _internal_set_ip_was_shared(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:CGameNetworkingUI_ConnectionSummary.ip_was_shared)
}
inline bool CGameNetworkingUI_ConnectionSummary::_internal_ip_was_shared() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ip_was_shared_;
}
inline void CGameNetworkingUI_ConnectionSummary::_internal_set_ip_was_shared(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ip_was_shared_ = value;
}

// -------------------------------------------------------------------

// CGameNetworkingUI_AppSummary

// optional uint32 appid = 1;
inline bool CGameNetworkingUI_AppSummary::has_appid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void CGameNetworkingUI_AppSummary::clear_appid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.appid_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t CGameNetworkingUI_AppSummary::appid() const {
  // @@protoc_insertion_point(field_get:CGameNetworkingUI_AppSummary.appid)
  return _internal_appid();
}
inline void CGameNetworkingUI_AppSummary::set_appid(::uint32_t value) {
  _internal_set_appid(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:CGameNetworkingUI_AppSummary.appid)
}
inline ::uint32_t CGameNetworkingUI_AppSummary::_internal_appid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.appid_;
}
inline void CGameNetworkingUI_AppSummary::_internal_set_appid(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.appid_ = value;
}

// optional bool ip_was_shared_with_friend = 10;
inline bool CGameNetworkingUI_AppSummary::has_ip_was_shared_with_friend() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void CGameNetworkingUI_AppSummary::clear_ip_was_shared_with_friend() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ip_was_shared_with_friend_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool CGameNetworkingUI_AppSummary::ip_was_shared_with_friend() const {
  // @@protoc_insertion_point(field_get:CGameNetworkingUI_AppSummary.ip_was_shared_with_friend)
  return _internal_ip_was_shared_with_friend();
}
inline void CGameNetworkingUI_AppSummary::set_ip_was_shared_with_friend(bool value) {
  _internal_set_ip_was_shared_with_friend(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:CGameNetworkingUI_AppSummary.ip_was_shared_with_friend)
}
inline bool CGameNetworkingUI_AppSummary::_internal_ip_was_shared_with_friend() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ip_was_shared_with_friend_;
}
inline void CGameNetworkingUI_AppSummary::_internal_set_ip_was_shared_with_friend(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ip_was_shared_with_friend_ = value;
}

// optional bool ip_was_shared_with_nonfriend = 11;
inline bool CGameNetworkingUI_AppSummary::has_ip_was_shared_with_nonfriend() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void CGameNetworkingUI_AppSummary::clear_ip_was_shared_with_nonfriend() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ip_was_shared_with_nonfriend_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool CGameNetworkingUI_AppSummary::ip_was_shared_with_nonfriend() const {
  // @@protoc_insertion_point(field_get:CGameNetworkingUI_AppSummary.ip_was_shared_with_nonfriend)
  return _internal_ip_was_shared_with_nonfriend();
}
inline void CGameNetworkingUI_AppSummary::set_ip_was_shared_with_nonfriend(bool value) {
  _internal_set_ip_was_shared_with_nonfriend(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:CGameNetworkingUI_AppSummary.ip_was_shared_with_nonfriend)
}
inline bool CGameNetworkingUI_AppSummary::_internal_ip_was_shared_with_nonfriend() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ip_was_shared_with_nonfriend_;
}
inline void CGameNetworkingUI_AppSummary::_internal_set_ip_was_shared_with_nonfriend(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ip_was_shared_with_nonfriend_ = value;
}

// optional uint32 active_connections = 20;
inline bool CGameNetworkingUI_AppSummary::has_active_connections() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void CGameNetworkingUI_AppSummary::clear_active_connections() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.active_connections_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t CGameNetworkingUI_AppSummary::active_connections() const {
  // @@protoc_insertion_point(field_get:CGameNetworkingUI_AppSummary.active_connections)
  return _internal_active_connections();
}
inline void CGameNetworkingUI_AppSummary::set_active_connections(::uint32_t value) {
  _internal_set_active_connections(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:CGameNetworkingUI_AppSummary.active_connections)
}
inline ::uint32_t CGameNetworkingUI_AppSummary::_internal_active_connections() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.active_connections_;
}
inline void CGameNetworkingUI_AppSummary::_internal_set_active_connections(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.active_connections_ = value;
}

// optional .CGameNetworkingUI_ConnectionSummary main_cxn = 30;
inline bool CGameNetworkingUI_AppSummary::has_main_cxn() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.main_cxn_ != nullptr);
  return value;
}
inline void CGameNetworkingUI_AppSummary::clear_main_cxn() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.main_cxn_ != nullptr) _impl_.main_cxn_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CGameNetworkingUI_ConnectionSummary& CGameNetworkingUI_AppSummary::_internal_main_cxn() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::CGameNetworkingUI_ConnectionSummary* p = _impl_.main_cxn_;
  return p != nullptr ? *p : reinterpret_cast<const ::CGameNetworkingUI_ConnectionSummary&>(::_CGameNetworkingUI_ConnectionSummary_default_instance_);
}
inline const ::CGameNetworkingUI_ConnectionSummary& CGameNetworkingUI_AppSummary::main_cxn() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CGameNetworkingUI_AppSummary.main_cxn)
  return _internal_main_cxn();
}
inline void CGameNetworkingUI_AppSummary::unsafe_arena_set_allocated_main_cxn(
    ::CGameNetworkingUI_ConnectionSummary* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.main_cxn_);
  }
  _impl_.main_cxn_ = reinterpret_cast<::CGameNetworkingUI_ConnectionSummary*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CGameNetworkingUI_AppSummary.main_cxn)
}
inline ::CGameNetworkingUI_ConnectionSummary* PROTOBUF_NULLABLE CGameNetworkingUI_AppSummary::release_main_cxn() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CGameNetworkingUI_ConnectionSummary* released = _impl_.main_cxn_;
  _impl_.main_cxn_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::CGameNetworkingUI_ConnectionSummary* PROTOBUF_NULLABLE CGameNetworkingUI_AppSummary::unsafe_arena_release_main_cxn() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:CGameNetworkingUI_AppSummary.main_cxn)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CGameNetworkingUI_ConnectionSummary* temp = _impl_.main_cxn_;
  _impl_.main_cxn_ = nullptr;
  return temp;
}
inline ::CGameNetworkingUI_ConnectionSummary* PROTOBUF_NONNULL CGameNetworkingUI_AppSummary::_internal_mutable_main_cxn() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.main_cxn_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::CGameNetworkingUI_ConnectionSummary>(GetArena());
    _impl_.main_cxn_ = reinterpret_cast<::CGameNetworkingUI_ConnectionSummary*>(p);
  }
  return _impl_.main_cxn_;
}
inline ::CGameNetworkingUI_ConnectionSummary* PROTOBUF_NONNULL CGameNetworkingUI_AppSummary::mutable_main_cxn()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::CGameNetworkingUI_ConnectionSummary* _msg = _internal_mutable_main_cxn();
  // @@protoc_insertion_point(field_mutable:CGameNetworkingUI_AppSummary.main_cxn)
  return _msg;
}
inline void CGameNetworkingUI_AppSummary::set_allocated_main_cxn(::CGameNetworkingUI_ConnectionSummary* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.main_cxn_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.main_cxn_ = reinterpret_cast<::CGameNetworkingUI_ConnectionSummary*>(value);
  // @@protoc_insertion_point(field_set_allocated:CGameNetworkingUI_AppSummary.main_cxn)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // steammessages_5fgamenetworkingui_2eproto_2epb_2eh

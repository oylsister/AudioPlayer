// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: steamnetworkingsockets_messages_udp.proto
// Protobuf C++ Version: 6.30.0-rc1

#include "steamnetworkingsockets_messages_udp.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;

inline constexpr CMsgSteamSockets_UDP_NoConnection::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        from_connection_id_{0u},
        to_connection_id_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR CMsgSteamSockets_UDP_NoConnection::CMsgSteamSockets_UDP_NoConnection(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CMsgSteamSockets_UDP_NoConnection_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CMsgSteamSockets_UDP_NoConnectionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamSockets_UDP_NoConnectionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamSockets_UDP_NoConnectionDefaultTypeInternal() {}
  union {
    CMsgSteamSockets_UDP_NoConnection _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamSockets_UDP_NoConnectionDefaultTypeInternal _CMsgSteamSockets_UDP_NoConnection_default_instance_;

inline constexpr CMsgSteamSockets_UDP_ConnectionClosed::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        debug_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        reason_code_{0u},
        to_connection_id_{0u},
        from_connection_id_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR CMsgSteamSockets_UDP_ConnectionClosed::CMsgSteamSockets_UDP_ConnectionClosed(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CMsgSteamSockets_UDP_ConnectionClosed_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CMsgSteamSockets_UDP_ConnectionClosedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamSockets_UDP_ConnectionClosedDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamSockets_UDP_ConnectionClosedDefaultTypeInternal() {}
  union {
    CMsgSteamSockets_UDP_ConnectionClosed _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamSockets_UDP_ConnectionClosedDefaultTypeInternal _CMsgSteamSockets_UDP_ConnectionClosed_default_instance_;

inline constexpr CMsgSteamSockets_UDP_ChallengeRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        connection_id_{0u},
        protocol_version_{0u},
        my_timestamp_{::uint64_t{0u}} {}

template <typename>
PROTOBUF_CONSTEXPR CMsgSteamSockets_UDP_ChallengeRequest::CMsgSteamSockets_UDP_ChallengeRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CMsgSteamSockets_UDP_ChallengeRequest_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CMsgSteamSockets_UDP_ChallengeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamSockets_UDP_ChallengeRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamSockets_UDP_ChallengeRequestDefaultTypeInternal() {}
  union {
    CMsgSteamSockets_UDP_ChallengeRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamSockets_UDP_ChallengeRequestDefaultTypeInternal _CMsgSteamSockets_UDP_ChallengeRequest_default_instance_;

inline constexpr CMsgSteamSockets_UDP_ChallengeReply::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        challenge_{::uint64_t{0u}},
        connection_id_{0u},
        protocol_version_{0u},
        your_timestamp_{::uint64_t{0u}} {}

template <typename>
PROTOBUF_CONSTEXPR CMsgSteamSockets_UDP_ChallengeReply::CMsgSteamSockets_UDP_ChallengeReply(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CMsgSteamSockets_UDP_ChallengeReply_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CMsgSteamSockets_UDP_ChallengeReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamSockets_UDP_ChallengeReplyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamSockets_UDP_ChallengeReplyDefaultTypeInternal() {}
  union {
    CMsgSteamSockets_UDP_ChallengeReply _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamSockets_UDP_ChallengeReplyDefaultTypeInternal _CMsgSteamSockets_UDP_ChallengeReply_default_instance_;

inline constexpr CMsgSteamSockets_UDP_ConnectRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        identity_string_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        cert_{nullptr},
        crypt_{nullptr},
        legacy_identity_binary_{nullptr},
        challenge_{::uint64_t{0u}},
        legacy_client_steam_id_{::uint64_t{0u}},
        client_connection_id_{0u},
        ping_est_ms_{0u},
        my_timestamp_{::uint64_t{0u}},
        legacy_protocol_version_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR CMsgSteamSockets_UDP_ConnectRequest::CMsgSteamSockets_UDP_ConnectRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CMsgSteamSockets_UDP_ConnectRequest_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CMsgSteamSockets_UDP_ConnectRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamSockets_UDP_ConnectRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamSockets_UDP_ConnectRequestDefaultTypeInternal() {}
  union {
    CMsgSteamSockets_UDP_ConnectRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamSockets_UDP_ConnectRequestDefaultTypeInternal _CMsgSteamSockets_UDP_ConnectRequest_default_instance_;

inline constexpr CMsgSteamSockets_UDP_ConnectOK::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        identity_string_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        crypt_{nullptr},
        cert_{nullptr},
        legacy_identity_binary_{nullptr},
        legacy_server_steam_id_{::uint64_t{0u}},
        client_connection_id_{0u},
        delay_time_usec_{0u},
        your_timestamp_{::uint64_t{0u}},
        server_connection_id_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR CMsgSteamSockets_UDP_ConnectOK::CMsgSteamSockets_UDP_ConnectOK(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CMsgSteamSockets_UDP_ConnectOK_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CMsgSteamSockets_UDP_ConnectOKDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamSockets_UDP_ConnectOKDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamSockets_UDP_ConnectOKDefaultTypeInternal() {}
  union {
    CMsgSteamSockets_UDP_ConnectOK _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamSockets_UDP_ConnectOKDefaultTypeInternal _CMsgSteamSockets_UDP_ConnectOK_default_instance_;

inline constexpr CMsgSteamSockets_UDP_Stats::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        stats_{nullptr},
        flags_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR CMsgSteamSockets_UDP_Stats::CMsgSteamSockets_UDP_Stats(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CMsgSteamSockets_UDP_Stats_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CMsgSteamSockets_UDP_StatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CMsgSteamSockets_UDP_StatsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CMsgSteamSockets_UDP_StatsDefaultTypeInternal() {}
  union {
    CMsgSteamSockets_UDP_Stats _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CMsgSteamSockets_UDP_StatsDefaultTypeInternal _CMsgSteamSockets_UDP_Stats_default_instance_;
static const ::_pb::EnumDescriptor* PROTOBUF_NONNULL
    file_level_enum_descriptors_steamnetworkingsockets_5fmessages_5fudp_2eproto[2];
static constexpr const ::_pb::ServiceDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_service_descriptors_steamnetworkingsockets_5fmessages_5fudp_2eproto = nullptr;
const ::uint32_t
    TableStruct_steamnetworkingsockets_5fmessages_5fudp_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ChallengeRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ChallengeRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ChallengeRequest, _impl_.connection_id_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ChallengeRequest, _impl_.my_timestamp_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ChallengeRequest, _impl_.protocol_version_),
        0,
        2,
        1,
        PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ChallengeReply, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ChallengeReply, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ChallengeReply, _impl_.connection_id_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ChallengeReply, _impl_.challenge_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ChallengeReply, _impl_.your_timestamp_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ChallengeReply, _impl_.protocol_version_),
        1,
        0,
        3,
        2,
        PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectRequest, _impl_.client_connection_id_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectRequest, _impl_.challenge_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectRequest, _impl_.my_timestamp_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectRequest, _impl_.ping_est_ms_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectRequest, _impl_.crypt_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectRequest, _impl_.cert_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectRequest, _impl_.legacy_protocol_version_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectRequest, _impl_.identity_string_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectRequest, _impl_.legacy_client_steam_id_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectRequest, _impl_.legacy_identity_binary_),
        6,
        4,
        8,
        7,
        2,
        1,
        9,
        0,
        5,
        3,
        PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectOK, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectOK, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectOK, _impl_.client_connection_id_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectOK, _impl_.server_connection_id_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectOK, _impl_.your_timestamp_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectOK, _impl_.delay_time_usec_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectOK, _impl_.crypt_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectOK, _impl_.cert_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectOK, _impl_.identity_string_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectOK, _impl_.legacy_server_steam_id_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectOK, _impl_.legacy_identity_binary_),
        5,
        8,
        7,
        6,
        1,
        2,
        0,
        4,
        3,
        PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectionClosed, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectionClosed, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectionClosed, _impl_.to_connection_id_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectionClosed, _impl_.from_connection_id_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectionClosed, _impl_.debug_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_ConnectionClosed, _impl_.reason_code_),
        2,
        3,
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_NoConnection, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_NoConnection, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_NoConnection, _impl_.from_connection_id_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_NoConnection, _impl_.to_connection_id_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_Stats, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_Stats, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_Stats, _impl_.stats_),
        PROTOBUF_FIELD_OFFSET(::CMsgSteamSockets_UDP_Stats, _impl_.flags_),
        0,
        1,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 11, -1, sizeof(::CMsgSteamSockets_UDP_ChallengeRequest)},
        {14, 26, -1, sizeof(::CMsgSteamSockets_UDP_ChallengeReply)},
        {30, 48, -1, sizeof(::CMsgSteamSockets_UDP_ConnectRequest)},
        {58, 75, -1, sizeof(::CMsgSteamSockets_UDP_ConnectOK)},
        {84, 96, -1, sizeof(::CMsgSteamSockets_UDP_ConnectionClosed)},
        {100, 110, -1, sizeof(::CMsgSteamSockets_UDP_NoConnection)},
        {112, 122, -1, sizeof(::CMsgSteamSockets_UDP_Stats)},
};
static const ::_pb::Message* PROTOBUF_NONNULL const file_default_instances[] = {
    &::_CMsgSteamSockets_UDP_ChallengeRequest_default_instance_._instance,
    &::_CMsgSteamSockets_UDP_ChallengeReply_default_instance_._instance,
    &::_CMsgSteamSockets_UDP_ConnectRequest_default_instance_._instance,
    &::_CMsgSteamSockets_UDP_ConnectOK_default_instance_._instance,
    &::_CMsgSteamSockets_UDP_ConnectionClosed_default_instance_._instance,
    &::_CMsgSteamSockets_UDP_NoConnection_default_instance_._instance,
    &::_CMsgSteamSockets_UDP_Stats_default_instance_._instance,
};
const char descriptor_table_protodef_steamnetworkingsockets_5fmessages_5fudp_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n)steamnetworkingsockets_messages_udp.pr"
    "oto\032+steamnetworkingsockets_messages_cer"
    "ts.proto\032%steamnetworkingsockets_message"
    "s.proto\"n\n%CMsgSteamSockets_UDP_Challeng"
    "eRequest\022\025\n\rconnection_id\030\001 \001(\007\022\024\n\014my_ti"
    "mestamp\030\003 \001(\006\022\030\n\020protocol_version\030\004 \001(\r\""
    "\201\001\n#CMsgSteamSockets_UDP_ChallengeReply\022"
    "\025\n\rconnection_id\030\001 \001(\007\022\021\n\tchallenge\030\002 \001("
    "\006\022\026\n\016your_timestamp\030\003 \001(\006\022\030\n\020protocol_ve"
    "rsion\030\004 \001(\r\"\221\003\n#CMsgSteamSockets_UDP_Con"
    "nectRequest\022\034\n\024client_connection_id\030\001 \001("
    "\007\022\021\n\tchallenge\030\002 \001(\006\022\024\n\014my_timestamp\030\005 \001"
    "(\006\022\023\n\013ping_est_ms\030\006 \001(\r\0227\n\005crypt\030\007 \001(\0132("
    ".CMsgSteamDatagramSessionCryptInfoSigned"
    "\0221\n\004cert\030\004 \001(\0132#.CMsgSteamDatagramCertif"
    "icateSigned\022\037\n\027legacy_protocol_version\030\010"
    " \001(\r\022\027\n\017identity_string\030\n \001(\t\022\036\n\026legacy_"
    "client_steam_id\030\003 \001(\006\022H\n\026legacy_identity"
    "_binary\030\t \001(\0132(.CMsgSteamNetworkingIdent"
    "ityLegacyBinary\"\374\002\n\036CMsgSteamSockets_UDP"
    "_ConnectOK\022\034\n\024client_connection_id\030\001 \001(\007"
    "\022\034\n\024server_connection_id\030\005 \001(\007\022\026\n\016your_t"
    "imestamp\030\003 \001(\006\022\027\n\017delay_time_usec\030\004 \001(\r\022"
    "7\n\005crypt\030\007 \001(\0132(.CMsgSteamDatagramSessio"
    "nCryptInfoSigned\0221\n\004cert\030\010 \001(\0132#.CMsgSte"
    "amDatagramCertificateSigned\022\027\n\017identity_"
    "string\030\013 \001(\t\022\036\n\026legacy_server_steam_id\030\002"
    " \001(\006\022H\n\026legacy_identity_binary\030\n \001(\0132(.C"
    "MsgSteamNetworkingIdentityLegacyBinary\"\201"
    "\001\n%CMsgSteamSockets_UDP_ConnectionClosed"
    "\022\030\n\020to_connection_id\030\004 \001(\007\022\032\n\022from_conne"
    "ction_id\030\005 \001(\007\022\r\n\005debug\030\002 \001(\t\022\023\n\013reason_"
    "code\030\003 \001(\r\"Y\n!CMsgSteamSockets_UDP_NoCon"
    "nection\022\032\n\022from_connection_id\030\002 \001(\007\022\030\n\020t"
    "o_connection_id\030\003 \001(\007\"\267\001\n\032CMsgSteamSocke"
    "ts_UDP_Stats\0222\n\005stats\030\001 \001(\0132#.CMsgSteamD"
    "atagramConnectionQuality\022\r\n\005flags\030\003 \001(\r\""
    "V\n\005Flags\022\023\n\017ACK_REQUEST_E2E\020\002\022\031\n\025ACK_REQ"
    "UEST_IMMEDIATE\020\004\022\035\n\031NOT_PRIMARY_TRANSPOR"
    "T_E2E\020\020*\245\002\n\030ESteamNetworkingUDPMsgID\022-\n)"
    "k_ESteamNetworkingUDPMsg_ChallengeReques"
    "t\020 \022+\n\'k_ESteamNetworkingUDPMsg_Challeng"
    "eReply\020!\022+\n\'k_ESteamNetworkingUDPMsg_Con"
    "nectRequest\020\"\022&\n\"k_ESteamNetworkingUDPMs"
    "g_ConnectOK\020#\022-\n)k_ESteamNetworkingUDPMs"
    "g_ConnectionClosed\020$\022)\n%k_ESteamNetworki"
    "ngUDPMsg_NoConnection\020%B\005H\001\200\001\000"
};
static const ::_pbi::DescriptorTable* PROTOBUF_NONNULL const
    descriptor_table_steamnetworkingsockets_5fmessages_5fudp_2eproto_deps[2] = {
        &::descriptor_table_steamnetworkingsockets_5fmessages_2eproto,
        &::descriptor_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto,
};
static ::absl::once_flag descriptor_table_steamnetworkingsockets_5fmessages_5fudp_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_steamnetworkingsockets_5fmessages_5fudp_2eproto = {
    false,
    false,
    1870,
    descriptor_table_protodef_steamnetworkingsockets_5fmessages_5fudp_2eproto,
    "steamnetworkingsockets_messages_udp.proto",
    &descriptor_table_steamnetworkingsockets_5fmessages_5fudp_2eproto_once,
    descriptor_table_steamnetworkingsockets_5fmessages_5fudp_2eproto_deps,
    2,
    7,
    schemas,
    file_default_instances,
    TableStruct_steamnetworkingsockets_5fmessages_5fudp_2eproto::offsets,
    file_level_enum_descriptors_steamnetworkingsockets_5fmessages_5fudp_2eproto,
    file_level_service_descriptors_steamnetworkingsockets_5fmessages_5fudp_2eproto,
};
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL CMsgSteamSockets_UDP_Stats_Flags_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_steamnetworkingsockets_5fmessages_5fudp_2eproto);
  return file_level_enum_descriptors_steamnetworkingsockets_5fmessages_5fudp_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t CMsgSteamSockets_UDP_Stats_Flags_internal_data_[] = {
    65538u, 32u, 8194u, };
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL ESteamNetworkingUDPMsgID_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_steamnetworkingsockets_5fmessages_5fudp_2eproto);
  return file_level_enum_descriptors_steamnetworkingsockets_5fmessages_5fudp_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t ESteamNetworkingUDPMsgID_internal_data_[] = {
    393248u, 0u, };
// ===================================================================

class CMsgSteamSockets_UDP_ChallengeRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CMsgSteamSockets_UDP_ChallengeRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ChallengeRequest, _impl_._has_bits_);
};

CMsgSteamSockets_UDP_ChallengeRequest::CMsgSteamSockets_UDP_ChallengeRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamSockets_UDP_ChallengeRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamSockets_UDP_ChallengeRequest)
}
CMsgSteamSockets_UDP_ChallengeRequest::CMsgSteamSockets_UDP_ChallengeRequest(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const CMsgSteamSockets_UDP_ChallengeRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamSockets_UDP_ChallengeRequest_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
}
PROTOBUF_NDEBUG_INLINE CMsgSteamSockets_UDP_ChallengeRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void CMsgSteamSockets_UDP_ChallengeRequest::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, connection_id_),
           0,
           offsetof(Impl_, my_timestamp_) -
               offsetof(Impl_, connection_id_) +
               sizeof(Impl_::my_timestamp_));
}
CMsgSteamSockets_UDP_ChallengeRequest::~CMsgSteamSockets_UDP_ChallengeRequest() {
  // @@protoc_insertion_point(destructor:CMsgSteamSockets_UDP_ChallengeRequest)
  SharedDtor(*this);
}
inline void CMsgSteamSockets_UDP_ChallengeRequest::SharedDtor(MessageLite& self) {
  CMsgSteamSockets_UDP_ChallengeRequest& this_ = static_cast<CMsgSteamSockets_UDP_ChallengeRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CMsgSteamSockets_UDP_ChallengeRequest::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CMsgSteamSockets_UDP_ChallengeRequest(arena);
}
constexpr auto CMsgSteamSockets_UDP_ChallengeRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(CMsgSteamSockets_UDP_ChallengeRequest),
                                            alignof(CMsgSteamSockets_UDP_ChallengeRequest));
}
constexpr auto CMsgSteamSockets_UDP_ChallengeRequest::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CMsgSteamSockets_UDP_ChallengeRequest_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CMsgSteamSockets_UDP_ChallengeRequest::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CMsgSteamSockets_UDP_ChallengeRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CMsgSteamSockets_UDP_ChallengeRequest::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CMsgSteamSockets_UDP_ChallengeRequest>(), &CMsgSteamSockets_UDP_ChallengeRequest::ByteSizeLong,
              &CMsgSteamSockets_UDP_ChallengeRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ChallengeRequest, _impl_._cached_size_),
          false,
      },
      &CMsgSteamSockets_UDP_ChallengeRequest::kDescriptorMethods,
      &descriptor_table_steamnetworkingsockets_5fmessages_5fudp_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        CMsgSteamSockets_UDP_ChallengeRequest_class_data_ =
            CMsgSteamSockets_UDP_ChallengeRequest::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL CMsgSteamSockets_UDP_ChallengeRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CMsgSteamSockets_UDP_ChallengeRequest_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CMsgSteamSockets_UDP_ChallengeRequest_class_data_.tc_table);
  return CMsgSteamSockets_UDP_ChallengeRequest_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2>
CMsgSteamSockets_UDP_ChallengeRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ChallengeRequest, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967282,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    CMsgSteamSockets_UDP_ChallengeRequest_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CMsgSteamSockets_UDP_ChallengeRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional uint32 protocol_version = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamSockets_UDP_ChallengeRequest, _impl_.protocol_version_), 1>(),
     {32, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ChallengeRequest, _impl_.protocol_version_)}},
    // optional fixed32 connection_id = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ChallengeRequest, _impl_.connection_id_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional fixed64 my_timestamp = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ChallengeRequest, _impl_.my_timestamp_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional fixed32 connection_id = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ChallengeRequest, _impl_.connection_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional fixed64 my_timestamp = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ChallengeRequest, _impl_.my_timestamp_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
    // optional uint32 protocol_version = 4;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ChallengeRequest, _impl_.protocol_version_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};
PROTOBUF_NOINLINE void CMsgSteamSockets_UDP_ChallengeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamSockets_UDP_ChallengeRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    ::memset(&_impl_.connection_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.my_timestamp_) -
        reinterpret_cast<char*>(&_impl_.connection_id_)) + sizeof(_impl_.my_timestamp_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CMsgSteamSockets_UDP_ChallengeRequest::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CMsgSteamSockets_UDP_ChallengeRequest& this_ = static_cast<const CMsgSteamSockets_UDP_ChallengeRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CMsgSteamSockets_UDP_ChallengeRequest::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CMsgSteamSockets_UDP_ChallengeRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamSockets_UDP_ChallengeRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional fixed32 connection_id = 1;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        1, this_._internal_connection_id(), target);
  }

  // optional fixed64 my_timestamp = 3;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        3, this_._internal_my_timestamp(), target);
  }

  // optional uint32 protocol_version = 4;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this_._internal_protocol_version(), target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamSockets_UDP_ChallengeRequest)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CMsgSteamSockets_UDP_ChallengeRequest::ByteSizeLong(const MessageLite& base) {
  const CMsgSteamSockets_UDP_ChallengeRequest& this_ = static_cast<const CMsgSteamSockets_UDP_ChallengeRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t CMsgSteamSockets_UDP_ChallengeRequest::ByteSizeLong() const {
  const CMsgSteamSockets_UDP_ChallengeRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:CMsgSteamSockets_UDP_ChallengeRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += static_cast<bool>(0x00000004u & cached_has_bits) * 9;
  total_size += static_cast<bool>(0x00000001u & cached_has_bits) * 5;
   {
    // optional uint32 protocol_version = 4;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_protocol_version());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void CMsgSteamSockets_UDP_ChallengeRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CMsgSteamSockets_UDP_ChallengeRequest*>(&to_msg);
  auto& from = static_cast<const CMsgSteamSockets_UDP_ChallengeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamSockets_UDP_ChallengeRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000007u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_impl_.connection_id_ = from._impl_.connection_id_;
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_impl_.protocol_version_ = from._impl_.protocol_version_;
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_impl_.my_timestamp_ = from._impl_.my_timestamp_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamSockets_UDP_ChallengeRequest::CopyFrom(const CMsgSteamSockets_UDP_ChallengeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamSockets_UDP_ChallengeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CMsgSteamSockets_UDP_ChallengeRequest::InternalSwap(CMsgSteamSockets_UDP_ChallengeRequest* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ChallengeRequest, _impl_.my_timestamp_)
      + sizeof(CMsgSteamSockets_UDP_ChallengeRequest::_impl_.my_timestamp_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ChallengeRequest, _impl_.connection_id_)>(
          reinterpret_cast<char*>(&_impl_.connection_id_),
          reinterpret_cast<char*>(&other->_impl_.connection_id_));
}

::google::protobuf::Metadata CMsgSteamSockets_UDP_ChallengeRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CMsgSteamSockets_UDP_ChallengeReply::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CMsgSteamSockets_UDP_ChallengeReply>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ChallengeReply, _impl_._has_bits_);
};

CMsgSteamSockets_UDP_ChallengeReply::CMsgSteamSockets_UDP_ChallengeReply(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamSockets_UDP_ChallengeReply_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamSockets_UDP_ChallengeReply)
}
CMsgSteamSockets_UDP_ChallengeReply::CMsgSteamSockets_UDP_ChallengeReply(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const CMsgSteamSockets_UDP_ChallengeReply& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamSockets_UDP_ChallengeReply_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
}
PROTOBUF_NDEBUG_INLINE CMsgSteamSockets_UDP_ChallengeReply::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void CMsgSteamSockets_UDP_ChallengeReply::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, challenge_),
           0,
           offsetof(Impl_, your_timestamp_) -
               offsetof(Impl_, challenge_) +
               sizeof(Impl_::your_timestamp_));
}
CMsgSteamSockets_UDP_ChallengeReply::~CMsgSteamSockets_UDP_ChallengeReply() {
  // @@protoc_insertion_point(destructor:CMsgSteamSockets_UDP_ChallengeReply)
  SharedDtor(*this);
}
inline void CMsgSteamSockets_UDP_ChallengeReply::SharedDtor(MessageLite& self) {
  CMsgSteamSockets_UDP_ChallengeReply& this_ = static_cast<CMsgSteamSockets_UDP_ChallengeReply&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CMsgSteamSockets_UDP_ChallengeReply::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CMsgSteamSockets_UDP_ChallengeReply(arena);
}
constexpr auto CMsgSteamSockets_UDP_ChallengeReply::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(CMsgSteamSockets_UDP_ChallengeReply),
                                            alignof(CMsgSteamSockets_UDP_ChallengeReply));
}
constexpr auto CMsgSteamSockets_UDP_ChallengeReply::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CMsgSteamSockets_UDP_ChallengeReply_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CMsgSteamSockets_UDP_ChallengeReply::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CMsgSteamSockets_UDP_ChallengeReply>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CMsgSteamSockets_UDP_ChallengeReply::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CMsgSteamSockets_UDP_ChallengeReply>(), &CMsgSteamSockets_UDP_ChallengeReply::ByteSizeLong,
              &CMsgSteamSockets_UDP_ChallengeReply::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ChallengeReply, _impl_._cached_size_),
          false,
      },
      &CMsgSteamSockets_UDP_ChallengeReply::kDescriptorMethods,
      &descriptor_table_steamnetworkingsockets_5fmessages_5fudp_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        CMsgSteamSockets_UDP_ChallengeReply_class_data_ =
            CMsgSteamSockets_UDP_ChallengeReply::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL CMsgSteamSockets_UDP_ChallengeReply::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CMsgSteamSockets_UDP_ChallengeReply_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CMsgSteamSockets_UDP_ChallengeReply_class_data_.tc_table);
  return CMsgSteamSockets_UDP_ChallengeReply_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 0, 2>
CMsgSteamSockets_UDP_ChallengeReply::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ChallengeReply, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    CMsgSteamSockets_UDP_ChallengeReply_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CMsgSteamSockets_UDP_ChallengeReply>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional uint32 protocol_version = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamSockets_UDP_ChallengeReply, _impl_.protocol_version_), 2>(),
     {32, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ChallengeReply, _impl_.protocol_version_)}},
    // optional fixed32 connection_id = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ChallengeReply, _impl_.connection_id_)}},
    // optional fixed64 challenge = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ChallengeReply, _impl_.challenge_)}},
    // optional fixed64 your_timestamp = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 3, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ChallengeReply, _impl_.your_timestamp_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional fixed32 connection_id = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ChallengeReply, _impl_.connection_id_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional fixed64 challenge = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ChallengeReply, _impl_.challenge_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
    // optional fixed64 your_timestamp = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ChallengeReply, _impl_.your_timestamp_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
    // optional uint32 protocol_version = 4;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ChallengeReply, _impl_.protocol_version_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};
PROTOBUF_NOINLINE void CMsgSteamSockets_UDP_ChallengeReply::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamSockets_UDP_ChallengeReply)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    ::memset(&_impl_.challenge_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.your_timestamp_) -
        reinterpret_cast<char*>(&_impl_.challenge_)) + sizeof(_impl_.your_timestamp_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CMsgSteamSockets_UDP_ChallengeReply::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CMsgSteamSockets_UDP_ChallengeReply& this_ = static_cast<const CMsgSteamSockets_UDP_ChallengeReply&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CMsgSteamSockets_UDP_ChallengeReply::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CMsgSteamSockets_UDP_ChallengeReply& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamSockets_UDP_ChallengeReply)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional fixed32 connection_id = 1;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        1, this_._internal_connection_id(), target);
  }

  // optional fixed64 challenge = 2;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        2, this_._internal_challenge(), target);
  }

  // optional fixed64 your_timestamp = 3;
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        3, this_._internal_your_timestamp(), target);
  }

  // optional uint32 protocol_version = 4;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this_._internal_protocol_version(), target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamSockets_UDP_ChallengeReply)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CMsgSteamSockets_UDP_ChallengeReply::ByteSizeLong(const MessageLite& base) {
  const CMsgSteamSockets_UDP_ChallengeReply& this_ = static_cast<const CMsgSteamSockets_UDP_ChallengeReply&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t CMsgSteamSockets_UDP_ChallengeReply::ByteSizeLong() const {
  const CMsgSteamSockets_UDP_ChallengeReply& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:CMsgSteamSockets_UDP_ChallengeReply)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += ::absl::popcount(0x00000009u & cached_has_bits) * 9;
  total_size += static_cast<bool>(0x00000002u & cached_has_bits) * 5;
   {
    // optional uint32 protocol_version = 4;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_protocol_version());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void CMsgSteamSockets_UDP_ChallengeReply::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CMsgSteamSockets_UDP_ChallengeReply*>(&to_msg);
  auto& from = static_cast<const CMsgSteamSockets_UDP_ChallengeReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamSockets_UDP_ChallengeReply)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_impl_.challenge_ = from._impl_.challenge_;
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_impl_.connection_id_ = from._impl_.connection_id_;
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_impl_.protocol_version_ = from._impl_.protocol_version_;
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _this->_impl_.your_timestamp_ = from._impl_.your_timestamp_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamSockets_UDP_ChallengeReply::CopyFrom(const CMsgSteamSockets_UDP_ChallengeReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamSockets_UDP_ChallengeReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CMsgSteamSockets_UDP_ChallengeReply::InternalSwap(CMsgSteamSockets_UDP_ChallengeReply* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ChallengeReply, _impl_.your_timestamp_)
      + sizeof(CMsgSteamSockets_UDP_ChallengeReply::_impl_.your_timestamp_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ChallengeReply, _impl_.challenge_)>(
          reinterpret_cast<char*>(&_impl_.challenge_),
          reinterpret_cast<char*>(&other->_impl_.challenge_));
}

::google::protobuf::Metadata CMsgSteamSockets_UDP_ChallengeReply::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CMsgSteamSockets_UDP_ConnectRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CMsgSteamSockets_UDP_ConnectRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectRequest, _impl_._has_bits_);
};

void CMsgSteamSockets_UDP_ConnectRequest::clear_crypt() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.crypt_ != nullptr) _impl_.crypt_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CMsgSteamSockets_UDP_ConnectRequest::clear_cert() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.cert_ != nullptr) _impl_.cert_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CMsgSteamSockets_UDP_ConnectRequest::clear_legacy_identity_binary() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.legacy_identity_binary_ != nullptr) _impl_.legacy_identity_binary_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
CMsgSteamSockets_UDP_ConnectRequest::CMsgSteamSockets_UDP_ConnectRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamSockets_UDP_ConnectRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamSockets_UDP_ConnectRequest)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamSockets_UDP_ConnectRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::CMsgSteamSockets_UDP_ConnectRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        identity_string_(arena, from.identity_string_) {}

CMsgSteamSockets_UDP_ConnectRequest::CMsgSteamSockets_UDP_ConnectRequest(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const CMsgSteamSockets_UDP_ConnectRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamSockets_UDP_ConnectRequest_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CMsgSteamSockets_UDP_ConnectRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.cert_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.cert_)
                : nullptr;
  _impl_.crypt_ = ((cached_has_bits & 0x00000004u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.crypt_)
                : nullptr;
  _impl_.legacy_identity_binary_ = ((cached_has_bits & 0x00000008u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.legacy_identity_binary_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, challenge_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, challenge_),
           offsetof(Impl_, legacy_protocol_version_) -
               offsetof(Impl_, challenge_) +
               sizeof(Impl_::legacy_protocol_version_));

  // @@protoc_insertion_point(copy_constructor:CMsgSteamSockets_UDP_ConnectRequest)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamSockets_UDP_ConnectRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        identity_string_(arena) {}

inline void CMsgSteamSockets_UDP_ConnectRequest::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, cert_),
           0,
           offsetof(Impl_, legacy_protocol_version_) -
               offsetof(Impl_, cert_) +
               sizeof(Impl_::legacy_protocol_version_));
}
CMsgSteamSockets_UDP_ConnectRequest::~CMsgSteamSockets_UDP_ConnectRequest() {
  // @@protoc_insertion_point(destructor:CMsgSteamSockets_UDP_ConnectRequest)
  SharedDtor(*this);
}
inline void CMsgSteamSockets_UDP_ConnectRequest::SharedDtor(MessageLite& self) {
  CMsgSteamSockets_UDP_ConnectRequest& this_ = static_cast<CMsgSteamSockets_UDP_ConnectRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.identity_string_.Destroy();
  delete this_._impl_.cert_;
  delete this_._impl_.crypt_;
  delete this_._impl_.legacy_identity_binary_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CMsgSteamSockets_UDP_ConnectRequest::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CMsgSteamSockets_UDP_ConnectRequest(arena);
}
constexpr auto CMsgSteamSockets_UDP_ConnectRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(CMsgSteamSockets_UDP_ConnectRequest),
                                            alignof(CMsgSteamSockets_UDP_ConnectRequest));
}
constexpr auto CMsgSteamSockets_UDP_ConnectRequest::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CMsgSteamSockets_UDP_ConnectRequest_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CMsgSteamSockets_UDP_ConnectRequest::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CMsgSteamSockets_UDP_ConnectRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CMsgSteamSockets_UDP_ConnectRequest::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CMsgSteamSockets_UDP_ConnectRequest>(), &CMsgSteamSockets_UDP_ConnectRequest::ByteSizeLong,
              &CMsgSteamSockets_UDP_ConnectRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectRequest, _impl_._cached_size_),
          false,
      },
      &CMsgSteamSockets_UDP_ConnectRequest::kDescriptorMethods,
      &descriptor_table_steamnetworkingsockets_5fmessages_5fudp_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        CMsgSteamSockets_UDP_ConnectRequest_class_data_ =
            CMsgSteamSockets_UDP_ConnectRequest::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL CMsgSteamSockets_UDP_ConnectRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CMsgSteamSockets_UDP_ConnectRequest_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CMsgSteamSockets_UDP_ConnectRequest_class_data_.tc_table);
  return CMsgSteamSockets_UDP_ConnectRequest_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 3, 67, 2>
CMsgSteamSockets_UDP_ConnectRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectRequest, _impl_._has_bits_),
    0, // no _extensions_
    10, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    CMsgSteamSockets_UDP_ConnectRequest_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CMsgSteamSockets_UDP_ConnectRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional fixed32 client_connection_id = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 6, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectRequest, _impl_.client_connection_id_)}},
    // optional fixed64 challenge = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 4, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectRequest, _impl_.challenge_)}},
    // optional fixed64 legacy_client_steam_id = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 5, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectRequest, _impl_.legacy_client_steam_id_)}},
    // optional .CMsgSteamDatagramCertificateSigned cert = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectRequest, _impl_.cert_)}},
    // optional fixed64 my_timestamp = 5;
    {::_pbi::TcParser::FastF64S1,
     {41, 8, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectRequest, _impl_.my_timestamp_)}},
    // optional uint32 ping_est_ms = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamSockets_UDP_ConnectRequest, _impl_.ping_est_ms_), 7>(),
     {48, 7, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectRequest, _impl_.ping_est_ms_)}},
    // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 2, 1, PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectRequest, _impl_.crypt_)}},
    // optional uint32 legacy_protocol_version = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamSockets_UDP_ConnectRequest, _impl_.legacy_protocol_version_), 9>(),
     {64, 9, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectRequest, _impl_.legacy_protocol_version_)}},
    // optional .CMsgSteamNetworkingIdentityLegacyBinary legacy_identity_binary = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 3, 2, PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectRequest, _impl_.legacy_identity_binary_)}},
    // optional string identity_string = 10;
    {::_pbi::TcParser::FastSS1,
     {82, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectRequest, _impl_.identity_string_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional fixed32 client_connection_id = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectRequest, _impl_.client_connection_id_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional fixed64 challenge = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectRequest, _impl_.challenge_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
    // optional fixed64 legacy_client_steam_id = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectRequest, _impl_.legacy_client_steam_id_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
    // optional .CMsgSteamDatagramCertificateSigned cert = 4;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectRequest, _impl_.cert_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional fixed64 my_timestamp = 5;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectRequest, _impl_.my_timestamp_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
    // optional uint32 ping_est_ms = 6;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectRequest, _impl_.ping_est_ms_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectRequest, _impl_.crypt_), _Internal::kHasBitsOffset + 2, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional uint32 legacy_protocol_version = 8;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectRequest, _impl_.legacy_protocol_version_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional .CMsgSteamNetworkingIdentityLegacyBinary legacy_identity_binary = 9;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectRequest, _impl_.legacy_identity_binary_), _Internal::kHasBitsOffset + 3, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional string identity_string = 10;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectRequest, _impl_.identity_string_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::CMsgSteamDatagramCertificateSigned>()},
      {::_pbi::TcParser::GetTable<::CMsgSteamDatagramSessionCryptInfoSigned>()},
      {::_pbi::TcParser::GetTable<::CMsgSteamNetworkingIdentityLegacyBinary>()},
  }},
  {{
    "\43\0\0\0\0\0\0\0\0\0\17\0\0\0\0\0"
    "CMsgSteamSockets_UDP_ConnectRequest"
    "identity_string"
  }},
};
PROTOBUF_NOINLINE void CMsgSteamSockets_UDP_ConnectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamSockets_UDP_ConnectRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.identity_string_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.cert_ != nullptr);
      _impl_.cert_->Clear();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(_impl_.crypt_ != nullptr);
      _impl_.crypt_->Clear();
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      ABSL_DCHECK(_impl_.legacy_identity_binary_ != nullptr);
      _impl_.legacy_identity_binary_->Clear();
    }
  }
  if ((cached_has_bits & 0x000000f0u) != 0) {
    ::memset(&_impl_.challenge_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.ping_est_ms_) -
        reinterpret_cast<char*>(&_impl_.challenge_)) + sizeof(_impl_.ping_est_ms_));
  }
  if ((cached_has_bits & 0x00000300u) != 0) {
    ::memset(&_impl_.my_timestamp_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.legacy_protocol_version_) -
        reinterpret_cast<char*>(&_impl_.my_timestamp_)) + sizeof(_impl_.legacy_protocol_version_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CMsgSteamSockets_UDP_ConnectRequest::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CMsgSteamSockets_UDP_ConnectRequest& this_ = static_cast<const CMsgSteamSockets_UDP_ConnectRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CMsgSteamSockets_UDP_ConnectRequest::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CMsgSteamSockets_UDP_ConnectRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamSockets_UDP_ConnectRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional fixed32 client_connection_id = 1;
  if ((cached_has_bits & 0x00000040u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        1, this_._internal_client_connection_id(), target);
  }

  // optional fixed64 challenge = 2;
  if ((cached_has_bits & 0x00000010u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        2, this_._internal_challenge(), target);
  }

  // optional fixed64 legacy_client_steam_id = 3;
  if ((cached_has_bits & 0x00000020u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        3, this_._internal_legacy_client_steam_id(), target);
  }

  // optional .CMsgSteamDatagramCertificateSigned cert = 4;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        4, *this_._impl_.cert_, this_._impl_.cert_->GetCachedSize(), target,
        stream);
  }

  // optional fixed64 my_timestamp = 5;
  if ((cached_has_bits & 0x00000100u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        5, this_._internal_my_timestamp(), target);
  }

  // optional uint32 ping_est_ms = 6;
  if ((cached_has_bits & 0x00000080u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this_._internal_ping_est_ms(), target);
  }

  // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, *this_._impl_.crypt_, this_._impl_.crypt_->GetCachedSize(), target,
        stream);
  }

  // optional uint32 legacy_protocol_version = 8;
  if ((cached_has_bits & 0x00000200u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        8, this_._internal_legacy_protocol_version(), target);
  }

  // optional .CMsgSteamNetworkingIdentityLegacyBinary legacy_identity_binary = 9;
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        9, *this_._impl_.legacy_identity_binary_, this_._impl_.legacy_identity_binary_->GetCachedSize(), target,
        stream);
  }

  // optional string identity_string = 10;
  if ((cached_has_bits & 0x00000001u) != 0) {
    const std::string& _s = this_._internal_identity_string();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CMsgSteamSockets_UDP_ConnectRequest.identity_string");
    target = stream->WriteStringMaybeAliased(10, _s, target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamSockets_UDP_ConnectRequest)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CMsgSteamSockets_UDP_ConnectRequest::ByteSizeLong(const MessageLite& base) {
  const CMsgSteamSockets_UDP_ConnectRequest& this_ = static_cast<const CMsgSteamSockets_UDP_ConnectRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t CMsgSteamSockets_UDP_ConnectRequest::ByteSizeLong() const {
  const CMsgSteamSockets_UDP_ConnectRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:CMsgSteamSockets_UDP_ConnectRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += ::absl::popcount(0x00000130u & cached_has_bits) * 9;
  total_size += static_cast<bool>(0x00000040u & cached_has_bits) * 5;
  if ((cached_has_bits & 0x0000008fu) != 0) {
    // optional string identity_string = 10;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_identity_string());
    }
    // optional .CMsgSteamDatagramCertificateSigned cert = 4;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.cert_);
    }
    // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.crypt_);
    }
    // optional .CMsgSteamNetworkingIdentityLegacyBinary legacy_identity_binary = 9;
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.legacy_identity_binary_);
    }
    // optional uint32 ping_est_ms = 6;
    if ((cached_has_bits & 0x00000080u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_ping_est_ms());
    }
  }
   {
    // optional uint32 legacy_protocol_version = 8;
    if ((cached_has_bits & 0x00000200u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_legacy_protocol_version());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void CMsgSteamSockets_UDP_ConnectRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CMsgSteamSockets_UDP_ConnectRequest*>(&to_msg);
  auto& from = static_cast<const CMsgSteamSockets_UDP_ConnectRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamSockets_UDP_ConnectRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_internal_set_identity_string(from._internal_identity_string());
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.cert_ != nullptr);
      if (_this->_impl_.cert_ == nullptr) {
        _this->_impl_.cert_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.cert_);
      } else {
        _this->_impl_.cert_->MergeFrom(*from._impl_.cert_);
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(from._impl_.crypt_ != nullptr);
      if (_this->_impl_.crypt_ == nullptr) {
        _this->_impl_.crypt_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.crypt_);
      } else {
        _this->_impl_.crypt_->MergeFrom(*from._impl_.crypt_);
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      ABSL_DCHECK(from._impl_.legacy_identity_binary_ != nullptr);
      if (_this->_impl_.legacy_identity_binary_ == nullptr) {
        _this->_impl_.legacy_identity_binary_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.legacy_identity_binary_);
      } else {
        _this->_impl_.legacy_identity_binary_->MergeFrom(*from._impl_.legacy_identity_binary_);
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _this->_impl_.challenge_ = from._impl_.challenge_;
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      _this->_impl_.legacy_client_steam_id_ = from._impl_.legacy_client_steam_id_;
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      _this->_impl_.client_connection_id_ = from._impl_.client_connection_id_;
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      _this->_impl_.ping_est_ms_ = from._impl_.ping_est_ms_;
    }
  }
  if ((cached_has_bits & 0x00000300u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      _this->_impl_.my_timestamp_ = from._impl_.my_timestamp_;
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      _this->_impl_.legacy_protocol_version_ = from._impl_.legacy_protocol_version_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamSockets_UDP_ConnectRequest::CopyFrom(const CMsgSteamSockets_UDP_ConnectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamSockets_UDP_ConnectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CMsgSteamSockets_UDP_ConnectRequest::InternalSwap(CMsgSteamSockets_UDP_ConnectRequest* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.identity_string_, &other->_impl_.identity_string_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectRequest, _impl_.legacy_protocol_version_)
      + sizeof(CMsgSteamSockets_UDP_ConnectRequest::_impl_.legacy_protocol_version_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectRequest, _impl_.cert_)>(
          reinterpret_cast<char*>(&_impl_.cert_),
          reinterpret_cast<char*>(&other->_impl_.cert_));
}

::google::protobuf::Metadata CMsgSteamSockets_UDP_ConnectRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CMsgSteamSockets_UDP_ConnectOK::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CMsgSteamSockets_UDP_ConnectOK>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectOK, _impl_._has_bits_);
};

void CMsgSteamSockets_UDP_ConnectOK::clear_crypt() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.crypt_ != nullptr) _impl_.crypt_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void CMsgSteamSockets_UDP_ConnectOK::clear_cert() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.cert_ != nullptr) _impl_.cert_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void CMsgSteamSockets_UDP_ConnectOK::clear_legacy_identity_binary() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.legacy_identity_binary_ != nullptr) _impl_.legacy_identity_binary_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
CMsgSteamSockets_UDP_ConnectOK::CMsgSteamSockets_UDP_ConnectOK(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamSockets_UDP_ConnectOK_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamSockets_UDP_ConnectOK)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamSockets_UDP_ConnectOK::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::CMsgSteamSockets_UDP_ConnectOK& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        identity_string_(arena, from.identity_string_) {}

CMsgSteamSockets_UDP_ConnectOK::CMsgSteamSockets_UDP_ConnectOK(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const CMsgSteamSockets_UDP_ConnectOK& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamSockets_UDP_ConnectOK_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CMsgSteamSockets_UDP_ConnectOK* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.crypt_ = ((cached_has_bits & 0x00000002u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.crypt_)
                : nullptr;
  _impl_.cert_ = ((cached_has_bits & 0x00000004u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.cert_)
                : nullptr;
  _impl_.legacy_identity_binary_ = ((cached_has_bits & 0x00000008u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.legacy_identity_binary_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, legacy_server_steam_id_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, legacy_server_steam_id_),
           offsetof(Impl_, server_connection_id_) -
               offsetof(Impl_, legacy_server_steam_id_) +
               sizeof(Impl_::server_connection_id_));

  // @@protoc_insertion_point(copy_constructor:CMsgSteamSockets_UDP_ConnectOK)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamSockets_UDP_ConnectOK::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        identity_string_(arena) {}

inline void CMsgSteamSockets_UDP_ConnectOK::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, crypt_),
           0,
           offsetof(Impl_, server_connection_id_) -
               offsetof(Impl_, crypt_) +
               sizeof(Impl_::server_connection_id_));
}
CMsgSteamSockets_UDP_ConnectOK::~CMsgSteamSockets_UDP_ConnectOK() {
  // @@protoc_insertion_point(destructor:CMsgSteamSockets_UDP_ConnectOK)
  SharedDtor(*this);
}
inline void CMsgSteamSockets_UDP_ConnectOK::SharedDtor(MessageLite& self) {
  CMsgSteamSockets_UDP_ConnectOK& this_ = static_cast<CMsgSteamSockets_UDP_ConnectOK&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.identity_string_.Destroy();
  delete this_._impl_.crypt_;
  delete this_._impl_.cert_;
  delete this_._impl_.legacy_identity_binary_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CMsgSteamSockets_UDP_ConnectOK::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CMsgSteamSockets_UDP_ConnectOK(arena);
}
constexpr auto CMsgSteamSockets_UDP_ConnectOK::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(CMsgSteamSockets_UDP_ConnectOK),
                                            alignof(CMsgSteamSockets_UDP_ConnectOK));
}
constexpr auto CMsgSteamSockets_UDP_ConnectOK::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CMsgSteamSockets_UDP_ConnectOK_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CMsgSteamSockets_UDP_ConnectOK::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CMsgSteamSockets_UDP_ConnectOK>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CMsgSteamSockets_UDP_ConnectOK::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CMsgSteamSockets_UDP_ConnectOK>(), &CMsgSteamSockets_UDP_ConnectOK::ByteSizeLong,
              &CMsgSteamSockets_UDP_ConnectOK::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectOK, _impl_._cached_size_),
          false,
      },
      &CMsgSteamSockets_UDP_ConnectOK::kDescriptorMethods,
      &descriptor_table_steamnetworkingsockets_5fmessages_5fudp_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        CMsgSteamSockets_UDP_ConnectOK_class_data_ =
            CMsgSteamSockets_UDP_ConnectOK::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL CMsgSteamSockets_UDP_ConnectOK::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CMsgSteamSockets_UDP_ConnectOK_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CMsgSteamSockets_UDP_ConnectOK_class_data_.tc_table);
  return CMsgSteamSockets_UDP_ConnectOK_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 9, 3, 62, 2>
CMsgSteamSockets_UDP_ConnectOK::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectOK, _impl_._has_bits_),
    0, // no _extensions_
    11, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294965536,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    CMsgSteamSockets_UDP_ConnectOK_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CMsgSteamSockets_UDP_ConnectOK>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional fixed32 client_connection_id = 1;
    {::_pbi::TcParser::FastF32S1,
     {13, 5, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectOK, _impl_.client_connection_id_)}},
    // optional fixed64 legacy_server_steam_id = 2;
    {::_pbi::TcParser::FastF64S1,
     {17, 4, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectOK, _impl_.legacy_server_steam_id_)}},
    // optional fixed64 your_timestamp = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 7, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectOK, _impl_.your_timestamp_)}},
    // optional uint32 delay_time_usec = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamSockets_UDP_ConnectOK, _impl_.delay_time_usec_), 6>(),
     {32, 6, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectOK, _impl_.delay_time_usec_)}},
    // optional fixed32 server_connection_id = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 8, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectOK, _impl_.server_connection_id_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectOK, _impl_.crypt_)}},
    // optional .CMsgSteamDatagramCertificateSigned cert = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 2, 1, PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectOK, _impl_.cert_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional .CMsgSteamNetworkingIdentityLegacyBinary legacy_identity_binary = 10;
    {::_pbi::TcParser::FastMtS1,
     {82, 3, 2, PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectOK, _impl_.legacy_identity_binary_)}},
    // optional string identity_string = 11;
    {::_pbi::TcParser::FastSS1,
     {90, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectOK, _impl_.identity_string_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional fixed32 client_connection_id = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectOK, _impl_.client_connection_id_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional fixed64 legacy_server_steam_id = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectOK, _impl_.legacy_server_steam_id_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
    // optional fixed64 your_timestamp = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectOK, _impl_.your_timestamp_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed64)},
    // optional uint32 delay_time_usec = 4;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectOK, _impl_.delay_time_usec_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional fixed32 server_connection_id = 5;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectOK, _impl_.server_connection_id_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectOK, _impl_.crypt_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .CMsgSteamDatagramCertificateSigned cert = 8;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectOK, _impl_.cert_), _Internal::kHasBitsOffset + 2, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .CMsgSteamNetworkingIdentityLegacyBinary legacy_identity_binary = 10;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectOK, _impl_.legacy_identity_binary_), _Internal::kHasBitsOffset + 3, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional string identity_string = 11;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectOK, _impl_.identity_string_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::CMsgSteamDatagramSessionCryptInfoSigned>()},
      {::_pbi::TcParser::GetTable<::CMsgSteamDatagramCertificateSigned>()},
      {::_pbi::TcParser::GetTable<::CMsgSteamNetworkingIdentityLegacyBinary>()},
  }},
  {{
    "\36\0\0\0\0\0\0\0\0\17\0\0\0\0\0\0"
    "CMsgSteamSockets_UDP_ConnectOK"
    "identity_string"
  }},
};
PROTOBUF_NOINLINE void CMsgSteamSockets_UDP_ConnectOK::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamSockets_UDP_ConnectOK)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.identity_string_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(_impl_.crypt_ != nullptr);
      _impl_.crypt_->Clear();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(_impl_.cert_ != nullptr);
      _impl_.cert_->Clear();
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      ABSL_DCHECK(_impl_.legacy_identity_binary_ != nullptr);
      _impl_.legacy_identity_binary_->Clear();
    }
  }
  if ((cached_has_bits & 0x000000f0u) != 0) {
    ::memset(&_impl_.legacy_server_steam_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.your_timestamp_) -
        reinterpret_cast<char*>(&_impl_.legacy_server_steam_id_)) + sizeof(_impl_.your_timestamp_));
  }
  _impl_.server_connection_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CMsgSteamSockets_UDP_ConnectOK::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CMsgSteamSockets_UDP_ConnectOK& this_ = static_cast<const CMsgSteamSockets_UDP_ConnectOK&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CMsgSteamSockets_UDP_ConnectOK::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CMsgSteamSockets_UDP_ConnectOK& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamSockets_UDP_ConnectOK)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional fixed32 client_connection_id = 1;
  if ((cached_has_bits & 0x00000020u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        1, this_._internal_client_connection_id(), target);
  }

  // optional fixed64 legacy_server_steam_id = 2;
  if ((cached_has_bits & 0x00000010u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        2, this_._internal_legacy_server_steam_id(), target);
  }

  // optional fixed64 your_timestamp = 3;
  if ((cached_has_bits & 0x00000080u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(
        3, this_._internal_your_timestamp(), target);
  }

  // optional uint32 delay_time_usec = 4;
  if ((cached_has_bits & 0x00000040u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this_._internal_delay_time_usec(), target);
  }

  // optional fixed32 server_connection_id = 5;
  if ((cached_has_bits & 0x00000100u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        5, this_._internal_server_connection_id(), target);
  }

  // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        7, *this_._impl_.crypt_, this_._impl_.crypt_->GetCachedSize(), target,
        stream);
  }

  // optional .CMsgSteamDatagramCertificateSigned cert = 8;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        8, *this_._impl_.cert_, this_._impl_.cert_->GetCachedSize(), target,
        stream);
  }

  // optional .CMsgSteamNetworkingIdentityLegacyBinary legacy_identity_binary = 10;
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        10, *this_._impl_.legacy_identity_binary_, this_._impl_.legacy_identity_binary_->GetCachedSize(), target,
        stream);
  }

  // optional string identity_string = 11;
  if ((cached_has_bits & 0x00000001u) != 0) {
    const std::string& _s = this_._internal_identity_string();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CMsgSteamSockets_UDP_ConnectOK.identity_string");
    target = stream->WriteStringMaybeAliased(11, _s, target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamSockets_UDP_ConnectOK)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CMsgSteamSockets_UDP_ConnectOK::ByteSizeLong(const MessageLite& base) {
  const CMsgSteamSockets_UDP_ConnectOK& this_ = static_cast<const CMsgSteamSockets_UDP_ConnectOK&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t CMsgSteamSockets_UDP_ConnectOK::ByteSizeLong() const {
  const CMsgSteamSockets_UDP_ConnectOK& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:CMsgSteamSockets_UDP_ConnectOK)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += ::absl::popcount(0x00000090u & cached_has_bits) * 9;
  total_size += ::absl::popcount(0x00000120u & cached_has_bits) * 5;
  if ((cached_has_bits & 0x0000004fu) != 0) {
    // optional string identity_string = 11;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_identity_string());
    }
    // optional .CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.crypt_);
    }
    // optional .CMsgSteamDatagramCertificateSigned cert = 8;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.cert_);
    }
    // optional .CMsgSteamNetworkingIdentityLegacyBinary legacy_identity_binary = 10;
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.legacy_identity_binary_);
    }
    // optional uint32 delay_time_usec = 4;
    if ((cached_has_bits & 0x00000040u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_delay_time_usec());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void CMsgSteamSockets_UDP_ConnectOK::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CMsgSteamSockets_UDP_ConnectOK*>(&to_msg);
  auto& from = static_cast<const CMsgSteamSockets_UDP_ConnectOK&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamSockets_UDP_ConnectOK)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_internal_set_identity_string(from._internal_identity_string());
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      ABSL_DCHECK(from._impl_.crypt_ != nullptr);
      if (_this->_impl_.crypt_ == nullptr) {
        _this->_impl_.crypt_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.crypt_);
      } else {
        _this->_impl_.crypt_->MergeFrom(*from._impl_.crypt_);
      }
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      ABSL_DCHECK(from._impl_.cert_ != nullptr);
      if (_this->_impl_.cert_ == nullptr) {
        _this->_impl_.cert_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.cert_);
      } else {
        _this->_impl_.cert_->MergeFrom(*from._impl_.cert_);
      }
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      ABSL_DCHECK(from._impl_.legacy_identity_binary_ != nullptr);
      if (_this->_impl_.legacy_identity_binary_ == nullptr) {
        _this->_impl_.legacy_identity_binary_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.legacy_identity_binary_);
      } else {
        _this->_impl_.legacy_identity_binary_->MergeFrom(*from._impl_.legacy_identity_binary_);
      }
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _this->_impl_.legacy_server_steam_id_ = from._impl_.legacy_server_steam_id_;
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      _this->_impl_.client_connection_id_ = from._impl_.client_connection_id_;
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      _this->_impl_.delay_time_usec_ = from._impl_.delay_time_usec_;
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      _this->_impl_.your_timestamp_ = from._impl_.your_timestamp_;
    }
  }
  if ((cached_has_bits & 0x00000100u) != 0) {
    _this->_impl_.server_connection_id_ = from._impl_.server_connection_id_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamSockets_UDP_ConnectOK::CopyFrom(const CMsgSteamSockets_UDP_ConnectOK& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamSockets_UDP_ConnectOK)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CMsgSteamSockets_UDP_ConnectOK::InternalSwap(CMsgSteamSockets_UDP_ConnectOK* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.identity_string_, &other->_impl_.identity_string_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectOK, _impl_.server_connection_id_)
      + sizeof(CMsgSteamSockets_UDP_ConnectOK::_impl_.server_connection_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectOK, _impl_.crypt_)>(
          reinterpret_cast<char*>(&_impl_.crypt_),
          reinterpret_cast<char*>(&other->_impl_.crypt_));
}

::google::protobuf::Metadata CMsgSteamSockets_UDP_ConnectOK::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CMsgSteamSockets_UDP_ConnectionClosed::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CMsgSteamSockets_UDP_ConnectionClosed>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectionClosed, _impl_._has_bits_);
};

CMsgSteamSockets_UDP_ConnectionClosed::CMsgSteamSockets_UDP_ConnectionClosed(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamSockets_UDP_ConnectionClosed_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamSockets_UDP_ConnectionClosed)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamSockets_UDP_ConnectionClosed::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::CMsgSteamSockets_UDP_ConnectionClosed& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        debug_(arena, from.debug_) {}

CMsgSteamSockets_UDP_ConnectionClosed::CMsgSteamSockets_UDP_ConnectionClosed(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const CMsgSteamSockets_UDP_ConnectionClosed& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamSockets_UDP_ConnectionClosed_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CMsgSteamSockets_UDP_ConnectionClosed* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, reason_code_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, reason_code_),
           offsetof(Impl_, from_connection_id_) -
               offsetof(Impl_, reason_code_) +
               sizeof(Impl_::from_connection_id_));

  // @@protoc_insertion_point(copy_constructor:CMsgSteamSockets_UDP_ConnectionClosed)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamSockets_UDP_ConnectionClosed::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        debug_(arena) {}

inline void CMsgSteamSockets_UDP_ConnectionClosed::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, reason_code_),
           0,
           offsetof(Impl_, from_connection_id_) -
               offsetof(Impl_, reason_code_) +
               sizeof(Impl_::from_connection_id_));
}
CMsgSteamSockets_UDP_ConnectionClosed::~CMsgSteamSockets_UDP_ConnectionClosed() {
  // @@protoc_insertion_point(destructor:CMsgSteamSockets_UDP_ConnectionClosed)
  SharedDtor(*this);
}
inline void CMsgSteamSockets_UDP_ConnectionClosed::SharedDtor(MessageLite& self) {
  CMsgSteamSockets_UDP_ConnectionClosed& this_ = static_cast<CMsgSteamSockets_UDP_ConnectionClosed&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.debug_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CMsgSteamSockets_UDP_ConnectionClosed::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CMsgSteamSockets_UDP_ConnectionClosed(arena);
}
constexpr auto CMsgSteamSockets_UDP_ConnectionClosed::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(CMsgSteamSockets_UDP_ConnectionClosed),
                                            alignof(CMsgSteamSockets_UDP_ConnectionClosed));
}
constexpr auto CMsgSteamSockets_UDP_ConnectionClosed::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CMsgSteamSockets_UDP_ConnectionClosed_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CMsgSteamSockets_UDP_ConnectionClosed::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CMsgSteamSockets_UDP_ConnectionClosed>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CMsgSteamSockets_UDP_ConnectionClosed::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CMsgSteamSockets_UDP_ConnectionClosed>(), &CMsgSteamSockets_UDP_ConnectionClosed::ByteSizeLong,
              &CMsgSteamSockets_UDP_ConnectionClosed::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectionClosed, _impl_._cached_size_),
          false,
      },
      &CMsgSteamSockets_UDP_ConnectionClosed::kDescriptorMethods,
      &descriptor_table_steamnetworkingsockets_5fmessages_5fudp_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        CMsgSteamSockets_UDP_ConnectionClosed_class_data_ =
            CMsgSteamSockets_UDP_ConnectionClosed::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL CMsgSteamSockets_UDP_ConnectionClosed::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CMsgSteamSockets_UDP_ConnectionClosed_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CMsgSteamSockets_UDP_ConnectionClosed_class_data_.tc_table);
  return CMsgSteamSockets_UDP_ConnectionClosed_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 51, 2>
CMsgSteamSockets_UDP_ConnectionClosed::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectionClosed, _impl_._has_bits_),
    0, // no _extensions_
    5, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967265,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    CMsgSteamSockets_UDP_ConnectionClosed_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CMsgSteamSockets_UDP_ConnectionClosed>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional fixed32 to_connection_id = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 2, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectionClosed, _impl_.to_connection_id_)}},
    // optional fixed32 from_connection_id = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 3, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectionClosed, _impl_.from_connection_id_)}},
    // optional string debug = 2;
    {::_pbi::TcParser::FastSS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectionClosed, _impl_.debug_)}},
    // optional uint32 reason_code = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamSockets_UDP_ConnectionClosed, _impl_.reason_code_), 1>(),
     {24, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectionClosed, _impl_.reason_code_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string debug = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectionClosed, _impl_.debug_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional uint32 reason_code = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectionClosed, _impl_.reason_code_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional fixed32 to_connection_id = 4;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectionClosed, _impl_.to_connection_id_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional fixed32 from_connection_id = 5;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectionClosed, _impl_.from_connection_id_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
  }},
  // no aux_entries
  {{
    "\45\5\0\0\0\0\0\0"
    "CMsgSteamSockets_UDP_ConnectionClosed"
    "debug"
  }},
};
PROTOBUF_NOINLINE void CMsgSteamSockets_UDP_ConnectionClosed::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamSockets_UDP_ConnectionClosed)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    _impl_.debug_.ClearNonDefaultToEmpty();
  }
  if ((cached_has_bits & 0x0000000eu) != 0) {
    ::memset(&_impl_.reason_code_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.from_connection_id_) -
        reinterpret_cast<char*>(&_impl_.reason_code_)) + sizeof(_impl_.from_connection_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CMsgSteamSockets_UDP_ConnectionClosed::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CMsgSteamSockets_UDP_ConnectionClosed& this_ = static_cast<const CMsgSteamSockets_UDP_ConnectionClosed&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CMsgSteamSockets_UDP_ConnectionClosed::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CMsgSteamSockets_UDP_ConnectionClosed& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamSockets_UDP_ConnectionClosed)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional string debug = 2;
  if ((cached_has_bits & 0x00000001u) != 0) {
    const std::string& _s = this_._internal_debug();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CMsgSteamSockets_UDP_ConnectionClosed.debug");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional uint32 reason_code = 3;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this_._internal_reason_code(), target);
  }

  // optional fixed32 to_connection_id = 4;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        4, this_._internal_to_connection_id(), target);
  }

  // optional fixed32 from_connection_id = 5;
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        5, this_._internal_from_connection_id(), target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamSockets_UDP_ConnectionClosed)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CMsgSteamSockets_UDP_ConnectionClosed::ByteSizeLong(const MessageLite& base) {
  const CMsgSteamSockets_UDP_ConnectionClosed& this_ = static_cast<const CMsgSteamSockets_UDP_ConnectionClosed&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t CMsgSteamSockets_UDP_ConnectionClosed::ByteSizeLong() const {
  const CMsgSteamSockets_UDP_ConnectionClosed& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:CMsgSteamSockets_UDP_ConnectionClosed)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += ::absl::popcount(0x0000000cu & cached_has_bits) * 5;
  if ((cached_has_bits & 0x00000003u) != 0) {
    // optional string debug = 2;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_debug());
    }
    // optional uint32 reason_code = 3;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_reason_code());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void CMsgSteamSockets_UDP_ConnectionClosed::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CMsgSteamSockets_UDP_ConnectionClosed*>(&to_msg);
  auto& from = static_cast<const CMsgSteamSockets_UDP_ConnectionClosed&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamSockets_UDP_ConnectionClosed)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000000fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_internal_set_debug(from._internal_debug());
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_impl_.reason_code_ = from._impl_.reason_code_;
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_impl_.to_connection_id_ = from._impl_.to_connection_id_;
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _this->_impl_.from_connection_id_ = from._impl_.from_connection_id_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamSockets_UDP_ConnectionClosed::CopyFrom(const CMsgSteamSockets_UDP_ConnectionClosed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamSockets_UDP_ConnectionClosed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CMsgSteamSockets_UDP_ConnectionClosed::InternalSwap(CMsgSteamSockets_UDP_ConnectionClosed* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.debug_, &other->_impl_.debug_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectionClosed, _impl_.from_connection_id_)
      + sizeof(CMsgSteamSockets_UDP_ConnectionClosed::_impl_.from_connection_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_ConnectionClosed, _impl_.reason_code_)>(
          reinterpret_cast<char*>(&_impl_.reason_code_),
          reinterpret_cast<char*>(&other->_impl_.reason_code_));
}

::google::protobuf::Metadata CMsgSteamSockets_UDP_ConnectionClosed::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CMsgSteamSockets_UDP_NoConnection::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CMsgSteamSockets_UDP_NoConnection>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_NoConnection, _impl_._has_bits_);
};

CMsgSteamSockets_UDP_NoConnection::CMsgSteamSockets_UDP_NoConnection(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamSockets_UDP_NoConnection_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamSockets_UDP_NoConnection)
}
CMsgSteamSockets_UDP_NoConnection::CMsgSteamSockets_UDP_NoConnection(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const CMsgSteamSockets_UDP_NoConnection& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamSockets_UDP_NoConnection_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
}
PROTOBUF_NDEBUG_INLINE CMsgSteamSockets_UDP_NoConnection::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void CMsgSteamSockets_UDP_NoConnection::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, from_connection_id_),
           0,
           offsetof(Impl_, to_connection_id_) -
               offsetof(Impl_, from_connection_id_) +
               sizeof(Impl_::to_connection_id_));
}
CMsgSteamSockets_UDP_NoConnection::~CMsgSteamSockets_UDP_NoConnection() {
  // @@protoc_insertion_point(destructor:CMsgSteamSockets_UDP_NoConnection)
  SharedDtor(*this);
}
inline void CMsgSteamSockets_UDP_NoConnection::SharedDtor(MessageLite& self) {
  CMsgSteamSockets_UDP_NoConnection& this_ = static_cast<CMsgSteamSockets_UDP_NoConnection&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CMsgSteamSockets_UDP_NoConnection::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CMsgSteamSockets_UDP_NoConnection(arena);
}
constexpr auto CMsgSteamSockets_UDP_NoConnection::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(CMsgSteamSockets_UDP_NoConnection),
                                            alignof(CMsgSteamSockets_UDP_NoConnection));
}
constexpr auto CMsgSteamSockets_UDP_NoConnection::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CMsgSteamSockets_UDP_NoConnection_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CMsgSteamSockets_UDP_NoConnection::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CMsgSteamSockets_UDP_NoConnection>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CMsgSteamSockets_UDP_NoConnection::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CMsgSteamSockets_UDP_NoConnection>(), &CMsgSteamSockets_UDP_NoConnection::ByteSizeLong,
              &CMsgSteamSockets_UDP_NoConnection::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_NoConnection, _impl_._cached_size_),
          false,
      },
      &CMsgSteamSockets_UDP_NoConnection::kDescriptorMethods,
      &descriptor_table_steamnetworkingsockets_5fmessages_5fudp_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        CMsgSteamSockets_UDP_NoConnection_class_data_ =
            CMsgSteamSockets_UDP_NoConnection::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL CMsgSteamSockets_UDP_NoConnection::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CMsgSteamSockets_UDP_NoConnection_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CMsgSteamSockets_UDP_NoConnection_class_data_.tc_table);
  return CMsgSteamSockets_UDP_NoConnection_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2>
CMsgSteamSockets_UDP_NoConnection::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_NoConnection, _impl_._has_bits_),
    0, // no _extensions_
    3, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967289,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    CMsgSteamSockets_UDP_NoConnection_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CMsgSteamSockets_UDP_NoConnection>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional fixed32 from_connection_id = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_NoConnection, _impl_.from_connection_id_)}},
    // optional fixed32 to_connection_id = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_NoConnection, _impl_.to_connection_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional fixed32 from_connection_id = 2;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_NoConnection, _impl_.from_connection_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional fixed32 to_connection_id = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_NoConnection, _impl_.to_connection_id_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
  }},
  // no aux_entries
  {{
  }},
};
PROTOBUF_NOINLINE void CMsgSteamSockets_UDP_NoConnection::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamSockets_UDP_NoConnection)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    ::memset(&_impl_.from_connection_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.to_connection_id_) -
        reinterpret_cast<char*>(&_impl_.from_connection_id_)) + sizeof(_impl_.to_connection_id_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CMsgSteamSockets_UDP_NoConnection::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CMsgSteamSockets_UDP_NoConnection& this_ = static_cast<const CMsgSteamSockets_UDP_NoConnection&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CMsgSteamSockets_UDP_NoConnection::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CMsgSteamSockets_UDP_NoConnection& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamSockets_UDP_NoConnection)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional fixed32 from_connection_id = 2;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        2, this_._internal_from_connection_id(), target);
  }

  // optional fixed32 to_connection_id = 3;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        3, this_._internal_to_connection_id(), target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamSockets_UDP_NoConnection)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CMsgSteamSockets_UDP_NoConnection::ByteSizeLong(const MessageLite& base) {
  const CMsgSteamSockets_UDP_NoConnection& this_ = static_cast<const CMsgSteamSockets_UDP_NoConnection&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t CMsgSteamSockets_UDP_NoConnection::ByteSizeLong() const {
  const CMsgSteamSockets_UDP_NoConnection& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:CMsgSteamSockets_UDP_NoConnection)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += ::absl::popcount(0x00000003u & cached_has_bits) * 5;
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void CMsgSteamSockets_UDP_NoConnection::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CMsgSteamSockets_UDP_NoConnection*>(&to_msg);
  auto& from = static_cast<const CMsgSteamSockets_UDP_NoConnection&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamSockets_UDP_NoConnection)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_impl_.from_connection_id_ = from._impl_.from_connection_id_;
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_impl_.to_connection_id_ = from._impl_.to_connection_id_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamSockets_UDP_NoConnection::CopyFrom(const CMsgSteamSockets_UDP_NoConnection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamSockets_UDP_NoConnection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CMsgSteamSockets_UDP_NoConnection::InternalSwap(CMsgSteamSockets_UDP_NoConnection* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_NoConnection, _impl_.to_connection_id_)
      + sizeof(CMsgSteamSockets_UDP_NoConnection::_impl_.to_connection_id_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_NoConnection, _impl_.from_connection_id_)>(
          reinterpret_cast<char*>(&_impl_.from_connection_id_),
          reinterpret_cast<char*>(&other->_impl_.from_connection_id_));
}

::google::protobuf::Metadata CMsgSteamSockets_UDP_NoConnection::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CMsgSteamSockets_UDP_Stats::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CMsgSteamSockets_UDP_Stats>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_Stats, _impl_._has_bits_);
};

void CMsgSteamSockets_UDP_Stats::clear_stats() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.stats_ != nullptr) _impl_.stats_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
CMsgSteamSockets_UDP_Stats::CMsgSteamSockets_UDP_Stats(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamSockets_UDP_Stats_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CMsgSteamSockets_UDP_Stats)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamSockets_UDP_Stats::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::CMsgSteamSockets_UDP_Stats& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

CMsgSteamSockets_UDP_Stats::CMsgSteamSockets_UDP_Stats(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const CMsgSteamSockets_UDP_Stats& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CMsgSteamSockets_UDP_Stats_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CMsgSteamSockets_UDP_Stats* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.stats_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.stats_)
                : nullptr;
  _impl_.flags_ = from._impl_.flags_;

  // @@protoc_insertion_point(copy_constructor:CMsgSteamSockets_UDP_Stats)
}
PROTOBUF_NDEBUG_INLINE CMsgSteamSockets_UDP_Stats::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void CMsgSteamSockets_UDP_Stats::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, stats_),
           0,
           offsetof(Impl_, flags_) -
               offsetof(Impl_, stats_) +
               sizeof(Impl_::flags_));
}
CMsgSteamSockets_UDP_Stats::~CMsgSteamSockets_UDP_Stats() {
  // @@protoc_insertion_point(destructor:CMsgSteamSockets_UDP_Stats)
  SharedDtor(*this);
}
inline void CMsgSteamSockets_UDP_Stats::SharedDtor(MessageLite& self) {
  CMsgSteamSockets_UDP_Stats& this_ = static_cast<CMsgSteamSockets_UDP_Stats&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.stats_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CMsgSteamSockets_UDP_Stats::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CMsgSteamSockets_UDP_Stats(arena);
}
constexpr auto CMsgSteamSockets_UDP_Stats::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(CMsgSteamSockets_UDP_Stats),
                                            alignof(CMsgSteamSockets_UDP_Stats));
}
constexpr auto CMsgSteamSockets_UDP_Stats::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CMsgSteamSockets_UDP_Stats_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CMsgSteamSockets_UDP_Stats::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CMsgSteamSockets_UDP_Stats>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CMsgSteamSockets_UDP_Stats::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CMsgSteamSockets_UDP_Stats>(), &CMsgSteamSockets_UDP_Stats::ByteSizeLong,
              &CMsgSteamSockets_UDP_Stats::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_Stats, _impl_._cached_size_),
          false,
      },
      &CMsgSteamSockets_UDP_Stats::kDescriptorMethods,
      &descriptor_table_steamnetworkingsockets_5fmessages_5fudp_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        CMsgSteamSockets_UDP_Stats_class_data_ =
            CMsgSteamSockets_UDP_Stats::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL CMsgSteamSockets_UDP_Stats::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CMsgSteamSockets_UDP_Stats_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CMsgSteamSockets_UDP_Stats_class_data_.tc_table);
  return CMsgSteamSockets_UDP_Stats_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 2, 1, 0, 2>
CMsgSteamSockets_UDP_Stats::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_Stats, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967290,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    CMsgSteamSockets_UDP_Stats_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CMsgSteamSockets_UDP_Stats>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional .CMsgSteamDatagramConnectionQuality stats = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_Stats, _impl_.stats_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional uint32 flags = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CMsgSteamSockets_UDP_Stats, _impl_.flags_), 1>(),
     {24, 1, 0, PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_Stats, _impl_.flags_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .CMsgSteamDatagramConnectionQuality stats = 1;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_Stats, _impl_.stats_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional uint32 flags = 3;
    {PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_Stats, _impl_.flags_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::CMsgSteamDatagramConnectionQuality>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void CMsgSteamSockets_UDP_Stats::Clear() {
// @@protoc_insertion_point(message_clear_start:CMsgSteamSockets_UDP_Stats)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(_impl_.stats_ != nullptr);
    _impl_.stats_->Clear();
  }
  _impl_.flags_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CMsgSteamSockets_UDP_Stats::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CMsgSteamSockets_UDP_Stats& this_ = static_cast<const CMsgSteamSockets_UDP_Stats&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CMsgSteamSockets_UDP_Stats::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CMsgSteamSockets_UDP_Stats& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:CMsgSteamSockets_UDP_Stats)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional .CMsgSteamDatagramConnectionQuality stats = 1;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        1, *this_._impl_.stats_, this_._impl_.stats_->GetCachedSize(), target,
        stream);
  }

  // optional uint32 flags = 3;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this_._internal_flags(), target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CMsgSteamSockets_UDP_Stats)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CMsgSteamSockets_UDP_Stats::ByteSizeLong(const MessageLite& base) {
  const CMsgSteamSockets_UDP_Stats& this_ = static_cast<const CMsgSteamSockets_UDP_Stats&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t CMsgSteamSockets_UDP_Stats::ByteSizeLong() const {
  const CMsgSteamSockets_UDP_Stats& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:CMsgSteamSockets_UDP_Stats)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    // optional .CMsgSteamDatagramConnectionQuality stats = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.stats_);
    }
    // optional uint32 flags = 3;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_flags());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void CMsgSteamSockets_UDP_Stats::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CMsgSteamSockets_UDP_Stats*>(&to_msg);
  auto& from = static_cast<const CMsgSteamSockets_UDP_Stats&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:CMsgSteamSockets_UDP_Stats)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.stats_ != nullptr);
      if (_this->_impl_.stats_ == nullptr) {
        _this->_impl_.stats_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.stats_);
      } else {
        _this->_impl_.stats_->MergeFrom(*from._impl_.stats_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_impl_.flags_ = from._impl_.flags_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CMsgSteamSockets_UDP_Stats::CopyFrom(const CMsgSteamSockets_UDP_Stats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CMsgSteamSockets_UDP_Stats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CMsgSteamSockets_UDP_Stats::InternalSwap(CMsgSteamSockets_UDP_Stats* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_Stats, _impl_.flags_)
      + sizeof(CMsgSteamSockets_UDP_Stats::_impl_.flags_)
      - PROTOBUF_FIELD_OFFSET(CMsgSteamSockets_UDP_Stats, _impl_.stats_)>(
          reinterpret_cast<char*>(&_impl_.stats_),
          reinterpret_cast<char*>(&other->_impl_.stats_));
}

::google::protobuf::Metadata CMsgSteamSockets_UDP_Stats::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ [[maybe_unused]] =
        (::_pbi::AddDescriptors(&descriptor_table_steamnetworkingsockets_5fmessages_5fudp_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"

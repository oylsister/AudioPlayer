// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: steamnetworkingsockets_messages_certs.proto
// Protobuf C++ Version: 6.30.0-rc1

#ifndef steamnetworkingsockets_5fmessages_5fcerts_2eproto_2epb_2eh
#define steamnetworkingsockets_5fmessages_5fcerts_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6030000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_steamnetworkingsockets_5fmessages_5fcerts_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_steamnetworkingsockets_5fmessages_5fcerts_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
extern const ::google::protobuf::internal::DescriptorTable descriptor_table_steamnetworkingsockets_5fmessages_5fcerts_2eproto;
}  // extern "C"
enum CMsgSteamDatagramCertificate_EKeyType : int;
extern const uint32_t CMsgSteamDatagramCertificate_EKeyType_internal_data_[];
class CMsgSteamDatagramCertificate;
struct CMsgSteamDatagramCertificateDefaultTypeInternal;
extern CMsgSteamDatagramCertificateDefaultTypeInternal _CMsgSteamDatagramCertificate_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull CMsgSteamDatagramCertificate_class_data_;
class CMsgSteamDatagramCertificateRequest;
struct CMsgSteamDatagramCertificateRequestDefaultTypeInternal;
extern CMsgSteamDatagramCertificateRequestDefaultTypeInternal _CMsgSteamDatagramCertificateRequest_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull CMsgSteamDatagramCertificateRequest_class_data_;
class CMsgSteamDatagramCertificateSigned;
struct CMsgSteamDatagramCertificateSignedDefaultTypeInternal;
extern CMsgSteamDatagramCertificateSignedDefaultTypeInternal _CMsgSteamDatagramCertificateSigned_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull CMsgSteamDatagramCertificateSigned_class_data_;
class CMsgSteamNetworkingIdentityLegacyBinary;
struct CMsgSteamNetworkingIdentityLegacyBinaryDefaultTypeInternal;
extern CMsgSteamNetworkingIdentityLegacyBinaryDefaultTypeInternal _CMsgSteamNetworkingIdentityLegacyBinary_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull CMsgSteamNetworkingIdentityLegacyBinary_class_data_;
namespace google {
namespace protobuf {
template <>
internal::EnumTraitsT<::CMsgSteamDatagramCertificate_EKeyType_internal_data_>
    internal::EnumTraitsImpl::value<::CMsgSteamDatagramCertificate_EKeyType>;
}  // namespace protobuf
}  // namespace google

enum CMsgSteamDatagramCertificate_EKeyType : int {
  CMsgSteamDatagramCertificate_EKeyType_INVALID = 0,
  CMsgSteamDatagramCertificate_EKeyType_ED25519 = 1,
};

extern const uint32_t CMsgSteamDatagramCertificate_EKeyType_internal_data_[];
inline constexpr CMsgSteamDatagramCertificate_EKeyType CMsgSteamDatagramCertificate_EKeyType_EKeyType_MIN =
    static_cast<CMsgSteamDatagramCertificate_EKeyType>(0);
inline constexpr CMsgSteamDatagramCertificate_EKeyType CMsgSteamDatagramCertificate_EKeyType_EKeyType_MAX =
    static_cast<CMsgSteamDatagramCertificate_EKeyType>(1);
inline bool CMsgSteamDatagramCertificate_EKeyType_IsValid(int value) {
  return 0 <= value && value <= 1;
}
inline constexpr int CMsgSteamDatagramCertificate_EKeyType_EKeyType_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL CMsgSteamDatagramCertificate_EKeyType_descriptor();
template <typename T>
const std::string& CMsgSteamDatagramCertificate_EKeyType_Name(T value) {
  static_assert(std::is_same<T, CMsgSteamDatagramCertificate_EKeyType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to EKeyType_Name().");
  return CMsgSteamDatagramCertificate_EKeyType_Name(static_cast<CMsgSteamDatagramCertificate_EKeyType>(value));
}
template <>
inline const std::string& CMsgSteamDatagramCertificate_EKeyType_Name(CMsgSteamDatagramCertificate_EKeyType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<CMsgSteamDatagramCertificate_EKeyType_descriptor, 0, 1>(
      static_cast<int>(value));
}
inline bool CMsgSteamDatagramCertificate_EKeyType_Parse(
    absl::string_view name, CMsgSteamDatagramCertificate_EKeyType* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<CMsgSteamDatagramCertificate_EKeyType>(CMsgSteamDatagramCertificate_EKeyType_descriptor(), name,
                                           value);
}

// ===================================================================


// -------------------------------------------------------------------

class CMsgSteamNetworkingIdentityLegacyBinary final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:CMsgSteamNetworkingIdentityLegacyBinary) */ {
 public:
  inline CMsgSteamNetworkingIdentityLegacyBinary() : CMsgSteamNetworkingIdentityLegacyBinary(nullptr) {}
  ~CMsgSteamNetworkingIdentityLegacyBinary() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CMsgSteamNetworkingIdentityLegacyBinary* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CMsgSteamNetworkingIdentityLegacyBinary));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CMsgSteamNetworkingIdentityLegacyBinary(::google::protobuf::internal::ConstantInitialized);

  inline CMsgSteamNetworkingIdentityLegacyBinary(const CMsgSteamNetworkingIdentityLegacyBinary& from) : CMsgSteamNetworkingIdentityLegacyBinary(nullptr, from) {}
  inline CMsgSteamNetworkingIdentityLegacyBinary(CMsgSteamNetworkingIdentityLegacyBinary&& from) noexcept
      : CMsgSteamNetworkingIdentityLegacyBinary(nullptr, std::move(from)) {}
  inline CMsgSteamNetworkingIdentityLegacyBinary& operator=(const CMsgSteamNetworkingIdentityLegacyBinary& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSteamNetworkingIdentityLegacyBinary& operator=(CMsgSteamNetworkingIdentityLegacyBinary&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSteamNetworkingIdentityLegacyBinary& default_instance() {
    return *reinterpret_cast<const CMsgSteamNetworkingIdentityLegacyBinary*>(
        &_CMsgSteamNetworkingIdentityLegacyBinary_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(CMsgSteamNetworkingIdentityLegacyBinary& a, CMsgSteamNetworkingIdentityLegacyBinary& b) { a.Swap(&b); }
  inline void Swap(CMsgSteamNetworkingIdentityLegacyBinary* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSteamNetworkingIdentityLegacyBinary* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSteamNetworkingIdentityLegacyBinary* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CMsgSteamNetworkingIdentityLegacyBinary>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CMsgSteamNetworkingIdentityLegacyBinary& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CMsgSteamNetworkingIdentityLegacyBinary& from) { CMsgSteamNetworkingIdentityLegacyBinary::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CMsgSteamNetworkingIdentityLegacyBinary* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "CMsgSteamNetworkingIdentityLegacyBinary"; }

 protected:
  explicit CMsgSteamNetworkingIdentityLegacyBinary(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  CMsgSteamNetworkingIdentityLegacyBinary(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const CMsgSteamNetworkingIdentityLegacyBinary& from);
  CMsgSteamNetworkingIdentityLegacyBinary(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, CMsgSteamNetworkingIdentityLegacyBinary&& from) noexcept
      : CMsgSteamNetworkingIdentityLegacyBinary(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kGenericBytesFieldNumber = 2,
    kGenericStringFieldNumber = 3,
    kIpv6AndPortFieldNumber = 4,
    kSteamIdFieldNumber = 16,
  };
  // optional bytes generic_bytes = 2;
  bool has_generic_bytes() const;
  void clear_generic_bytes() ;
  const std::string& generic_bytes() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_generic_bytes(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_generic_bytes();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_generic_bytes();
  void set_allocated_generic_bytes(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_generic_bytes() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_generic_bytes(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_generic_bytes();

  public:
  // optional string generic_string = 3;
  bool has_generic_string() const;
  void clear_generic_string() ;
  const std::string& generic_string() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_generic_string(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_generic_string();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_generic_string();
  void set_allocated_generic_string(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_generic_string() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_generic_string(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_generic_string();

  public:
  // optional bytes ipv6_and_port = 4;
  bool has_ipv6_and_port() const;
  void clear_ipv6_and_port() ;
  const std::string& ipv6_and_port() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ipv6_and_port(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_ipv6_and_port();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_ipv6_and_port();
  void set_allocated_ipv6_and_port(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_ipv6_and_port() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_ipv6_and_port(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_ipv6_and_port();

  public:
  // optional fixed64 steam_id = 16;
  bool has_steam_id() const;
  void clear_steam_id() ;
  ::uint64_t steam_id() const;
  void set_steam_id(::uint64_t value);

  private:
  ::uint64_t _internal_steam_id() const;
  void _internal_set_steam_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:CMsgSteamNetworkingIdentityLegacyBinary)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 4,
                                   0, 62,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const CMsgSteamNetworkingIdentityLegacyBinary& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr generic_bytes_;
    ::google::protobuf::internal::ArenaStringPtr generic_string_;
    ::google::protobuf::internal::ArenaStringPtr ipv6_and_port_;
    ::uint64_t steam_id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steamnetworkingsockets_5fmessages_5fcerts_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull CMsgSteamNetworkingIdentityLegacyBinary_class_data_;
// -------------------------------------------------------------------

class CMsgSteamDatagramCertificateSigned final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:CMsgSteamDatagramCertificateSigned) */ {
 public:
  inline CMsgSteamDatagramCertificateSigned() : CMsgSteamDatagramCertificateSigned(nullptr) {}
  ~CMsgSteamDatagramCertificateSigned() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CMsgSteamDatagramCertificateSigned* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CMsgSteamDatagramCertificateSigned));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CMsgSteamDatagramCertificateSigned(::google::protobuf::internal::ConstantInitialized);

  inline CMsgSteamDatagramCertificateSigned(const CMsgSteamDatagramCertificateSigned& from) : CMsgSteamDatagramCertificateSigned(nullptr, from) {}
  inline CMsgSteamDatagramCertificateSigned(CMsgSteamDatagramCertificateSigned&& from) noexcept
      : CMsgSteamDatagramCertificateSigned(nullptr, std::move(from)) {}
  inline CMsgSteamDatagramCertificateSigned& operator=(const CMsgSteamDatagramCertificateSigned& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSteamDatagramCertificateSigned& operator=(CMsgSteamDatagramCertificateSigned&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSteamDatagramCertificateSigned& default_instance() {
    return *reinterpret_cast<const CMsgSteamDatagramCertificateSigned*>(
        &_CMsgSteamDatagramCertificateSigned_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(CMsgSteamDatagramCertificateSigned& a, CMsgSteamDatagramCertificateSigned& b) { a.Swap(&b); }
  inline void Swap(CMsgSteamDatagramCertificateSigned* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSteamDatagramCertificateSigned* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSteamDatagramCertificateSigned* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CMsgSteamDatagramCertificateSigned>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CMsgSteamDatagramCertificateSigned& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CMsgSteamDatagramCertificateSigned& from) { CMsgSteamDatagramCertificateSigned::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CMsgSteamDatagramCertificateSigned* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "CMsgSteamDatagramCertificateSigned"; }

 protected:
  explicit CMsgSteamDatagramCertificateSigned(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  CMsgSteamDatagramCertificateSigned(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const CMsgSteamDatagramCertificateSigned& from);
  CMsgSteamDatagramCertificateSigned(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, CMsgSteamDatagramCertificateSigned&& from) noexcept
      : CMsgSteamDatagramCertificateSigned(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPrivateKeyDataFieldNumber = 1,
    kCertFieldNumber = 4,
    kCaSignatureFieldNumber = 6,
    kCaKeyIdFieldNumber = 5,
  };
  // optional bytes private_key_data = 1;
  bool has_private_key_data() const;
  void clear_private_key_data() ;
  const std::string& private_key_data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_private_key_data(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_private_key_data();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_private_key_data();
  void set_allocated_private_key_data(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_private_key_data() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_private_key_data(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_private_key_data();

  public:
  // optional bytes cert = 4;
  bool has_cert() const;
  void clear_cert() ;
  const std::string& cert() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_cert(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_cert();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_cert();
  void set_allocated_cert(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_cert() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_cert(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_cert();

  public:
  // optional bytes ca_signature = 6;
  bool has_ca_signature() const;
  void clear_ca_signature() ;
  const std::string& ca_signature() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ca_signature(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_ca_signature();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_ca_signature();
  void set_allocated_ca_signature(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_ca_signature() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_ca_signature(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_ca_signature();

  public:
  // optional fixed64 ca_key_id = 5;
  bool has_ca_key_id() const;
  void clear_ca_key_id() ;
  ::uint64_t ca_key_id() const;
  void set_ca_key_id(::uint64_t value);

  private:
  ::uint64_t _internal_ca_key_id() const;
  void _internal_set_ca_key_id(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramCertificateSigned)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 4,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const CMsgSteamDatagramCertificateSigned& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr private_key_data_;
    ::google::protobuf::internal::ArenaStringPtr cert_;
    ::google::protobuf::internal::ArenaStringPtr ca_signature_;
    ::uint64_t ca_key_id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steamnetworkingsockets_5fmessages_5fcerts_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull CMsgSteamDatagramCertificateSigned_class_data_;
// -------------------------------------------------------------------

class CMsgSteamDatagramCertificate final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:CMsgSteamDatagramCertificate) */ {
 public:
  inline CMsgSteamDatagramCertificate() : CMsgSteamDatagramCertificate(nullptr) {}
  ~CMsgSteamDatagramCertificate() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CMsgSteamDatagramCertificate* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CMsgSteamDatagramCertificate));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CMsgSteamDatagramCertificate(::google::protobuf::internal::ConstantInitialized);

  inline CMsgSteamDatagramCertificate(const CMsgSteamDatagramCertificate& from) : CMsgSteamDatagramCertificate(nullptr, from) {}
  inline CMsgSteamDatagramCertificate(CMsgSteamDatagramCertificate&& from) noexcept
      : CMsgSteamDatagramCertificate(nullptr, std::move(from)) {}
  inline CMsgSteamDatagramCertificate& operator=(const CMsgSteamDatagramCertificate& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSteamDatagramCertificate& operator=(CMsgSteamDatagramCertificate&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSteamDatagramCertificate& default_instance() {
    return *reinterpret_cast<const CMsgSteamDatagramCertificate*>(
        &_CMsgSteamDatagramCertificate_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(CMsgSteamDatagramCertificate& a, CMsgSteamDatagramCertificate& b) { a.Swap(&b); }
  inline void Swap(CMsgSteamDatagramCertificate* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSteamDatagramCertificate* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSteamDatagramCertificate* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CMsgSteamDatagramCertificate>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CMsgSteamDatagramCertificate& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CMsgSteamDatagramCertificate& from) { CMsgSteamDatagramCertificate::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CMsgSteamDatagramCertificate* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "CMsgSteamDatagramCertificate"; }

 protected:
  explicit CMsgSteamDatagramCertificate(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  CMsgSteamDatagramCertificate(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const CMsgSteamDatagramCertificate& from);
  CMsgSteamDatagramCertificate(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, CMsgSteamDatagramCertificate&& from) noexcept
      : CMsgSteamDatagramCertificate(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using EKeyType = CMsgSteamDatagramCertificate_EKeyType;
  static constexpr EKeyType INVALID = CMsgSteamDatagramCertificate_EKeyType_INVALID;
  static constexpr EKeyType ED25519 = CMsgSteamDatagramCertificate_EKeyType_ED25519;
  static inline bool EKeyType_IsValid(int value) {
    return CMsgSteamDatagramCertificate_EKeyType_IsValid(value);
  }
  static constexpr EKeyType EKeyType_MIN = CMsgSteamDatagramCertificate_EKeyType_EKeyType_MIN;
  static constexpr EKeyType EKeyType_MAX = CMsgSteamDatagramCertificate_EKeyType_EKeyType_MAX;
  static constexpr int EKeyType_ARRAYSIZE = CMsgSteamDatagramCertificate_EKeyType_EKeyType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL EKeyType_descriptor() {
    return CMsgSteamDatagramCertificate_EKeyType_descriptor();
  }
  template <typename T>
  static inline const std::string& EKeyType_Name(T value) {
    return CMsgSteamDatagramCertificate_EKeyType_Name(value);
  }
  static inline bool EKeyType_Parse(
      absl::string_view name, EKeyType* PROTOBUF_NONNULL value) {
    return CMsgSteamDatagramCertificate_EKeyType_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kGameserverDatacenterIdsFieldNumber = 5,
    kAppIdsFieldNumber = 10,
    kIpAddressesFieldNumber = 13,
    kKeyDataFieldNumber = 2,
    kIdentityStringFieldNumber = 12,
    kLegacyIdentityBinaryFieldNumber = 11,
    kLegacySteamIdFieldNumber = 4,
    kKeyTypeFieldNumber = 1,
    kTimeCreatedFieldNumber = 8,
    kTimeExpiryFieldNumber = 9,
  };
  // repeated fixed32 gameserver_datacenter_ids = 5;
  int gameserver_datacenter_ids_size() const;
  private:
  int _internal_gameserver_datacenter_ids_size() const;

  public:
  void clear_gameserver_datacenter_ids() ;
  ::uint32_t gameserver_datacenter_ids(int index) const;
  void set_gameserver_datacenter_ids(int index, ::uint32_t value);
  void add_gameserver_datacenter_ids(::uint32_t value);
  const ::google::protobuf::RepeatedField<::uint32_t>& gameserver_datacenter_ids() const;
  ::google::protobuf::RepeatedField<::uint32_t>* PROTOBUF_NONNULL mutable_gameserver_datacenter_ids();

  private:
  const ::google::protobuf::RepeatedField<::uint32_t>& _internal_gameserver_datacenter_ids() const;
  ::google::protobuf::RepeatedField<::uint32_t>* PROTOBUF_NONNULL _internal_mutable_gameserver_datacenter_ids();

  public:
  // repeated uint32 app_ids = 10;
  int app_ids_size() const;
  private:
  int _internal_app_ids_size() const;

  public:
  void clear_app_ids() ;
  ::uint32_t app_ids(int index) const;
  void set_app_ids(int index, ::uint32_t value);
  void add_app_ids(::uint32_t value);
  const ::google::protobuf::RepeatedField<::uint32_t>& app_ids() const;
  ::google::protobuf::RepeatedField<::uint32_t>* PROTOBUF_NONNULL mutable_app_ids();

  private:
  const ::google::protobuf::RepeatedField<::uint32_t>& _internal_app_ids() const;
  ::google::protobuf::RepeatedField<::uint32_t>* PROTOBUF_NONNULL _internal_mutable_app_ids();

  public:
  // repeated string ip_addresses = 13;
  int ip_addresses_size() const;
  private:
  int _internal_ip_addresses_size() const;

  public:
  void clear_ip_addresses() ;
  const std::string& ip_addresses(int index) const;
  std::string* PROTOBUF_NONNULL mutable_ip_addresses(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ip_addresses(int index, Arg_&& value, Args_... args);
  std::string* PROTOBUF_NONNULL add_ip_addresses();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_ip_addresses(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& ip_addresses() const;
  ::google::protobuf::RepeatedPtrField<std::string>* PROTOBUF_NONNULL mutable_ip_addresses();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_ip_addresses() const;
  ::google::protobuf::RepeatedPtrField<std::string>* PROTOBUF_NONNULL _internal_mutable_ip_addresses();

  public:
  // optional bytes key_data = 2;
  bool has_key_data() const;
  void clear_key_data() ;
  const std::string& key_data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key_data(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_key_data();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_key_data();
  void set_allocated_key_data(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_key_data() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_key_data(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_key_data();

  public:
  // optional string identity_string = 12;
  bool has_identity_string() const;
  void clear_identity_string() ;
  const std::string& identity_string() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_identity_string(Arg_&& arg, Args_... args);
  std::string* PROTOBUF_NONNULL mutable_identity_string();
  [[nodiscard]] std::string* PROTOBUF_NULLABLE release_identity_string();
  void set_allocated_identity_string(std::string* PROTOBUF_NULLABLE value);

  private:
  const std::string& _internal_identity_string() const;
  PROTOBUF_ALWAYS_INLINE void _internal_set_identity_string(const std::string& value);
  std::string* PROTOBUF_NONNULL _internal_mutable_identity_string();

  public:
  // optional .CMsgSteamNetworkingIdentityLegacyBinary legacy_identity_binary = 11;
  bool has_legacy_identity_binary() const;
  void clear_legacy_identity_binary() ;
  const ::CMsgSteamNetworkingIdentityLegacyBinary& legacy_identity_binary() const;
  [[nodiscard]] ::CMsgSteamNetworkingIdentityLegacyBinary* PROTOBUF_NULLABLE release_legacy_identity_binary();
  ::CMsgSteamNetworkingIdentityLegacyBinary* PROTOBUF_NONNULL mutable_legacy_identity_binary();
  void set_allocated_legacy_identity_binary(::CMsgSteamNetworkingIdentityLegacyBinary* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_legacy_identity_binary(::CMsgSteamNetworkingIdentityLegacyBinary* PROTOBUF_NULLABLE value);
  ::CMsgSteamNetworkingIdentityLegacyBinary* PROTOBUF_NULLABLE unsafe_arena_release_legacy_identity_binary();

  private:
  const ::CMsgSteamNetworkingIdentityLegacyBinary& _internal_legacy_identity_binary() const;
  ::CMsgSteamNetworkingIdentityLegacyBinary* PROTOBUF_NONNULL _internal_mutable_legacy_identity_binary();

  public:
  // optional fixed64 legacy_steam_id = 4;
  bool has_legacy_steam_id() const;
  void clear_legacy_steam_id() ;
  ::uint64_t legacy_steam_id() const;
  void set_legacy_steam_id(::uint64_t value);

  private:
  ::uint64_t _internal_legacy_steam_id() const;
  void _internal_set_legacy_steam_id(::uint64_t value);

  public:
  // optional .CMsgSteamDatagramCertificate.EKeyType key_type = 1 [default = INVALID];
  bool has_key_type() const;
  void clear_key_type() ;
  ::CMsgSteamDatagramCertificate_EKeyType key_type() const;
  void set_key_type(::CMsgSteamDatagramCertificate_EKeyType value);

  private:
  ::CMsgSteamDatagramCertificate_EKeyType _internal_key_type() const;
  void _internal_set_key_type(::CMsgSteamDatagramCertificate_EKeyType value);

  public:
  // optional fixed32 time_created = 8;
  bool has_time_created() const;
  void clear_time_created() ;
  ::uint32_t time_created() const;
  void set_time_created(::uint32_t value);

  private:
  ::uint32_t _internal_time_created() const;
  void _internal_set_time_created(::uint32_t value);

  public:
  // optional fixed32 time_expiry = 9;
  bool has_time_expiry() const;
  void clear_time_expiry() ;
  ::uint32_t time_expiry() const;
  void set_time_expiry(::uint32_t value);

  private:
  ::uint32_t _internal_time_expiry() const;
  void _internal_set_time_expiry(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramCertificate)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 10,
                                   2, 72,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const CMsgSteamDatagramCertificate& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<::uint32_t> gameserver_datacenter_ids_;
    ::google::protobuf::RepeatedField<::uint32_t> app_ids_;
    ::google::protobuf::RepeatedPtrField<std::string> ip_addresses_;
    ::google::protobuf::internal::ArenaStringPtr key_data_;
    ::google::protobuf::internal::ArenaStringPtr identity_string_;
    ::CMsgSteamNetworkingIdentityLegacyBinary* PROTOBUF_NULLABLE legacy_identity_binary_;
    ::uint64_t legacy_steam_id_;
    int key_type_;
    ::uint32_t time_created_;
    ::uint32_t time_expiry_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steamnetworkingsockets_5fmessages_5fcerts_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull CMsgSteamDatagramCertificate_class_data_;
// -------------------------------------------------------------------

class CMsgSteamDatagramCertificateRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:CMsgSteamDatagramCertificateRequest) */ {
 public:
  inline CMsgSteamDatagramCertificateRequest() : CMsgSteamDatagramCertificateRequest(nullptr) {}
  ~CMsgSteamDatagramCertificateRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CMsgSteamDatagramCertificateRequest* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CMsgSteamDatagramCertificateRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CMsgSteamDatagramCertificateRequest(::google::protobuf::internal::ConstantInitialized);

  inline CMsgSteamDatagramCertificateRequest(const CMsgSteamDatagramCertificateRequest& from) : CMsgSteamDatagramCertificateRequest(nullptr, from) {}
  inline CMsgSteamDatagramCertificateRequest(CMsgSteamDatagramCertificateRequest&& from) noexcept
      : CMsgSteamDatagramCertificateRequest(nullptr, std::move(from)) {}
  inline CMsgSteamDatagramCertificateRequest& operator=(const CMsgSteamDatagramCertificateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CMsgSteamDatagramCertificateRequest& operator=(CMsgSteamDatagramCertificateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CMsgSteamDatagramCertificateRequest& default_instance() {
    return *reinterpret_cast<const CMsgSteamDatagramCertificateRequest*>(
        &_CMsgSteamDatagramCertificateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(CMsgSteamDatagramCertificateRequest& a, CMsgSteamDatagramCertificateRequest& b) { a.Swap(&b); }
  inline void Swap(CMsgSteamDatagramCertificateRequest* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CMsgSteamDatagramCertificateRequest* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CMsgSteamDatagramCertificateRequest* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CMsgSteamDatagramCertificateRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CMsgSteamDatagramCertificateRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CMsgSteamDatagramCertificateRequest& from) { CMsgSteamDatagramCertificateRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CMsgSteamDatagramCertificateRequest* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "CMsgSteamDatagramCertificateRequest"; }

 protected:
  explicit CMsgSteamDatagramCertificateRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  CMsgSteamDatagramCertificateRequest(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const CMsgSteamDatagramCertificateRequest& from);
  CMsgSteamDatagramCertificateRequest(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, CMsgSteamDatagramCertificateRequest&& from) noexcept
      : CMsgSteamDatagramCertificateRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCertFieldNumber = 1,
  };
  // optional .CMsgSteamDatagramCertificate cert = 1;
  bool has_cert() const;
  void clear_cert() ;
  const ::CMsgSteamDatagramCertificate& cert() const;
  [[nodiscard]] ::CMsgSteamDatagramCertificate* PROTOBUF_NULLABLE release_cert();
  ::CMsgSteamDatagramCertificate* PROTOBUF_NONNULL mutable_cert();
  void set_allocated_cert(::CMsgSteamDatagramCertificate* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_cert(::CMsgSteamDatagramCertificate* PROTOBUF_NULLABLE value);
  ::CMsgSteamDatagramCertificate* PROTOBUF_NULLABLE unsafe_arena_release_cert();

  private:
  const ::CMsgSteamDatagramCertificate& _internal_cert() const;
  ::CMsgSteamDatagramCertificate* PROTOBUF_NONNULL _internal_mutable_cert();

  public:
  // @@protoc_insertion_point(class_scope:CMsgSteamDatagramCertificateRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1,
                                   1, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const CMsgSteamDatagramCertificateRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::CMsgSteamDatagramCertificate* PROTOBUF_NULLABLE cert_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_steamnetworkingsockets_5fmessages_5fcerts_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull CMsgSteamDatagramCertificateRequest_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// CMsgSteamNetworkingIdentityLegacyBinary

// optional fixed64 steam_id = 16;
inline bool CMsgSteamNetworkingIdentityLegacyBinary::has_steam_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void CMsgSteamNetworkingIdentityLegacyBinary::clear_steam_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.steam_id_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint64_t CMsgSteamNetworkingIdentityLegacyBinary::steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgSteamNetworkingIdentityLegacyBinary.steam_id)
  return _internal_steam_id();
}
inline void CMsgSteamNetworkingIdentityLegacyBinary::set_steam_id(::uint64_t value) {
  _internal_set_steam_id(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:CMsgSteamNetworkingIdentityLegacyBinary.steam_id)
}
inline ::uint64_t CMsgSteamNetworkingIdentityLegacyBinary::_internal_steam_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.steam_id_;
}
inline void CMsgSteamNetworkingIdentityLegacyBinary::_internal_set_steam_id(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.steam_id_ = value;
}

// optional bytes generic_bytes = 2;
inline bool CMsgSteamNetworkingIdentityLegacyBinary::has_generic_bytes() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CMsgSteamNetworkingIdentityLegacyBinary::clear_generic_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.generic_bytes_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgSteamNetworkingIdentityLegacyBinary::generic_bytes() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CMsgSteamNetworkingIdentityLegacyBinary.generic_bytes)
  return _internal_generic_bytes();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void CMsgSteamNetworkingIdentityLegacyBinary::set_generic_bytes(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.generic_bytes_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:CMsgSteamNetworkingIdentityLegacyBinary.generic_bytes)
}
inline std::string* PROTOBUF_NONNULL CMsgSteamNetworkingIdentityLegacyBinary::mutable_generic_bytes()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_generic_bytes();
  // @@protoc_insertion_point(field_mutable:CMsgSteamNetworkingIdentityLegacyBinary.generic_bytes)
  return _s;
}
inline const std::string& CMsgSteamNetworkingIdentityLegacyBinary::_internal_generic_bytes() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.generic_bytes_.Get();
}
inline void CMsgSteamNetworkingIdentityLegacyBinary::_internal_set_generic_bytes(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.generic_bytes_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL CMsgSteamNetworkingIdentityLegacyBinary::_internal_mutable_generic_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.generic_bytes_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE CMsgSteamNetworkingIdentityLegacyBinary::release_generic_bytes() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:CMsgSteamNetworkingIdentityLegacyBinary.generic_bytes)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.generic_bytes_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.generic_bytes_.Set("", GetArena());
  }
  return released;
}
inline void CMsgSteamNetworkingIdentityLegacyBinary::set_allocated_generic_bytes(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.generic_bytes_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.generic_bytes_.IsDefault()) {
    _impl_.generic_bytes_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgSteamNetworkingIdentityLegacyBinary.generic_bytes)
}

// optional string generic_string = 3;
inline bool CMsgSteamNetworkingIdentityLegacyBinary::has_generic_string() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void CMsgSteamNetworkingIdentityLegacyBinary::clear_generic_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.generic_string_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgSteamNetworkingIdentityLegacyBinary::generic_string() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CMsgSteamNetworkingIdentityLegacyBinary.generic_string)
  return _internal_generic_string();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void CMsgSteamNetworkingIdentityLegacyBinary::set_generic_string(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.generic_string_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:CMsgSteamNetworkingIdentityLegacyBinary.generic_string)
}
inline std::string* PROTOBUF_NONNULL CMsgSteamNetworkingIdentityLegacyBinary::mutable_generic_string()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_generic_string();
  // @@protoc_insertion_point(field_mutable:CMsgSteamNetworkingIdentityLegacyBinary.generic_string)
  return _s;
}
inline const std::string& CMsgSteamNetworkingIdentityLegacyBinary::_internal_generic_string() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.generic_string_.Get();
}
inline void CMsgSteamNetworkingIdentityLegacyBinary::_internal_set_generic_string(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.generic_string_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL CMsgSteamNetworkingIdentityLegacyBinary::_internal_mutable_generic_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.generic_string_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE CMsgSteamNetworkingIdentityLegacyBinary::release_generic_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:CMsgSteamNetworkingIdentityLegacyBinary.generic_string)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.generic_string_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.generic_string_.Set("", GetArena());
  }
  return released;
}
inline void CMsgSteamNetworkingIdentityLegacyBinary::set_allocated_generic_string(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.generic_string_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.generic_string_.IsDefault()) {
    _impl_.generic_string_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgSteamNetworkingIdentityLegacyBinary.generic_string)
}

// optional bytes ipv6_and_port = 4;
inline bool CMsgSteamNetworkingIdentityLegacyBinary::has_ipv6_and_port() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void CMsgSteamNetworkingIdentityLegacyBinary::clear_ipv6_and_port() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ipv6_and_port_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgSteamNetworkingIdentityLegacyBinary::ipv6_and_port() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CMsgSteamNetworkingIdentityLegacyBinary.ipv6_and_port)
  return _internal_ipv6_and_port();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void CMsgSteamNetworkingIdentityLegacyBinary::set_ipv6_and_port(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.ipv6_and_port_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:CMsgSteamNetworkingIdentityLegacyBinary.ipv6_and_port)
}
inline std::string* PROTOBUF_NONNULL CMsgSteamNetworkingIdentityLegacyBinary::mutable_ipv6_and_port()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_ipv6_and_port();
  // @@protoc_insertion_point(field_mutable:CMsgSteamNetworkingIdentityLegacyBinary.ipv6_and_port)
  return _s;
}
inline const std::string& CMsgSteamNetworkingIdentityLegacyBinary::_internal_ipv6_and_port() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ipv6_and_port_.Get();
}
inline void CMsgSteamNetworkingIdentityLegacyBinary::_internal_set_ipv6_and_port(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.ipv6_and_port_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL CMsgSteamNetworkingIdentityLegacyBinary::_internal_mutable_ipv6_and_port() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.ipv6_and_port_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE CMsgSteamNetworkingIdentityLegacyBinary::release_ipv6_and_port() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:CMsgSteamNetworkingIdentityLegacyBinary.ipv6_and_port)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.ipv6_and_port_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.ipv6_and_port_.Set("", GetArena());
  }
  return released;
}
inline void CMsgSteamNetworkingIdentityLegacyBinary::set_allocated_ipv6_and_port(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.ipv6_and_port_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.ipv6_and_port_.IsDefault()) {
    _impl_.ipv6_and_port_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgSteamNetworkingIdentityLegacyBinary.ipv6_and_port)
}

// -------------------------------------------------------------------

// CMsgSteamDatagramCertificate

// optional .CMsgSteamDatagramCertificate.EKeyType key_type = 1 [default = INVALID];
inline bool CMsgSteamDatagramCertificate::has_key_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void CMsgSteamDatagramCertificate::clear_key_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::CMsgSteamDatagramCertificate_EKeyType CMsgSteamDatagramCertificate::key_type() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramCertificate.key_type)
  return _internal_key_type();
}
inline void CMsgSteamDatagramCertificate::set_key_type(::CMsgSteamDatagramCertificate_EKeyType value) {
  _internal_set_key_type(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramCertificate.key_type)
}
inline ::CMsgSteamDatagramCertificate_EKeyType CMsgSteamDatagramCertificate::_internal_key_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::CMsgSteamDatagramCertificate_EKeyType>(_impl_.key_type_);
}
inline void CMsgSteamDatagramCertificate::_internal_set_key_type(::CMsgSteamDatagramCertificate_EKeyType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);

                                          assert(::google::protobuf::internal::ValidateEnum(
                                              value, ::CMsgSteamDatagramCertificate_EKeyType_internal_data_));
                                          _impl_.key_type_ = value;
}

// optional bytes key_data = 2;
inline bool CMsgSteamDatagramCertificate::has_key_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CMsgSteamDatagramCertificate::clear_key_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.key_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgSteamDatagramCertificate::key_data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramCertificate.key_data)
  return _internal_key_data();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void CMsgSteamDatagramCertificate::set_key_data(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.key_data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramCertificate.key_data)
}
inline std::string* PROTOBUF_NONNULL CMsgSteamDatagramCertificate::mutable_key_data()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_key_data();
  // @@protoc_insertion_point(field_mutable:CMsgSteamDatagramCertificate.key_data)
  return _s;
}
inline const std::string& CMsgSteamDatagramCertificate::_internal_key_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.key_data_.Get();
}
inline void CMsgSteamDatagramCertificate::_internal_set_key_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.key_data_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL CMsgSteamDatagramCertificate::_internal_mutable_key_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.key_data_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE CMsgSteamDatagramCertificate::release_key_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:CMsgSteamDatagramCertificate.key_data)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.key_data_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.key_data_.Set("", GetArena());
  }
  return released;
}
inline void CMsgSteamDatagramCertificate::set_allocated_key_data(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.key_data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.key_data_.IsDefault()) {
    _impl_.key_data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgSteamDatagramCertificate.key_data)
}

// optional fixed64 legacy_steam_id = 4;
inline bool CMsgSteamDatagramCertificate::has_legacy_steam_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void CMsgSteamDatagramCertificate::clear_legacy_steam_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.legacy_steam_id_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint64_t CMsgSteamDatagramCertificate::legacy_steam_id() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramCertificate.legacy_steam_id)
  return _internal_legacy_steam_id();
}
inline void CMsgSteamDatagramCertificate::set_legacy_steam_id(::uint64_t value) {
  _internal_set_legacy_steam_id(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramCertificate.legacy_steam_id)
}
inline ::uint64_t CMsgSteamDatagramCertificate::_internal_legacy_steam_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.legacy_steam_id_;
}
inline void CMsgSteamDatagramCertificate::_internal_set_legacy_steam_id(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.legacy_steam_id_ = value;
}

// optional .CMsgSteamNetworkingIdentityLegacyBinary legacy_identity_binary = 11;
inline bool CMsgSteamDatagramCertificate::has_legacy_identity_binary() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.legacy_identity_binary_ != nullptr);
  return value;
}
inline void CMsgSteamDatagramCertificate::clear_legacy_identity_binary() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.legacy_identity_binary_ != nullptr) _impl_.legacy_identity_binary_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::CMsgSteamNetworkingIdentityLegacyBinary& CMsgSteamDatagramCertificate::_internal_legacy_identity_binary() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::CMsgSteamNetworkingIdentityLegacyBinary* p = _impl_.legacy_identity_binary_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgSteamNetworkingIdentityLegacyBinary&>(::_CMsgSteamNetworkingIdentityLegacyBinary_default_instance_);
}
inline const ::CMsgSteamNetworkingIdentityLegacyBinary& CMsgSteamDatagramCertificate::legacy_identity_binary() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramCertificate.legacy_identity_binary)
  return _internal_legacy_identity_binary();
}
inline void CMsgSteamDatagramCertificate::unsafe_arena_set_allocated_legacy_identity_binary(
    ::CMsgSteamNetworkingIdentityLegacyBinary* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.legacy_identity_binary_);
  }
  _impl_.legacy_identity_binary_ = reinterpret_cast<::CMsgSteamNetworkingIdentityLegacyBinary*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgSteamDatagramCertificate.legacy_identity_binary)
}
inline ::CMsgSteamNetworkingIdentityLegacyBinary* PROTOBUF_NULLABLE CMsgSteamDatagramCertificate::release_legacy_identity_binary() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::CMsgSteamNetworkingIdentityLegacyBinary* released = _impl_.legacy_identity_binary_;
  _impl_.legacy_identity_binary_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::CMsgSteamNetworkingIdentityLegacyBinary* PROTOBUF_NULLABLE CMsgSteamDatagramCertificate::unsafe_arena_release_legacy_identity_binary() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:CMsgSteamDatagramCertificate.legacy_identity_binary)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::CMsgSteamNetworkingIdentityLegacyBinary* temp = _impl_.legacy_identity_binary_;
  _impl_.legacy_identity_binary_ = nullptr;
  return temp;
}
inline ::CMsgSteamNetworkingIdentityLegacyBinary* PROTOBUF_NONNULL CMsgSteamDatagramCertificate::_internal_mutable_legacy_identity_binary() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.legacy_identity_binary_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::CMsgSteamNetworkingIdentityLegacyBinary>(GetArena());
    _impl_.legacy_identity_binary_ = reinterpret_cast<::CMsgSteamNetworkingIdentityLegacyBinary*>(p);
  }
  return _impl_.legacy_identity_binary_;
}
inline ::CMsgSteamNetworkingIdentityLegacyBinary* PROTOBUF_NONNULL CMsgSteamDatagramCertificate::mutable_legacy_identity_binary()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::CMsgSteamNetworkingIdentityLegacyBinary* _msg = _internal_mutable_legacy_identity_binary();
  // @@protoc_insertion_point(field_mutable:CMsgSteamDatagramCertificate.legacy_identity_binary)
  return _msg;
}
inline void CMsgSteamDatagramCertificate::set_allocated_legacy_identity_binary(::CMsgSteamNetworkingIdentityLegacyBinary* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.legacy_identity_binary_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.legacy_identity_binary_ = reinterpret_cast<::CMsgSteamNetworkingIdentityLegacyBinary*>(value);
  // @@protoc_insertion_point(field_set_allocated:CMsgSteamDatagramCertificate.legacy_identity_binary)
}

// optional string identity_string = 12;
inline bool CMsgSteamDatagramCertificate::has_identity_string() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void CMsgSteamDatagramCertificate::clear_identity_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.identity_string_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgSteamDatagramCertificate::identity_string() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramCertificate.identity_string)
  return _internal_identity_string();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void CMsgSteamDatagramCertificate::set_identity_string(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.identity_string_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramCertificate.identity_string)
}
inline std::string* PROTOBUF_NONNULL CMsgSteamDatagramCertificate::mutable_identity_string()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_identity_string();
  // @@protoc_insertion_point(field_mutable:CMsgSteamDatagramCertificate.identity_string)
  return _s;
}
inline const std::string& CMsgSteamDatagramCertificate::_internal_identity_string() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.identity_string_.Get();
}
inline void CMsgSteamDatagramCertificate::_internal_set_identity_string(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.identity_string_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL CMsgSteamDatagramCertificate::_internal_mutable_identity_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.identity_string_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE CMsgSteamDatagramCertificate::release_identity_string() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:CMsgSteamDatagramCertificate.identity_string)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.identity_string_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.identity_string_.Set("", GetArena());
  }
  return released;
}
inline void CMsgSteamDatagramCertificate::set_allocated_identity_string(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.identity_string_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.identity_string_.IsDefault()) {
    _impl_.identity_string_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgSteamDatagramCertificate.identity_string)
}

// repeated fixed32 gameserver_datacenter_ids = 5;
inline int CMsgSteamDatagramCertificate::_internal_gameserver_datacenter_ids_size() const {
  return _internal_gameserver_datacenter_ids().size();
}
inline int CMsgSteamDatagramCertificate::gameserver_datacenter_ids_size() const {
  return _internal_gameserver_datacenter_ids_size();
}
inline void CMsgSteamDatagramCertificate::clear_gameserver_datacenter_ids() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.gameserver_datacenter_ids_.Clear();
}
inline ::uint32_t CMsgSteamDatagramCertificate::gameserver_datacenter_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramCertificate.gameserver_datacenter_ids)
  return _internal_gameserver_datacenter_ids().Get(index);
}
inline void CMsgSteamDatagramCertificate::set_gameserver_datacenter_ids(int index, ::uint32_t value) {
  _internal_mutable_gameserver_datacenter_ids()->Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramCertificate.gameserver_datacenter_ids)
}
inline void CMsgSteamDatagramCertificate::add_gameserver_datacenter_ids(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_gameserver_datacenter_ids()->Add(value);
  // @@protoc_insertion_point(field_add:CMsgSteamDatagramCertificate.gameserver_datacenter_ids)
}
inline const ::google::protobuf::RepeatedField<::uint32_t>& CMsgSteamDatagramCertificate::gameserver_datacenter_ids() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:CMsgSteamDatagramCertificate.gameserver_datacenter_ids)
  return _internal_gameserver_datacenter_ids();
}
inline ::google::protobuf::RepeatedField<::uint32_t>* PROTOBUF_NONNULL CMsgSteamDatagramCertificate::mutable_gameserver_datacenter_ids()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:CMsgSteamDatagramCertificate.gameserver_datacenter_ids)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_gameserver_datacenter_ids();
}
inline const ::google::protobuf::RepeatedField<::uint32_t>&
CMsgSteamDatagramCertificate::_internal_gameserver_datacenter_ids() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.gameserver_datacenter_ids_;
}
inline ::google::protobuf::RepeatedField<::uint32_t>* PROTOBUF_NONNULL
CMsgSteamDatagramCertificate::_internal_mutable_gameserver_datacenter_ids() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.gameserver_datacenter_ids_;
}

// optional fixed32 time_created = 8;
inline bool CMsgSteamDatagramCertificate::has_time_created() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void CMsgSteamDatagramCertificate::clear_time_created() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_created_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint32_t CMsgSteamDatagramCertificate::time_created() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramCertificate.time_created)
  return _internal_time_created();
}
inline void CMsgSteamDatagramCertificate::set_time_created(::uint32_t value) {
  _internal_set_time_created(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramCertificate.time_created)
}
inline ::uint32_t CMsgSteamDatagramCertificate::_internal_time_created() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.time_created_;
}
inline void CMsgSteamDatagramCertificate::_internal_set_time_created(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_created_ = value;
}

// optional fixed32 time_expiry = 9;
inline bool CMsgSteamDatagramCertificate::has_time_expiry() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void CMsgSteamDatagramCertificate::clear_time_expiry() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_expiry_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint32_t CMsgSteamDatagramCertificate::time_expiry() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramCertificate.time_expiry)
  return _internal_time_expiry();
}
inline void CMsgSteamDatagramCertificate::set_time_expiry(::uint32_t value) {
  _internal_set_time_expiry(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramCertificate.time_expiry)
}
inline ::uint32_t CMsgSteamDatagramCertificate::_internal_time_expiry() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.time_expiry_;
}
inline void CMsgSteamDatagramCertificate::_internal_set_time_expiry(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_expiry_ = value;
}

// repeated uint32 app_ids = 10;
inline int CMsgSteamDatagramCertificate::_internal_app_ids_size() const {
  return _internal_app_ids().size();
}
inline int CMsgSteamDatagramCertificate::app_ids_size() const {
  return _internal_app_ids_size();
}
inline void CMsgSteamDatagramCertificate::clear_app_ids() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.app_ids_.Clear();
}
inline ::uint32_t CMsgSteamDatagramCertificate::app_ids(int index) const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramCertificate.app_ids)
  return _internal_app_ids().Get(index);
}
inline void CMsgSteamDatagramCertificate::set_app_ids(int index, ::uint32_t value) {
  _internal_mutable_app_ids()->Set(index, value);
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramCertificate.app_ids)
}
inline void CMsgSteamDatagramCertificate::add_app_ids(::uint32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_app_ids()->Add(value);
  // @@protoc_insertion_point(field_add:CMsgSteamDatagramCertificate.app_ids)
}
inline const ::google::protobuf::RepeatedField<::uint32_t>& CMsgSteamDatagramCertificate::app_ids() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:CMsgSteamDatagramCertificate.app_ids)
  return _internal_app_ids();
}
inline ::google::protobuf::RepeatedField<::uint32_t>* PROTOBUF_NONNULL CMsgSteamDatagramCertificate::mutable_app_ids()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:CMsgSteamDatagramCertificate.app_ids)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_app_ids();
}
inline const ::google::protobuf::RepeatedField<::uint32_t>&
CMsgSteamDatagramCertificate::_internal_app_ids() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.app_ids_;
}
inline ::google::protobuf::RepeatedField<::uint32_t>* PROTOBUF_NONNULL
CMsgSteamDatagramCertificate::_internal_mutable_app_ids() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.app_ids_;
}

// repeated string ip_addresses = 13;
inline int CMsgSteamDatagramCertificate::_internal_ip_addresses_size() const {
  return _internal_ip_addresses().size();
}
inline int CMsgSteamDatagramCertificate::ip_addresses_size() const {
  return _internal_ip_addresses_size();
}
inline void CMsgSteamDatagramCertificate::clear_ip_addresses() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ip_addresses_.Clear();
}
inline std::string* PROTOBUF_NONNULL CMsgSteamDatagramCertificate::add_ip_addresses()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_ip_addresses()->Add();
  // @@protoc_insertion_point(field_add_mutable:CMsgSteamDatagramCertificate.ip_addresses)
  return _s;
}
inline const std::string& CMsgSteamDatagramCertificate::ip_addresses(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramCertificate.ip_addresses)
  return _internal_ip_addresses().Get(index);
}
inline std::string* PROTOBUF_NONNULL CMsgSteamDatagramCertificate::mutable_ip_addresses(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:CMsgSteamDatagramCertificate.ip_addresses)
  return _internal_mutable_ip_addresses()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void CMsgSteamDatagramCertificate::set_ip_addresses(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(*_internal_mutable_ip_addresses()->Mutable(index), std::forward<Arg_>(value),
                        args... );
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramCertificate.ip_addresses)
}
template <typename Arg_, typename... Args_>
inline void CMsgSteamDatagramCertificate::add_ip_addresses(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_ip_addresses(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:CMsgSteamDatagramCertificate.ip_addresses)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>& CMsgSteamDatagramCertificate::ip_addresses() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:CMsgSteamDatagramCertificate.ip_addresses)
  return _internal_ip_addresses();
}
inline ::google::protobuf::RepeatedPtrField<std::string>* PROTOBUF_NONNULL
CMsgSteamDatagramCertificate::mutable_ip_addresses() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:CMsgSteamDatagramCertificate.ip_addresses)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_ip_addresses();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
CMsgSteamDatagramCertificate::_internal_ip_addresses() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ip_addresses_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>* PROTOBUF_NONNULL
CMsgSteamDatagramCertificate::_internal_mutable_ip_addresses() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.ip_addresses_;
}

// -------------------------------------------------------------------

// CMsgSteamDatagramCertificateSigned

// optional bytes cert = 4;
inline bool CMsgSteamDatagramCertificateSigned::has_cert() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void CMsgSteamDatagramCertificateSigned::clear_cert() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.cert_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CMsgSteamDatagramCertificateSigned::cert() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramCertificateSigned.cert)
  return _internal_cert();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void CMsgSteamDatagramCertificateSigned::set_cert(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.cert_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramCertificateSigned.cert)
}
inline std::string* PROTOBUF_NONNULL CMsgSteamDatagramCertificateSigned::mutable_cert()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_cert();
  // @@protoc_insertion_point(field_mutable:CMsgSteamDatagramCertificateSigned.cert)
  return _s;
}
inline const std::string& CMsgSteamDatagramCertificateSigned::_internal_cert() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.cert_.Get();
}
inline void CMsgSteamDatagramCertificateSigned::_internal_set_cert(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.cert_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL CMsgSteamDatagramCertificateSigned::_internal_mutable_cert() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.cert_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE CMsgSteamDatagramCertificateSigned::release_cert() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:CMsgSteamDatagramCertificateSigned.cert)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.cert_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.cert_.Set("", GetArena());
  }
  return released;
}
inline void CMsgSteamDatagramCertificateSigned::set_allocated_cert(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.cert_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.cert_.IsDefault()) {
    _impl_.cert_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgSteamDatagramCertificateSigned.cert)
}

// optional fixed64 ca_key_id = 5;
inline bool CMsgSteamDatagramCertificateSigned::has_ca_key_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void CMsgSteamDatagramCertificateSigned::clear_ca_key_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ca_key_id_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint64_t CMsgSteamDatagramCertificateSigned::ca_key_id() const {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramCertificateSigned.ca_key_id)
  return _internal_ca_key_id();
}
inline void CMsgSteamDatagramCertificateSigned::set_ca_key_id(::uint64_t value) {
  _internal_set_ca_key_id(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramCertificateSigned.ca_key_id)
}
inline ::uint64_t CMsgSteamDatagramCertificateSigned::_internal_ca_key_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ca_key_id_;
}
inline void CMsgSteamDatagramCertificateSigned::_internal_set_ca_key_id(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ca_key_id_ = value;
}

// optional bytes ca_signature = 6;
inline bool CMsgSteamDatagramCertificateSigned::has_ca_signature() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void CMsgSteamDatagramCertificateSigned::clear_ca_signature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.ca_signature_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CMsgSteamDatagramCertificateSigned::ca_signature() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramCertificateSigned.ca_signature)
  return _internal_ca_signature();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void CMsgSteamDatagramCertificateSigned::set_ca_signature(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.ca_signature_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramCertificateSigned.ca_signature)
}
inline std::string* PROTOBUF_NONNULL CMsgSteamDatagramCertificateSigned::mutable_ca_signature()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_ca_signature();
  // @@protoc_insertion_point(field_mutable:CMsgSteamDatagramCertificateSigned.ca_signature)
  return _s;
}
inline const std::string& CMsgSteamDatagramCertificateSigned::_internal_ca_signature() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.ca_signature_.Get();
}
inline void CMsgSteamDatagramCertificateSigned::_internal_set_ca_signature(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.ca_signature_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL CMsgSteamDatagramCertificateSigned::_internal_mutable_ca_signature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.ca_signature_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE CMsgSteamDatagramCertificateSigned::release_ca_signature() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:CMsgSteamDatagramCertificateSigned.ca_signature)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.ca_signature_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.ca_signature_.Set("", GetArena());
  }
  return released;
}
inline void CMsgSteamDatagramCertificateSigned::set_allocated_ca_signature(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.ca_signature_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.ca_signature_.IsDefault()) {
    _impl_.ca_signature_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgSteamDatagramCertificateSigned.ca_signature)
}

// optional bytes private_key_data = 1;
inline bool CMsgSteamDatagramCertificateSigned::has_private_key_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CMsgSteamDatagramCertificateSigned::clear_private_key_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.private_key_data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CMsgSteamDatagramCertificateSigned::private_key_data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramCertificateSigned.private_key_data)
  return _internal_private_key_data();
}
template <typename Arg_, typename... Args_>
PROTOBUF_ALWAYS_INLINE void CMsgSteamDatagramCertificateSigned::set_private_key_data(Arg_&& arg, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.private_key_data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:CMsgSteamDatagramCertificateSigned.private_key_data)
}
inline std::string* PROTOBUF_NONNULL CMsgSteamDatagramCertificateSigned::mutable_private_key_data()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_private_key_data();
  // @@protoc_insertion_point(field_mutable:CMsgSteamDatagramCertificateSigned.private_key_data)
  return _s;
}
inline const std::string& CMsgSteamDatagramCertificateSigned::_internal_private_key_data() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.private_key_data_.Get();
}
inline void CMsgSteamDatagramCertificateSigned::_internal_set_private_key_data(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.private_key_data_.Set(value, GetArena());
}
inline std::string* PROTOBUF_NONNULL CMsgSteamDatagramCertificateSigned::_internal_mutable_private_key_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.private_key_data_.Mutable( GetArena());
}
inline std::string* PROTOBUF_NULLABLE CMsgSteamDatagramCertificateSigned::release_private_key_data() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:CMsgSteamDatagramCertificateSigned.private_key_data)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.private_key_data_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.private_key_data_.Set("", GetArena());
  }
  return released;
}
inline void CMsgSteamDatagramCertificateSigned::set_allocated_private_key_data(std::string* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.private_key_data_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.private_key_data_.IsDefault()) {
    _impl_.private_key_data_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:CMsgSteamDatagramCertificateSigned.private_key_data)
}

// -------------------------------------------------------------------

// CMsgSteamDatagramCertificateRequest

// optional .CMsgSteamDatagramCertificate cert = 1;
inline bool CMsgSteamDatagramCertificateRequest::has_cert() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cert_ != nullptr);
  return value;
}
inline void CMsgSteamDatagramCertificateRequest::clear_cert() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.cert_ != nullptr) _impl_.cert_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::CMsgSteamDatagramCertificate& CMsgSteamDatagramCertificateRequest::_internal_cert() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::CMsgSteamDatagramCertificate* p = _impl_.cert_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgSteamDatagramCertificate&>(::_CMsgSteamDatagramCertificate_default_instance_);
}
inline const ::CMsgSteamDatagramCertificate& CMsgSteamDatagramCertificateRequest::cert() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CMsgSteamDatagramCertificateRequest.cert)
  return _internal_cert();
}
inline void CMsgSteamDatagramCertificateRequest::unsafe_arena_set_allocated_cert(
    ::CMsgSteamDatagramCertificate* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.cert_);
  }
  _impl_.cert_ = reinterpret_cast<::CMsgSteamDatagramCertificate*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CMsgSteamDatagramCertificateRequest.cert)
}
inline ::CMsgSteamDatagramCertificate* PROTOBUF_NULLABLE CMsgSteamDatagramCertificateRequest::release_cert() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgSteamDatagramCertificate* released = _impl_.cert_;
  _impl_.cert_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::CMsgSteamDatagramCertificate* PROTOBUF_NULLABLE CMsgSteamDatagramCertificateRequest::unsafe_arena_release_cert() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:CMsgSteamDatagramCertificateRequest.cert)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgSteamDatagramCertificate* temp = _impl_.cert_;
  _impl_.cert_ = nullptr;
  return temp;
}
inline ::CMsgSteamDatagramCertificate* PROTOBUF_NONNULL CMsgSteamDatagramCertificateRequest::_internal_mutable_cert() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.cert_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::CMsgSteamDatagramCertificate>(GetArena());
    _impl_.cert_ = reinterpret_cast<::CMsgSteamDatagramCertificate*>(p);
  }
  return _impl_.cert_;
}
inline ::CMsgSteamDatagramCertificate* PROTOBUF_NONNULL CMsgSteamDatagramCertificateRequest::mutable_cert()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::CMsgSteamDatagramCertificate* _msg = _internal_mutable_cert();
  // @@protoc_insertion_point(field_mutable:CMsgSteamDatagramCertificateRequest.cert)
  return _msg;
}
inline void CMsgSteamDatagramCertificateRequest::set_allocated_cert(::CMsgSteamDatagramCertificate* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.cert_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.cert_ = reinterpret_cast<::CMsgSteamDatagramCertificate*>(value);
  // @@protoc_insertion_point(field_set_allocated:CMsgSteamDatagramCertificateRequest.cert)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::CMsgSteamDatagramCertificate_EKeyType> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::CMsgSteamDatagramCertificate_EKeyType>() {
  return ::CMsgSteamDatagramCertificate_EKeyType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // steamnetworkingsockets_5fmessages_5fcerts_2eproto_2epb_2eh

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: cs_usercmd.proto
// Protobuf C++ Version: 6.30.0-rc1

#ifndef cs_5fusercmd_2eproto_2epb_2eh
#define cs_5fusercmd_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6030000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
#include "networkbasetypes.pb.h"
#include "usercmd.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_cs_5fusercmd_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_cs_5fusercmd_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
extern const ::google::protobuf::internal::DescriptorTable descriptor_table_cs_5fusercmd_2eproto;
}  // extern "C"
class CSGOInputHistoryEntryPB;
struct CSGOInputHistoryEntryPBDefaultTypeInternal;
extern CSGOInputHistoryEntryPBDefaultTypeInternal _CSGOInputHistoryEntryPB_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull CSGOInputHistoryEntryPB_class_data_;
class CSGOInterpolationInfoPB;
struct CSGOInterpolationInfoPBDefaultTypeInternal;
extern CSGOInterpolationInfoPBDefaultTypeInternal _CSGOInterpolationInfoPB_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull CSGOInterpolationInfoPB_class_data_;
class CSGOInterpolationInfoPB_CL;
struct CSGOInterpolationInfoPB_CLDefaultTypeInternal;
extern CSGOInterpolationInfoPB_CLDefaultTypeInternal _CSGOInterpolationInfoPB_CL_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull CSGOInterpolationInfoPB_CL_class_data_;
class CSGOUserCmdPB;
struct CSGOUserCmdPBDefaultTypeInternal;
extern CSGOUserCmdPBDefaultTypeInternal _CSGOUserCmdPB_default_instance_;
extern const ::google::protobuf::internal::ClassDataFull CSGOUserCmdPB_class_data_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class CSGOInterpolationInfoPB_CL final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:CSGOInterpolationInfoPB_CL) */ {
 public:
  inline CSGOInterpolationInfoPB_CL() : CSGOInterpolationInfoPB_CL(nullptr) {}
  ~CSGOInterpolationInfoPB_CL() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CSGOInterpolationInfoPB_CL* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CSGOInterpolationInfoPB_CL));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CSGOInterpolationInfoPB_CL(::google::protobuf::internal::ConstantInitialized);

  inline CSGOInterpolationInfoPB_CL(const CSGOInterpolationInfoPB_CL& from) : CSGOInterpolationInfoPB_CL(nullptr, from) {}
  inline CSGOInterpolationInfoPB_CL(CSGOInterpolationInfoPB_CL&& from) noexcept
      : CSGOInterpolationInfoPB_CL(nullptr, std::move(from)) {}
  inline CSGOInterpolationInfoPB_CL& operator=(const CSGOInterpolationInfoPB_CL& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSGOInterpolationInfoPB_CL& operator=(CSGOInterpolationInfoPB_CL&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSGOInterpolationInfoPB_CL& default_instance() {
    return *reinterpret_cast<const CSGOInterpolationInfoPB_CL*>(
        &_CSGOInterpolationInfoPB_CL_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(CSGOInterpolationInfoPB_CL& a, CSGOInterpolationInfoPB_CL& b) { a.Swap(&b); }
  inline void Swap(CSGOInterpolationInfoPB_CL* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSGOInterpolationInfoPB_CL* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSGOInterpolationInfoPB_CL* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CSGOInterpolationInfoPB_CL>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CSGOInterpolationInfoPB_CL& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CSGOInterpolationInfoPB_CL& from) { CSGOInterpolationInfoPB_CL::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CSGOInterpolationInfoPB_CL* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "CSGOInterpolationInfoPB_CL"; }

 protected:
  explicit CSGOInterpolationInfoPB_CL(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  CSGOInterpolationInfoPB_CL(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const CSGOInterpolationInfoPB_CL& from);
  CSGOInterpolationInfoPB_CL(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, CSGOInterpolationInfoPB_CL&& from) noexcept
      : CSGOInterpolationInfoPB_CL(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFracFieldNumber = 3,
  };
  // optional float frac = 3 [default = 0];
  bool has_frac() const;
  void clear_frac() ;
  float frac() const;
  void set_frac(float value);

  private:
  float _internal_frac() const;
  void _internal_set_frac(float value);

  public:
  // @@protoc_insertion_point(class_scope:CSGOInterpolationInfoPB_CL)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const CSGOInterpolationInfoPB_CL& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    float frac_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cs_5fusercmd_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull CSGOInterpolationInfoPB_CL_class_data_;
// -------------------------------------------------------------------

class CSGOInterpolationInfoPB final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:CSGOInterpolationInfoPB) */ {
 public:
  inline CSGOInterpolationInfoPB() : CSGOInterpolationInfoPB(nullptr) {}
  ~CSGOInterpolationInfoPB() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CSGOInterpolationInfoPB* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CSGOInterpolationInfoPB));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CSGOInterpolationInfoPB(::google::protobuf::internal::ConstantInitialized);

  inline CSGOInterpolationInfoPB(const CSGOInterpolationInfoPB& from) : CSGOInterpolationInfoPB(nullptr, from) {}
  inline CSGOInterpolationInfoPB(CSGOInterpolationInfoPB&& from) noexcept
      : CSGOInterpolationInfoPB(nullptr, std::move(from)) {}
  inline CSGOInterpolationInfoPB& operator=(const CSGOInterpolationInfoPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSGOInterpolationInfoPB& operator=(CSGOInterpolationInfoPB&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSGOInterpolationInfoPB& default_instance() {
    return *reinterpret_cast<const CSGOInterpolationInfoPB*>(
        &_CSGOInterpolationInfoPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(CSGOInterpolationInfoPB& a, CSGOInterpolationInfoPB& b) { a.Swap(&b); }
  inline void Swap(CSGOInterpolationInfoPB* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSGOInterpolationInfoPB* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSGOInterpolationInfoPB* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CSGOInterpolationInfoPB>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CSGOInterpolationInfoPB& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CSGOInterpolationInfoPB& from) { CSGOInterpolationInfoPB::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CSGOInterpolationInfoPB* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "CSGOInterpolationInfoPB"; }

 protected:
  explicit CSGOInterpolationInfoPB(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  CSGOInterpolationInfoPB(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const CSGOInterpolationInfoPB& from);
  CSGOInterpolationInfoPB(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, CSGOInterpolationInfoPB&& from) noexcept
      : CSGOInterpolationInfoPB(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFracFieldNumber = 3,
    kSrcTickFieldNumber = 1,
    kDstTickFieldNumber = 2,
  };
  // optional float frac = 3 [default = 0];
  bool has_frac() const;
  void clear_frac() ;
  float frac() const;
  void set_frac(float value);

  private:
  float _internal_frac() const;
  void _internal_set_frac(float value);

  public:
  // optional int32 src_tick = 1 [default = -1];
  bool has_src_tick() const;
  void clear_src_tick() ;
  ::int32_t src_tick() const;
  void set_src_tick(::int32_t value);

  private:
  ::int32_t _internal_src_tick() const;
  void _internal_set_src_tick(::int32_t value);

  public:
  // optional int32 dst_tick = 2 [default = -1];
  bool has_dst_tick() const;
  void clear_dst_tick() ;
  ::int32_t dst_tick() const;
  void set_dst_tick(::int32_t value);

  private:
  ::int32_t _internal_dst_tick() const;
  void _internal_set_dst_tick(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:CSGOInterpolationInfoPB)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3,
                                   0, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const CSGOInterpolationInfoPB& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    float frac_;
    ::int32_t src_tick_;
    ::int32_t dst_tick_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cs_5fusercmd_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull CSGOInterpolationInfoPB_class_data_;
// -------------------------------------------------------------------

class CSGOInputHistoryEntryPB final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:CSGOInputHistoryEntryPB) */ {
 public:
  inline CSGOInputHistoryEntryPB() : CSGOInputHistoryEntryPB(nullptr) {}
  ~CSGOInputHistoryEntryPB() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CSGOInputHistoryEntryPB* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CSGOInputHistoryEntryPB));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CSGOInputHistoryEntryPB(::google::protobuf::internal::ConstantInitialized);

  inline CSGOInputHistoryEntryPB(const CSGOInputHistoryEntryPB& from) : CSGOInputHistoryEntryPB(nullptr, from) {}
  inline CSGOInputHistoryEntryPB(CSGOInputHistoryEntryPB&& from) noexcept
      : CSGOInputHistoryEntryPB(nullptr, std::move(from)) {}
  inline CSGOInputHistoryEntryPB& operator=(const CSGOInputHistoryEntryPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSGOInputHistoryEntryPB& operator=(CSGOInputHistoryEntryPB&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSGOInputHistoryEntryPB& default_instance() {
    return *reinterpret_cast<const CSGOInputHistoryEntryPB*>(
        &_CSGOInputHistoryEntryPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(CSGOInputHistoryEntryPB& a, CSGOInputHistoryEntryPB& b) { a.Swap(&b); }
  inline void Swap(CSGOInputHistoryEntryPB* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSGOInputHistoryEntryPB* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSGOInputHistoryEntryPB* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CSGOInputHistoryEntryPB>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CSGOInputHistoryEntryPB& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CSGOInputHistoryEntryPB& from) { CSGOInputHistoryEntryPB::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CSGOInputHistoryEntryPB* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "CSGOInputHistoryEntryPB"; }

 protected:
  explicit CSGOInputHistoryEntryPB(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  CSGOInputHistoryEntryPB(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const CSGOInputHistoryEntryPB& from);
  CSGOInputHistoryEntryPB(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, CSGOInputHistoryEntryPB&& from) noexcept
      : CSGOInputHistoryEntryPB(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kViewAnglesFieldNumber = 2,
    kClInterpFieldNumber = 12,
    kSvInterp0FieldNumber = 13,
    kSvInterp1FieldNumber = 14,
    kPlayerInterpFieldNumber = 15,
    kShootPositionFieldNumber = 66,
    kTargetHeadPosCheckFieldNumber = 67,
    kTargetAbsPosCheckFieldNumber = 68,
    kTargetAbsAngCheckFieldNumber = 69,
    kRenderTickCountFieldNumber = 4,
    kRenderTickFractionFieldNumber = 5,
    kPlayerTickCountFieldNumber = 6,
    kPlayerTickFractionFieldNumber = 7,
    kFrameNumberFieldNumber = 64,
    kTargetEntIndexFieldNumber = 65,
  };
  // optional .CMsgQAngle view_angles = 2;
  bool has_view_angles() const;
  void clear_view_angles() ;
  const ::CMsgQAngle& view_angles() const;
  [[nodiscard]] ::CMsgQAngle* PROTOBUF_NULLABLE release_view_angles();
  ::CMsgQAngle* PROTOBUF_NONNULL mutable_view_angles();
  void set_allocated_view_angles(::CMsgQAngle* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_view_angles(::CMsgQAngle* PROTOBUF_NULLABLE value);
  ::CMsgQAngle* PROTOBUF_NULLABLE unsafe_arena_release_view_angles();

  private:
  const ::CMsgQAngle& _internal_view_angles() const;
  ::CMsgQAngle* PROTOBUF_NONNULL _internal_mutable_view_angles();

  public:
  // optional .CSGOInterpolationInfoPB_CL cl_interp = 12;
  bool has_cl_interp() const;
  void clear_cl_interp() ;
  const ::CSGOInterpolationInfoPB_CL& cl_interp() const;
  [[nodiscard]] ::CSGOInterpolationInfoPB_CL* PROTOBUF_NULLABLE release_cl_interp();
  ::CSGOInterpolationInfoPB_CL* PROTOBUF_NONNULL mutable_cl_interp();
  void set_allocated_cl_interp(::CSGOInterpolationInfoPB_CL* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_cl_interp(::CSGOInterpolationInfoPB_CL* PROTOBUF_NULLABLE value);
  ::CSGOInterpolationInfoPB_CL* PROTOBUF_NULLABLE unsafe_arena_release_cl_interp();

  private:
  const ::CSGOInterpolationInfoPB_CL& _internal_cl_interp() const;
  ::CSGOInterpolationInfoPB_CL* PROTOBUF_NONNULL _internal_mutable_cl_interp();

  public:
  // optional .CSGOInterpolationInfoPB sv_interp0 = 13;
  bool has_sv_interp0() const;
  void clear_sv_interp0() ;
  const ::CSGOInterpolationInfoPB& sv_interp0() const;
  [[nodiscard]] ::CSGOInterpolationInfoPB* PROTOBUF_NULLABLE release_sv_interp0();
  ::CSGOInterpolationInfoPB* PROTOBUF_NONNULL mutable_sv_interp0();
  void set_allocated_sv_interp0(::CSGOInterpolationInfoPB* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_sv_interp0(::CSGOInterpolationInfoPB* PROTOBUF_NULLABLE value);
  ::CSGOInterpolationInfoPB* PROTOBUF_NULLABLE unsafe_arena_release_sv_interp0();

  private:
  const ::CSGOInterpolationInfoPB& _internal_sv_interp0() const;
  ::CSGOInterpolationInfoPB* PROTOBUF_NONNULL _internal_mutable_sv_interp0();

  public:
  // optional .CSGOInterpolationInfoPB sv_interp1 = 14;
  bool has_sv_interp1() const;
  void clear_sv_interp1() ;
  const ::CSGOInterpolationInfoPB& sv_interp1() const;
  [[nodiscard]] ::CSGOInterpolationInfoPB* PROTOBUF_NULLABLE release_sv_interp1();
  ::CSGOInterpolationInfoPB* PROTOBUF_NONNULL mutable_sv_interp1();
  void set_allocated_sv_interp1(::CSGOInterpolationInfoPB* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_sv_interp1(::CSGOInterpolationInfoPB* PROTOBUF_NULLABLE value);
  ::CSGOInterpolationInfoPB* PROTOBUF_NULLABLE unsafe_arena_release_sv_interp1();

  private:
  const ::CSGOInterpolationInfoPB& _internal_sv_interp1() const;
  ::CSGOInterpolationInfoPB* PROTOBUF_NONNULL _internal_mutable_sv_interp1();

  public:
  // optional .CSGOInterpolationInfoPB player_interp = 15;
  bool has_player_interp() const;
  void clear_player_interp() ;
  const ::CSGOInterpolationInfoPB& player_interp() const;
  [[nodiscard]] ::CSGOInterpolationInfoPB* PROTOBUF_NULLABLE release_player_interp();
  ::CSGOInterpolationInfoPB* PROTOBUF_NONNULL mutable_player_interp();
  void set_allocated_player_interp(::CSGOInterpolationInfoPB* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_player_interp(::CSGOInterpolationInfoPB* PROTOBUF_NULLABLE value);
  ::CSGOInterpolationInfoPB* PROTOBUF_NULLABLE unsafe_arena_release_player_interp();

  private:
  const ::CSGOInterpolationInfoPB& _internal_player_interp() const;
  ::CSGOInterpolationInfoPB* PROTOBUF_NONNULL _internal_mutable_player_interp();

  public:
  // optional .CMsgVector shoot_position = 66;
  bool has_shoot_position() const;
  void clear_shoot_position() ;
  const ::CMsgVector& shoot_position() const;
  [[nodiscard]] ::CMsgVector* PROTOBUF_NULLABLE release_shoot_position();
  ::CMsgVector* PROTOBUF_NONNULL mutable_shoot_position();
  void set_allocated_shoot_position(::CMsgVector* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_shoot_position(::CMsgVector* PROTOBUF_NULLABLE value);
  ::CMsgVector* PROTOBUF_NULLABLE unsafe_arena_release_shoot_position();

  private:
  const ::CMsgVector& _internal_shoot_position() const;
  ::CMsgVector* PROTOBUF_NONNULL _internal_mutable_shoot_position();

  public:
  // optional .CMsgVector target_head_pos_check = 67;
  bool has_target_head_pos_check() const;
  void clear_target_head_pos_check() ;
  const ::CMsgVector& target_head_pos_check() const;
  [[nodiscard]] ::CMsgVector* PROTOBUF_NULLABLE release_target_head_pos_check();
  ::CMsgVector* PROTOBUF_NONNULL mutable_target_head_pos_check();
  void set_allocated_target_head_pos_check(::CMsgVector* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_target_head_pos_check(::CMsgVector* PROTOBUF_NULLABLE value);
  ::CMsgVector* PROTOBUF_NULLABLE unsafe_arena_release_target_head_pos_check();

  private:
  const ::CMsgVector& _internal_target_head_pos_check() const;
  ::CMsgVector* PROTOBUF_NONNULL _internal_mutable_target_head_pos_check();

  public:
  // optional .CMsgVector target_abs_pos_check = 68;
  bool has_target_abs_pos_check() const;
  void clear_target_abs_pos_check() ;
  const ::CMsgVector& target_abs_pos_check() const;
  [[nodiscard]] ::CMsgVector* PROTOBUF_NULLABLE release_target_abs_pos_check();
  ::CMsgVector* PROTOBUF_NONNULL mutable_target_abs_pos_check();
  void set_allocated_target_abs_pos_check(::CMsgVector* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_target_abs_pos_check(::CMsgVector* PROTOBUF_NULLABLE value);
  ::CMsgVector* PROTOBUF_NULLABLE unsafe_arena_release_target_abs_pos_check();

  private:
  const ::CMsgVector& _internal_target_abs_pos_check() const;
  ::CMsgVector* PROTOBUF_NONNULL _internal_mutable_target_abs_pos_check();

  public:
  // optional .CMsgQAngle target_abs_ang_check = 69;
  bool has_target_abs_ang_check() const;
  void clear_target_abs_ang_check() ;
  const ::CMsgQAngle& target_abs_ang_check() const;
  [[nodiscard]] ::CMsgQAngle* PROTOBUF_NULLABLE release_target_abs_ang_check();
  ::CMsgQAngle* PROTOBUF_NONNULL mutable_target_abs_ang_check();
  void set_allocated_target_abs_ang_check(::CMsgQAngle* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_target_abs_ang_check(::CMsgQAngle* PROTOBUF_NULLABLE value);
  ::CMsgQAngle* PROTOBUF_NULLABLE unsafe_arena_release_target_abs_ang_check();

  private:
  const ::CMsgQAngle& _internal_target_abs_ang_check() const;
  ::CMsgQAngle* PROTOBUF_NONNULL _internal_mutable_target_abs_ang_check();

  public:
  // optional int32 render_tick_count = 4;
  bool has_render_tick_count() const;
  void clear_render_tick_count() ;
  ::int32_t render_tick_count() const;
  void set_render_tick_count(::int32_t value);

  private:
  ::int32_t _internal_render_tick_count() const;
  void _internal_set_render_tick_count(::int32_t value);

  public:
  // optional float render_tick_fraction = 5;
  bool has_render_tick_fraction() const;
  void clear_render_tick_fraction() ;
  float render_tick_fraction() const;
  void set_render_tick_fraction(float value);

  private:
  float _internal_render_tick_fraction() const;
  void _internal_set_render_tick_fraction(float value);

  public:
  // optional int32 player_tick_count = 6;
  bool has_player_tick_count() const;
  void clear_player_tick_count() ;
  ::int32_t player_tick_count() const;
  void set_player_tick_count(::int32_t value);

  private:
  ::int32_t _internal_player_tick_count() const;
  void _internal_set_player_tick_count(::int32_t value);

  public:
  // optional float player_tick_fraction = 7;
  bool has_player_tick_fraction() const;
  void clear_player_tick_fraction() ;
  float player_tick_fraction() const;
  void set_player_tick_fraction(float value);

  private:
  float _internal_player_tick_fraction() const;
  void _internal_set_player_tick_fraction(float value);

  public:
  // optional int32 frame_number = 64;
  bool has_frame_number() const;
  void clear_frame_number() ;
  ::int32_t frame_number() const;
  void set_frame_number(::int32_t value);

  private:
  ::int32_t _internal_frame_number() const;
  void _internal_set_frame_number(::int32_t value);

  public:
  // optional int32 target_ent_index = 65 [default = -1];
  bool has_target_ent_index() const;
  void clear_target_ent_index() ;
  ::int32_t target_ent_index() const;
  void set_target_ent_index(::int32_t value);

  private:
  ::int32_t _internal_target_ent_index() const;
  void _internal_set_target_ent_index(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:CSGOInputHistoryEntryPB)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 15,
                                   9, 0,
                                   7>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const CSGOInputHistoryEntryPB& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::CMsgQAngle* PROTOBUF_NULLABLE view_angles_;
    ::CSGOInterpolationInfoPB_CL* PROTOBUF_NULLABLE cl_interp_;
    ::CSGOInterpolationInfoPB* PROTOBUF_NULLABLE sv_interp0_;
    ::CSGOInterpolationInfoPB* PROTOBUF_NULLABLE sv_interp1_;
    ::CSGOInterpolationInfoPB* PROTOBUF_NULLABLE player_interp_;
    ::CMsgVector* PROTOBUF_NULLABLE shoot_position_;
    ::CMsgVector* PROTOBUF_NULLABLE target_head_pos_check_;
    ::CMsgVector* PROTOBUF_NULLABLE target_abs_pos_check_;
    ::CMsgQAngle* PROTOBUF_NULLABLE target_abs_ang_check_;
    ::int32_t render_tick_count_;
    float render_tick_fraction_;
    ::int32_t player_tick_count_;
    float player_tick_fraction_;
    ::int32_t frame_number_;
    ::int32_t target_ent_index_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cs_5fusercmd_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull CSGOInputHistoryEntryPB_class_data_;
// -------------------------------------------------------------------

class CSGOUserCmdPB final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:CSGOUserCmdPB) */ {
 public:
  inline CSGOUserCmdPB() : CSGOUserCmdPB(nullptr) {}
  ~CSGOUserCmdPB() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CSGOUserCmdPB* PROTOBUF_NONNULL msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CSGOUserCmdPB));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CSGOUserCmdPB(::google::protobuf::internal::ConstantInitialized);

  inline CSGOUserCmdPB(const CSGOUserCmdPB& from) : CSGOUserCmdPB(nullptr, from) {}
  inline CSGOUserCmdPB(CSGOUserCmdPB&& from) noexcept
      : CSGOUserCmdPB(nullptr, std::move(from)) {}
  inline CSGOUserCmdPB& operator=(const CSGOUserCmdPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline CSGOUserCmdPB& operator=(CSGOUserCmdPB&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* PROTOBUF_NONNULL mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* PROTOBUF_NONNULL GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* PROTOBUF_NONNULL GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CSGOUserCmdPB& default_instance() {
    return *reinterpret_cast<const CSGOUserCmdPB*>(
        &_CSGOUserCmdPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(CSGOUserCmdPB& a, CSGOUserCmdPB& b) { a.Swap(&b); }
  inline void Swap(CSGOUserCmdPB* PROTOBUF_NONNULL other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CSGOUserCmdPB* PROTOBUF_NONNULL other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CSGOUserCmdPB* PROTOBUF_NONNULL New(::google::protobuf::Arena* PROTOBUF_NULLABLE arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CSGOUserCmdPB>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CSGOUserCmdPB& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CSGOUserCmdPB& from) { CSGOUserCmdPB::MergeImpl(*this, from); }

  private:
  static void MergeImpl(::google::protobuf::MessageLite& to_msg,
                        const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      const ::google::protobuf::MessageLite& msg, ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* PROTOBUF_NONNULL _InternalSerialize(
      ::uint8_t* PROTOBUF_NONNULL target,
      ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CSGOUserCmdPB* PROTOBUF_NONNULL other);
 private:
  template <typename T>
  friend ::absl::string_view(::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "CSGOUserCmdPB"; }

 protected:
  explicit CSGOUserCmdPB(::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  CSGOUserCmdPB(::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const CSGOUserCmdPB& from);
  CSGOUserCmdPB(
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, CSGOUserCmdPB&& from) noexcept
      : CSGOUserCmdPB(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL GetClassData() const PROTOBUF_FINAL;
  static void* PROTOBUF_NONNULL PlacementNew_(
      const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
      ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
  static constexpr auto InternalNewImpl_();

 public:
  static constexpr auto InternalGenerateClassData_();

  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kInputHistoryFieldNumber = 2,
    kBaseFieldNumber = 1,
    kLeftHandDesiredFieldNumber = 9,
    kIsPredictingDamageFieldNumber = 10,
    kAttack3StartHistoryIndexFieldNumber = 8,
    kAttack1StartHistoryIndexFieldNumber = 6,
    kAttack2StartHistoryIndexFieldNumber = 7,
  };
  // repeated .CSGOInputHistoryEntryPB input_history = 2;
  int input_history_size() const;
  private:
  int _internal_input_history_size() const;

  public:
  void clear_input_history() ;
  ::CSGOInputHistoryEntryPB* PROTOBUF_NONNULL mutable_input_history(int index);
  ::google::protobuf::RepeatedPtrField<::CSGOInputHistoryEntryPB>* PROTOBUF_NONNULL mutable_input_history();

  private:
  const ::google::protobuf::RepeatedPtrField<::CSGOInputHistoryEntryPB>& _internal_input_history() const;
  ::google::protobuf::RepeatedPtrField<::CSGOInputHistoryEntryPB>* PROTOBUF_NONNULL _internal_mutable_input_history();
  public:
  const ::CSGOInputHistoryEntryPB& input_history(int index) const;
  ::CSGOInputHistoryEntryPB* PROTOBUF_NONNULL add_input_history();
  const ::google::protobuf::RepeatedPtrField<::CSGOInputHistoryEntryPB>& input_history() const;
  // optional .CBaseUserCmdPB base = 1;
  bool has_base() const;
  void clear_base() ;
  const ::CBaseUserCmdPB& base() const;
  [[nodiscard]] ::CBaseUserCmdPB* PROTOBUF_NULLABLE release_base();
  ::CBaseUserCmdPB* PROTOBUF_NONNULL mutable_base();
  void set_allocated_base(::CBaseUserCmdPB* PROTOBUF_NULLABLE value);
  void unsafe_arena_set_allocated_base(::CBaseUserCmdPB* PROTOBUF_NULLABLE value);
  ::CBaseUserCmdPB* PROTOBUF_NULLABLE unsafe_arena_release_base();

  private:
  const ::CBaseUserCmdPB& _internal_base() const;
  ::CBaseUserCmdPB* PROTOBUF_NONNULL _internal_mutable_base();

  public:
  // optional bool left_hand_desired = 9 [default = false];
  bool has_left_hand_desired() const;
  void clear_left_hand_desired() ;
  bool left_hand_desired() const;
  void set_left_hand_desired(bool value);

  private:
  bool _internal_left_hand_desired() const;
  void _internal_set_left_hand_desired(bool value);

  public:
  // optional bool is_predicting_damage = 10 [default = false];
  bool has_is_predicting_damage() const;
  void clear_is_predicting_damage() ;
  bool is_predicting_damage() const;
  void set_is_predicting_damage(bool value);

  private:
  bool _internal_is_predicting_damage() const;
  void _internal_set_is_predicting_damage(bool value);

  public:
  // optional int32 attack3_start_history_index = 8 [default = -1];
  bool has_attack3_start_history_index() const;
  void clear_attack3_start_history_index() ;
  ::int32_t attack3_start_history_index() const;
  void set_attack3_start_history_index(::int32_t value);

  private:
  ::int32_t _internal_attack3_start_history_index() const;
  void _internal_set_attack3_start_history_index(::int32_t value);

  public:
  // optional int32 attack1_start_history_index = 6 [default = -1];
  bool has_attack1_start_history_index() const;
  void clear_attack1_start_history_index() ;
  ::int32_t attack1_start_history_index() const;
  void set_attack1_start_history_index(::int32_t value);

  private:
  ::int32_t _internal_attack1_start_history_index() const;
  void _internal_set_attack1_start_history_index(::int32_t value);

  public:
  // optional int32 attack2_start_history_index = 7 [default = -1];
  bool has_attack2_start_history_index() const;
  void clear_attack2_start_history_index() ;
  ::int32_t attack2_start_history_index() const;
  void set_attack2_start_history_index(::int32_t value);

  private:
  ::int32_t _internal_attack2_start_history_index() const;
  void _internal_set_attack2_start_history_index(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:CSGOUserCmdPB)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 7,
                                   2, 0,
                                   2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena);
    inline explicit Impl_(
        ::google::protobuf::internal::InternalVisibility visibility,
        ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
        const CSGOUserCmdPB& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::CSGOInputHistoryEntryPB > input_history_;
    ::CBaseUserCmdPB* PROTOBUF_NULLABLE base_;
    bool left_hand_desired_;
    bool is_predicting_damage_;
    ::int32_t attack3_start_history_index_;
    ::int32_t attack1_start_history_index_;
    ::int32_t attack2_start_history_index_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_cs_5fusercmd_2eproto;
};

extern const ::google::protobuf::internal::ClassDataFull CSGOUserCmdPB_class_data_;

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// CSGOInterpolationInfoPB

// optional int32 src_tick = 1 [default = -1];
inline bool CSGOInterpolationInfoPB::has_src_tick() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void CSGOInterpolationInfoPB::clear_src_tick() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.src_tick_ = -1;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t CSGOInterpolationInfoPB::src_tick() const {
  // @@protoc_insertion_point(field_get:CSGOInterpolationInfoPB.src_tick)
  return _internal_src_tick();
}
inline void CSGOInterpolationInfoPB::set_src_tick(::int32_t value) {
  _internal_set_src_tick(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:CSGOInterpolationInfoPB.src_tick)
}
inline ::int32_t CSGOInterpolationInfoPB::_internal_src_tick() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.src_tick_;
}
inline void CSGOInterpolationInfoPB::_internal_set_src_tick(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.src_tick_ = value;
}

// optional int32 dst_tick = 2 [default = -1];
inline bool CSGOInterpolationInfoPB::has_dst_tick() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void CSGOInterpolationInfoPB::clear_dst_tick() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dst_tick_ = -1;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t CSGOInterpolationInfoPB::dst_tick() const {
  // @@protoc_insertion_point(field_get:CSGOInterpolationInfoPB.dst_tick)
  return _internal_dst_tick();
}
inline void CSGOInterpolationInfoPB::set_dst_tick(::int32_t value) {
  _internal_set_dst_tick(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:CSGOInterpolationInfoPB.dst_tick)
}
inline ::int32_t CSGOInterpolationInfoPB::_internal_dst_tick() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.dst_tick_;
}
inline void CSGOInterpolationInfoPB::_internal_set_dst_tick(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.dst_tick_ = value;
}

// optional float frac = 3 [default = 0];
inline bool CSGOInterpolationInfoPB::has_frac() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CSGOInterpolationInfoPB::clear_frac() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.frac_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float CSGOInterpolationInfoPB::frac() const {
  // @@protoc_insertion_point(field_get:CSGOInterpolationInfoPB.frac)
  return _internal_frac();
}
inline void CSGOInterpolationInfoPB::set_frac(float value) {
  _internal_set_frac(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:CSGOInterpolationInfoPB.frac)
}
inline float CSGOInterpolationInfoPB::_internal_frac() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.frac_;
}
inline void CSGOInterpolationInfoPB::_internal_set_frac(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.frac_ = value;
}

// -------------------------------------------------------------------

// CSGOInterpolationInfoPB_CL

// optional float frac = 3 [default = 0];
inline bool CSGOInterpolationInfoPB_CL::has_frac() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CSGOInterpolationInfoPB_CL::clear_frac() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.frac_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float CSGOInterpolationInfoPB_CL::frac() const {
  // @@protoc_insertion_point(field_get:CSGOInterpolationInfoPB_CL.frac)
  return _internal_frac();
}
inline void CSGOInterpolationInfoPB_CL::set_frac(float value) {
  _internal_set_frac(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:CSGOInterpolationInfoPB_CL.frac)
}
inline float CSGOInterpolationInfoPB_CL::_internal_frac() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.frac_;
}
inline void CSGOInterpolationInfoPB_CL::_internal_set_frac(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.frac_ = value;
}

// -------------------------------------------------------------------

// CSGOInputHistoryEntryPB

// optional .CMsgQAngle view_angles = 2;
inline bool CSGOInputHistoryEntryPB::has_view_angles() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.view_angles_ != nullptr);
  return value;
}
inline const ::CMsgQAngle& CSGOInputHistoryEntryPB::_internal_view_angles() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::CMsgQAngle* p = _impl_.view_angles_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgQAngle&>(::_CMsgQAngle_default_instance_);
}
inline const ::CMsgQAngle& CSGOInputHistoryEntryPB::view_angles() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CSGOInputHistoryEntryPB.view_angles)
  return _internal_view_angles();
}
inline void CSGOInputHistoryEntryPB::unsafe_arena_set_allocated_view_angles(
    ::CMsgQAngle* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.view_angles_);
  }
  _impl_.view_angles_ = reinterpret_cast<::CMsgQAngle*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSGOInputHistoryEntryPB.view_angles)
}
inline ::CMsgQAngle* PROTOBUF_NULLABLE CSGOInputHistoryEntryPB::release_view_angles() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgQAngle* released = _impl_.view_angles_;
  _impl_.view_angles_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::CMsgQAngle* PROTOBUF_NULLABLE CSGOInputHistoryEntryPB::unsafe_arena_release_view_angles() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:CSGOInputHistoryEntryPB.view_angles)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CMsgQAngle* temp = _impl_.view_angles_;
  _impl_.view_angles_ = nullptr;
  return temp;
}
inline ::CMsgQAngle* PROTOBUF_NONNULL CSGOInputHistoryEntryPB::_internal_mutable_view_angles() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.view_angles_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::CMsgQAngle>(GetArena());
    _impl_.view_angles_ = reinterpret_cast<::CMsgQAngle*>(p);
  }
  return _impl_.view_angles_;
}
inline ::CMsgQAngle* PROTOBUF_NONNULL CSGOInputHistoryEntryPB::mutable_view_angles()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::CMsgQAngle* _msg = _internal_mutable_view_angles();
  // @@protoc_insertion_point(field_mutable:CSGOInputHistoryEntryPB.view_angles)
  return _msg;
}
inline void CSGOInputHistoryEntryPB::set_allocated_view_angles(::CMsgQAngle* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.view_angles_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.view_angles_ = reinterpret_cast<::CMsgQAngle*>(value);
  // @@protoc_insertion_point(field_set_allocated:CSGOInputHistoryEntryPB.view_angles)
}

// optional int32 render_tick_count = 4;
inline bool CSGOInputHistoryEntryPB::has_render_tick_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void CSGOInputHistoryEntryPB::clear_render_tick_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.render_tick_count_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::int32_t CSGOInputHistoryEntryPB::render_tick_count() const {
  // @@protoc_insertion_point(field_get:CSGOInputHistoryEntryPB.render_tick_count)
  return _internal_render_tick_count();
}
inline void CSGOInputHistoryEntryPB::set_render_tick_count(::int32_t value) {
  _internal_set_render_tick_count(value);
  _impl_._has_bits_[0] |= 0x00000200u;
  // @@protoc_insertion_point(field_set:CSGOInputHistoryEntryPB.render_tick_count)
}
inline ::int32_t CSGOInputHistoryEntryPB::_internal_render_tick_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.render_tick_count_;
}
inline void CSGOInputHistoryEntryPB::_internal_set_render_tick_count(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.render_tick_count_ = value;
}

// optional float render_tick_fraction = 5;
inline bool CSGOInputHistoryEntryPB::has_render_tick_fraction() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void CSGOInputHistoryEntryPB::clear_render_tick_fraction() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.render_tick_fraction_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline float CSGOInputHistoryEntryPB::render_tick_fraction() const {
  // @@protoc_insertion_point(field_get:CSGOInputHistoryEntryPB.render_tick_fraction)
  return _internal_render_tick_fraction();
}
inline void CSGOInputHistoryEntryPB::set_render_tick_fraction(float value) {
  _internal_set_render_tick_fraction(value);
  _impl_._has_bits_[0] |= 0x00000400u;
  // @@protoc_insertion_point(field_set:CSGOInputHistoryEntryPB.render_tick_fraction)
}
inline float CSGOInputHistoryEntryPB::_internal_render_tick_fraction() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.render_tick_fraction_;
}
inline void CSGOInputHistoryEntryPB::_internal_set_render_tick_fraction(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.render_tick_fraction_ = value;
}

// optional int32 player_tick_count = 6;
inline bool CSGOInputHistoryEntryPB::has_player_tick_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void CSGOInputHistoryEntryPB::clear_player_tick_count() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.player_tick_count_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::int32_t CSGOInputHistoryEntryPB::player_tick_count() const {
  // @@protoc_insertion_point(field_get:CSGOInputHistoryEntryPB.player_tick_count)
  return _internal_player_tick_count();
}
inline void CSGOInputHistoryEntryPB::set_player_tick_count(::int32_t value) {
  _internal_set_player_tick_count(value);
  _impl_._has_bits_[0] |= 0x00000800u;
  // @@protoc_insertion_point(field_set:CSGOInputHistoryEntryPB.player_tick_count)
}
inline ::int32_t CSGOInputHistoryEntryPB::_internal_player_tick_count() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.player_tick_count_;
}
inline void CSGOInputHistoryEntryPB::_internal_set_player_tick_count(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.player_tick_count_ = value;
}

// optional float player_tick_fraction = 7;
inline bool CSGOInputHistoryEntryPB::has_player_tick_fraction() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void CSGOInputHistoryEntryPB::clear_player_tick_fraction() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.player_tick_fraction_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline float CSGOInputHistoryEntryPB::player_tick_fraction() const {
  // @@protoc_insertion_point(field_get:CSGOInputHistoryEntryPB.player_tick_fraction)
  return _internal_player_tick_fraction();
}
inline void CSGOInputHistoryEntryPB::set_player_tick_fraction(float value) {
  _internal_set_player_tick_fraction(value);
  _impl_._has_bits_[0] |= 0x00001000u;
  // @@protoc_insertion_point(field_set:CSGOInputHistoryEntryPB.player_tick_fraction)
}
inline float CSGOInputHistoryEntryPB::_internal_player_tick_fraction() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.player_tick_fraction_;
}
inline void CSGOInputHistoryEntryPB::_internal_set_player_tick_fraction(float value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.player_tick_fraction_ = value;
}

// optional .CSGOInterpolationInfoPB_CL cl_interp = 12;
inline bool CSGOInputHistoryEntryPB::has_cl_interp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cl_interp_ != nullptr);
  return value;
}
inline void CSGOInputHistoryEntryPB::clear_cl_interp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.cl_interp_ != nullptr) _impl_.cl_interp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::CSGOInterpolationInfoPB_CL& CSGOInputHistoryEntryPB::_internal_cl_interp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::CSGOInterpolationInfoPB_CL* p = _impl_.cl_interp_;
  return p != nullptr ? *p : reinterpret_cast<const ::CSGOInterpolationInfoPB_CL&>(::_CSGOInterpolationInfoPB_CL_default_instance_);
}
inline const ::CSGOInterpolationInfoPB_CL& CSGOInputHistoryEntryPB::cl_interp() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CSGOInputHistoryEntryPB.cl_interp)
  return _internal_cl_interp();
}
inline void CSGOInputHistoryEntryPB::unsafe_arena_set_allocated_cl_interp(
    ::CSGOInterpolationInfoPB_CL* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.cl_interp_);
  }
  _impl_.cl_interp_ = reinterpret_cast<::CSGOInterpolationInfoPB_CL*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSGOInputHistoryEntryPB.cl_interp)
}
inline ::CSGOInterpolationInfoPB_CL* PROTOBUF_NULLABLE CSGOInputHistoryEntryPB::release_cl_interp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CSGOInterpolationInfoPB_CL* released = _impl_.cl_interp_;
  _impl_.cl_interp_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::CSGOInterpolationInfoPB_CL* PROTOBUF_NULLABLE CSGOInputHistoryEntryPB::unsafe_arena_release_cl_interp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:CSGOInputHistoryEntryPB.cl_interp)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::CSGOInterpolationInfoPB_CL* temp = _impl_.cl_interp_;
  _impl_.cl_interp_ = nullptr;
  return temp;
}
inline ::CSGOInterpolationInfoPB_CL* PROTOBUF_NONNULL CSGOInputHistoryEntryPB::_internal_mutable_cl_interp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.cl_interp_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::CSGOInterpolationInfoPB_CL>(GetArena());
    _impl_.cl_interp_ = reinterpret_cast<::CSGOInterpolationInfoPB_CL*>(p);
  }
  return _impl_.cl_interp_;
}
inline ::CSGOInterpolationInfoPB_CL* PROTOBUF_NONNULL CSGOInputHistoryEntryPB::mutable_cl_interp()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::CSGOInterpolationInfoPB_CL* _msg = _internal_mutable_cl_interp();
  // @@protoc_insertion_point(field_mutable:CSGOInputHistoryEntryPB.cl_interp)
  return _msg;
}
inline void CSGOInputHistoryEntryPB::set_allocated_cl_interp(::CSGOInterpolationInfoPB_CL* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.cl_interp_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.cl_interp_ = reinterpret_cast<::CSGOInterpolationInfoPB_CL*>(value);
  // @@protoc_insertion_point(field_set_allocated:CSGOInputHistoryEntryPB.cl_interp)
}

// optional .CSGOInterpolationInfoPB sv_interp0 = 13;
inline bool CSGOInputHistoryEntryPB::has_sv_interp0() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sv_interp0_ != nullptr);
  return value;
}
inline void CSGOInputHistoryEntryPB::clear_sv_interp0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.sv_interp0_ != nullptr) _impl_.sv_interp0_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::CSGOInterpolationInfoPB& CSGOInputHistoryEntryPB::_internal_sv_interp0() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::CSGOInterpolationInfoPB* p = _impl_.sv_interp0_;
  return p != nullptr ? *p : reinterpret_cast<const ::CSGOInterpolationInfoPB&>(::_CSGOInterpolationInfoPB_default_instance_);
}
inline const ::CSGOInterpolationInfoPB& CSGOInputHistoryEntryPB::sv_interp0() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CSGOInputHistoryEntryPB.sv_interp0)
  return _internal_sv_interp0();
}
inline void CSGOInputHistoryEntryPB::unsafe_arena_set_allocated_sv_interp0(
    ::CSGOInterpolationInfoPB* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.sv_interp0_);
  }
  _impl_.sv_interp0_ = reinterpret_cast<::CSGOInterpolationInfoPB*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSGOInputHistoryEntryPB.sv_interp0)
}
inline ::CSGOInterpolationInfoPB* PROTOBUF_NULLABLE CSGOInputHistoryEntryPB::release_sv_interp0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::CSGOInterpolationInfoPB* released = _impl_.sv_interp0_;
  _impl_.sv_interp0_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::CSGOInterpolationInfoPB* PROTOBUF_NULLABLE CSGOInputHistoryEntryPB::unsafe_arena_release_sv_interp0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:CSGOInputHistoryEntryPB.sv_interp0)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::CSGOInterpolationInfoPB* temp = _impl_.sv_interp0_;
  _impl_.sv_interp0_ = nullptr;
  return temp;
}
inline ::CSGOInterpolationInfoPB* PROTOBUF_NONNULL CSGOInputHistoryEntryPB::_internal_mutable_sv_interp0() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.sv_interp0_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::CSGOInterpolationInfoPB>(GetArena());
    _impl_.sv_interp0_ = reinterpret_cast<::CSGOInterpolationInfoPB*>(p);
  }
  return _impl_.sv_interp0_;
}
inline ::CSGOInterpolationInfoPB* PROTOBUF_NONNULL CSGOInputHistoryEntryPB::mutable_sv_interp0()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::CSGOInterpolationInfoPB* _msg = _internal_mutable_sv_interp0();
  // @@protoc_insertion_point(field_mutable:CSGOInputHistoryEntryPB.sv_interp0)
  return _msg;
}
inline void CSGOInputHistoryEntryPB::set_allocated_sv_interp0(::CSGOInterpolationInfoPB* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.sv_interp0_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.sv_interp0_ = reinterpret_cast<::CSGOInterpolationInfoPB*>(value);
  // @@protoc_insertion_point(field_set_allocated:CSGOInputHistoryEntryPB.sv_interp0)
}

// optional .CSGOInterpolationInfoPB sv_interp1 = 14;
inline bool CSGOInputHistoryEntryPB::has_sv_interp1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sv_interp1_ != nullptr);
  return value;
}
inline void CSGOInputHistoryEntryPB::clear_sv_interp1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.sv_interp1_ != nullptr) _impl_.sv_interp1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::CSGOInterpolationInfoPB& CSGOInputHistoryEntryPB::_internal_sv_interp1() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::CSGOInterpolationInfoPB* p = _impl_.sv_interp1_;
  return p != nullptr ? *p : reinterpret_cast<const ::CSGOInterpolationInfoPB&>(::_CSGOInterpolationInfoPB_default_instance_);
}
inline const ::CSGOInterpolationInfoPB& CSGOInputHistoryEntryPB::sv_interp1() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CSGOInputHistoryEntryPB.sv_interp1)
  return _internal_sv_interp1();
}
inline void CSGOInputHistoryEntryPB::unsafe_arena_set_allocated_sv_interp1(
    ::CSGOInterpolationInfoPB* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.sv_interp1_);
  }
  _impl_.sv_interp1_ = reinterpret_cast<::CSGOInterpolationInfoPB*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSGOInputHistoryEntryPB.sv_interp1)
}
inline ::CSGOInterpolationInfoPB* PROTOBUF_NULLABLE CSGOInputHistoryEntryPB::release_sv_interp1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::CSGOInterpolationInfoPB* released = _impl_.sv_interp1_;
  _impl_.sv_interp1_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::CSGOInterpolationInfoPB* PROTOBUF_NULLABLE CSGOInputHistoryEntryPB::unsafe_arena_release_sv_interp1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:CSGOInputHistoryEntryPB.sv_interp1)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::CSGOInterpolationInfoPB* temp = _impl_.sv_interp1_;
  _impl_.sv_interp1_ = nullptr;
  return temp;
}
inline ::CSGOInterpolationInfoPB* PROTOBUF_NONNULL CSGOInputHistoryEntryPB::_internal_mutable_sv_interp1() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.sv_interp1_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::CSGOInterpolationInfoPB>(GetArena());
    _impl_.sv_interp1_ = reinterpret_cast<::CSGOInterpolationInfoPB*>(p);
  }
  return _impl_.sv_interp1_;
}
inline ::CSGOInterpolationInfoPB* PROTOBUF_NONNULL CSGOInputHistoryEntryPB::mutable_sv_interp1()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::CSGOInterpolationInfoPB* _msg = _internal_mutable_sv_interp1();
  // @@protoc_insertion_point(field_mutable:CSGOInputHistoryEntryPB.sv_interp1)
  return _msg;
}
inline void CSGOInputHistoryEntryPB::set_allocated_sv_interp1(::CSGOInterpolationInfoPB* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.sv_interp1_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.sv_interp1_ = reinterpret_cast<::CSGOInterpolationInfoPB*>(value);
  // @@protoc_insertion_point(field_set_allocated:CSGOInputHistoryEntryPB.sv_interp1)
}

// optional .CSGOInterpolationInfoPB player_interp = 15;
inline bool CSGOInputHistoryEntryPB::has_player_interp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.player_interp_ != nullptr);
  return value;
}
inline void CSGOInputHistoryEntryPB::clear_player_interp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.player_interp_ != nullptr) _impl_.player_interp_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::CSGOInterpolationInfoPB& CSGOInputHistoryEntryPB::_internal_player_interp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::CSGOInterpolationInfoPB* p = _impl_.player_interp_;
  return p != nullptr ? *p : reinterpret_cast<const ::CSGOInterpolationInfoPB&>(::_CSGOInterpolationInfoPB_default_instance_);
}
inline const ::CSGOInterpolationInfoPB& CSGOInputHistoryEntryPB::player_interp() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CSGOInputHistoryEntryPB.player_interp)
  return _internal_player_interp();
}
inline void CSGOInputHistoryEntryPB::unsafe_arena_set_allocated_player_interp(
    ::CSGOInterpolationInfoPB* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.player_interp_);
  }
  _impl_.player_interp_ = reinterpret_cast<::CSGOInterpolationInfoPB*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSGOInputHistoryEntryPB.player_interp)
}
inline ::CSGOInterpolationInfoPB* PROTOBUF_NULLABLE CSGOInputHistoryEntryPB::release_player_interp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::CSGOInterpolationInfoPB* released = _impl_.player_interp_;
  _impl_.player_interp_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::CSGOInterpolationInfoPB* PROTOBUF_NULLABLE CSGOInputHistoryEntryPB::unsafe_arena_release_player_interp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:CSGOInputHistoryEntryPB.player_interp)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::CSGOInterpolationInfoPB* temp = _impl_.player_interp_;
  _impl_.player_interp_ = nullptr;
  return temp;
}
inline ::CSGOInterpolationInfoPB* PROTOBUF_NONNULL CSGOInputHistoryEntryPB::_internal_mutable_player_interp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.player_interp_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::CSGOInterpolationInfoPB>(GetArena());
    _impl_.player_interp_ = reinterpret_cast<::CSGOInterpolationInfoPB*>(p);
  }
  return _impl_.player_interp_;
}
inline ::CSGOInterpolationInfoPB* PROTOBUF_NONNULL CSGOInputHistoryEntryPB::mutable_player_interp()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000010u;
  ::CSGOInterpolationInfoPB* _msg = _internal_mutable_player_interp();
  // @@protoc_insertion_point(field_mutable:CSGOInputHistoryEntryPB.player_interp)
  return _msg;
}
inline void CSGOInputHistoryEntryPB::set_allocated_player_interp(::CSGOInterpolationInfoPB* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.player_interp_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = value->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.player_interp_ = reinterpret_cast<::CSGOInterpolationInfoPB*>(value);
  // @@protoc_insertion_point(field_set_allocated:CSGOInputHistoryEntryPB.player_interp)
}

// optional int32 frame_number = 64;
inline bool CSGOInputHistoryEntryPB::has_frame_number() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void CSGOInputHistoryEntryPB::clear_frame_number() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.frame_number_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline ::int32_t CSGOInputHistoryEntryPB::frame_number() const {
  // @@protoc_insertion_point(field_get:CSGOInputHistoryEntryPB.frame_number)
  return _internal_frame_number();
}
inline void CSGOInputHistoryEntryPB::set_frame_number(::int32_t value) {
  _internal_set_frame_number(value);
  _impl_._has_bits_[0] |= 0x00002000u;
  // @@protoc_insertion_point(field_set:CSGOInputHistoryEntryPB.frame_number)
}
inline ::int32_t CSGOInputHistoryEntryPB::_internal_frame_number() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.frame_number_;
}
inline void CSGOInputHistoryEntryPB::_internal_set_frame_number(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.frame_number_ = value;
}

// optional int32 target_ent_index = 65 [default = -1];
inline bool CSGOInputHistoryEntryPB::has_target_ent_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void CSGOInputHistoryEntryPB::clear_target_ent_index() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_ent_index_ = -1;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline ::int32_t CSGOInputHistoryEntryPB::target_ent_index() const {
  // @@protoc_insertion_point(field_get:CSGOInputHistoryEntryPB.target_ent_index)
  return _internal_target_ent_index();
}
inline void CSGOInputHistoryEntryPB::set_target_ent_index(::int32_t value) {
  _internal_set_target_ent_index(value);
  _impl_._has_bits_[0] |= 0x00004000u;
  // @@protoc_insertion_point(field_set:CSGOInputHistoryEntryPB.target_ent_index)
}
inline ::int32_t CSGOInputHistoryEntryPB::_internal_target_ent_index() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.target_ent_index_;
}
inline void CSGOInputHistoryEntryPB::_internal_set_target_ent_index(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.target_ent_index_ = value;
}

// optional .CMsgVector shoot_position = 66;
inline bool CSGOInputHistoryEntryPB::has_shoot_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.shoot_position_ != nullptr);
  return value;
}
inline const ::CMsgVector& CSGOInputHistoryEntryPB::_internal_shoot_position() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::CMsgVector* p = _impl_.shoot_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgVector&>(::_CMsgVector_default_instance_);
}
inline const ::CMsgVector& CSGOInputHistoryEntryPB::shoot_position() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CSGOInputHistoryEntryPB.shoot_position)
  return _internal_shoot_position();
}
inline void CSGOInputHistoryEntryPB::unsafe_arena_set_allocated_shoot_position(
    ::CMsgVector* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.shoot_position_);
  }
  _impl_.shoot_position_ = reinterpret_cast<::CMsgVector*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSGOInputHistoryEntryPB.shoot_position)
}
inline ::CMsgVector* PROTOBUF_NULLABLE CSGOInputHistoryEntryPB::release_shoot_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::CMsgVector* released = _impl_.shoot_position_;
  _impl_.shoot_position_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::CMsgVector* PROTOBUF_NULLABLE CSGOInputHistoryEntryPB::unsafe_arena_release_shoot_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:CSGOInputHistoryEntryPB.shoot_position)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::CMsgVector* temp = _impl_.shoot_position_;
  _impl_.shoot_position_ = nullptr;
  return temp;
}
inline ::CMsgVector* PROTOBUF_NONNULL CSGOInputHistoryEntryPB::_internal_mutable_shoot_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.shoot_position_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::CMsgVector>(GetArena());
    _impl_.shoot_position_ = reinterpret_cast<::CMsgVector*>(p);
  }
  return _impl_.shoot_position_;
}
inline ::CMsgVector* PROTOBUF_NONNULL CSGOInputHistoryEntryPB::mutable_shoot_position()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000020u;
  ::CMsgVector* _msg = _internal_mutable_shoot_position();
  // @@protoc_insertion_point(field_mutable:CSGOInputHistoryEntryPB.shoot_position)
  return _msg;
}
inline void CSGOInputHistoryEntryPB::set_allocated_shoot_position(::CMsgVector* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.shoot_position_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.shoot_position_ = reinterpret_cast<::CMsgVector*>(value);
  // @@protoc_insertion_point(field_set_allocated:CSGOInputHistoryEntryPB.shoot_position)
}

// optional .CMsgVector target_head_pos_check = 67;
inline bool CSGOInputHistoryEntryPB::has_target_head_pos_check() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.target_head_pos_check_ != nullptr);
  return value;
}
inline const ::CMsgVector& CSGOInputHistoryEntryPB::_internal_target_head_pos_check() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::CMsgVector* p = _impl_.target_head_pos_check_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgVector&>(::_CMsgVector_default_instance_);
}
inline const ::CMsgVector& CSGOInputHistoryEntryPB::target_head_pos_check() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CSGOInputHistoryEntryPB.target_head_pos_check)
  return _internal_target_head_pos_check();
}
inline void CSGOInputHistoryEntryPB::unsafe_arena_set_allocated_target_head_pos_check(
    ::CMsgVector* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.target_head_pos_check_);
  }
  _impl_.target_head_pos_check_ = reinterpret_cast<::CMsgVector*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSGOInputHistoryEntryPB.target_head_pos_check)
}
inline ::CMsgVector* PROTOBUF_NULLABLE CSGOInputHistoryEntryPB::release_target_head_pos_check() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::CMsgVector* released = _impl_.target_head_pos_check_;
  _impl_.target_head_pos_check_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::CMsgVector* PROTOBUF_NULLABLE CSGOInputHistoryEntryPB::unsafe_arena_release_target_head_pos_check() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:CSGOInputHistoryEntryPB.target_head_pos_check)

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::CMsgVector* temp = _impl_.target_head_pos_check_;
  _impl_.target_head_pos_check_ = nullptr;
  return temp;
}
inline ::CMsgVector* PROTOBUF_NONNULL CSGOInputHistoryEntryPB::_internal_mutable_target_head_pos_check() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.target_head_pos_check_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::CMsgVector>(GetArena());
    _impl_.target_head_pos_check_ = reinterpret_cast<::CMsgVector*>(p);
  }
  return _impl_.target_head_pos_check_;
}
inline ::CMsgVector* PROTOBUF_NONNULL CSGOInputHistoryEntryPB::mutable_target_head_pos_check()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000040u;
  ::CMsgVector* _msg = _internal_mutable_target_head_pos_check();
  // @@protoc_insertion_point(field_mutable:CSGOInputHistoryEntryPB.target_head_pos_check)
  return _msg;
}
inline void CSGOInputHistoryEntryPB::set_allocated_target_head_pos_check(::CMsgVector* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.target_head_pos_check_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }

  _impl_.target_head_pos_check_ = reinterpret_cast<::CMsgVector*>(value);
  // @@protoc_insertion_point(field_set_allocated:CSGOInputHistoryEntryPB.target_head_pos_check)
}

// optional .CMsgVector target_abs_pos_check = 68;
inline bool CSGOInputHistoryEntryPB::has_target_abs_pos_check() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.target_abs_pos_check_ != nullptr);
  return value;
}
inline const ::CMsgVector& CSGOInputHistoryEntryPB::_internal_target_abs_pos_check() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::CMsgVector* p = _impl_.target_abs_pos_check_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgVector&>(::_CMsgVector_default_instance_);
}
inline const ::CMsgVector& CSGOInputHistoryEntryPB::target_abs_pos_check() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CSGOInputHistoryEntryPB.target_abs_pos_check)
  return _internal_target_abs_pos_check();
}
inline void CSGOInputHistoryEntryPB::unsafe_arena_set_allocated_target_abs_pos_check(
    ::CMsgVector* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.target_abs_pos_check_);
  }
  _impl_.target_abs_pos_check_ = reinterpret_cast<::CMsgVector*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSGOInputHistoryEntryPB.target_abs_pos_check)
}
inline ::CMsgVector* PROTOBUF_NULLABLE CSGOInputHistoryEntryPB::release_target_abs_pos_check() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::CMsgVector* released = _impl_.target_abs_pos_check_;
  _impl_.target_abs_pos_check_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::CMsgVector* PROTOBUF_NULLABLE CSGOInputHistoryEntryPB::unsafe_arena_release_target_abs_pos_check() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:CSGOInputHistoryEntryPB.target_abs_pos_check)

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::CMsgVector* temp = _impl_.target_abs_pos_check_;
  _impl_.target_abs_pos_check_ = nullptr;
  return temp;
}
inline ::CMsgVector* PROTOBUF_NONNULL CSGOInputHistoryEntryPB::_internal_mutable_target_abs_pos_check() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.target_abs_pos_check_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::CMsgVector>(GetArena());
    _impl_.target_abs_pos_check_ = reinterpret_cast<::CMsgVector*>(p);
  }
  return _impl_.target_abs_pos_check_;
}
inline ::CMsgVector* PROTOBUF_NONNULL CSGOInputHistoryEntryPB::mutable_target_abs_pos_check()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000080u;
  ::CMsgVector* _msg = _internal_mutable_target_abs_pos_check();
  // @@protoc_insertion_point(field_mutable:CSGOInputHistoryEntryPB.target_abs_pos_check)
  return _msg;
}
inline void CSGOInputHistoryEntryPB::set_allocated_target_abs_pos_check(::CMsgVector* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.target_abs_pos_check_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }

  _impl_.target_abs_pos_check_ = reinterpret_cast<::CMsgVector*>(value);
  // @@protoc_insertion_point(field_set_allocated:CSGOInputHistoryEntryPB.target_abs_pos_check)
}

// optional .CMsgQAngle target_abs_ang_check = 69;
inline bool CSGOInputHistoryEntryPB::has_target_abs_ang_check() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.target_abs_ang_check_ != nullptr);
  return value;
}
inline const ::CMsgQAngle& CSGOInputHistoryEntryPB::_internal_target_abs_ang_check() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::CMsgQAngle* p = _impl_.target_abs_ang_check_;
  return p != nullptr ? *p : reinterpret_cast<const ::CMsgQAngle&>(::_CMsgQAngle_default_instance_);
}
inline const ::CMsgQAngle& CSGOInputHistoryEntryPB::target_abs_ang_check() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CSGOInputHistoryEntryPB.target_abs_ang_check)
  return _internal_target_abs_ang_check();
}
inline void CSGOInputHistoryEntryPB::unsafe_arena_set_allocated_target_abs_ang_check(
    ::CMsgQAngle* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.target_abs_ang_check_);
  }
  _impl_.target_abs_ang_check_ = reinterpret_cast<::CMsgQAngle*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSGOInputHistoryEntryPB.target_abs_ang_check)
}
inline ::CMsgQAngle* PROTOBUF_NULLABLE CSGOInputHistoryEntryPB::release_target_abs_ang_check() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::CMsgQAngle* released = _impl_.target_abs_ang_check_;
  _impl_.target_abs_ang_check_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::CMsgQAngle* PROTOBUF_NULLABLE CSGOInputHistoryEntryPB::unsafe_arena_release_target_abs_ang_check() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:CSGOInputHistoryEntryPB.target_abs_ang_check)

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::CMsgQAngle* temp = _impl_.target_abs_ang_check_;
  _impl_.target_abs_ang_check_ = nullptr;
  return temp;
}
inline ::CMsgQAngle* PROTOBUF_NONNULL CSGOInputHistoryEntryPB::_internal_mutable_target_abs_ang_check() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.target_abs_ang_check_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::CMsgQAngle>(GetArena());
    _impl_.target_abs_ang_check_ = reinterpret_cast<::CMsgQAngle*>(p);
  }
  return _impl_.target_abs_ang_check_;
}
inline ::CMsgQAngle* PROTOBUF_NONNULL CSGOInputHistoryEntryPB::mutable_target_abs_ang_check()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000100u;
  ::CMsgQAngle* _msg = _internal_mutable_target_abs_ang_check();
  // @@protoc_insertion_point(field_mutable:CSGOInputHistoryEntryPB.target_abs_ang_check)
  return _msg;
}
inline void CSGOInputHistoryEntryPB::set_allocated_target_abs_ang_check(::CMsgQAngle* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.target_abs_ang_check_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }

  _impl_.target_abs_ang_check_ = reinterpret_cast<::CMsgQAngle*>(value);
  // @@protoc_insertion_point(field_set_allocated:CSGOInputHistoryEntryPB.target_abs_ang_check)
}

// -------------------------------------------------------------------

// CSGOUserCmdPB

// optional .CBaseUserCmdPB base = 1;
inline bool CSGOUserCmdPB::has_base() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.base_ != nullptr);
  return value;
}
inline const ::CBaseUserCmdPB& CSGOUserCmdPB::_internal_base() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::CBaseUserCmdPB* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::CBaseUserCmdPB&>(::_CBaseUserCmdPB_default_instance_);
}
inline const ::CBaseUserCmdPB& CSGOUserCmdPB::base() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CSGOUserCmdPB.base)
  return _internal_base();
}
inline void CSGOUserCmdPB::unsafe_arena_set_allocated_base(
    ::CBaseUserCmdPB* PROTOBUF_NULLABLE value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = reinterpret_cast<::CBaseUserCmdPB*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:CSGOUserCmdPB.base)
}
inline ::CBaseUserCmdPB* PROTOBUF_NULLABLE CSGOUserCmdPB::release_base() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CBaseUserCmdPB* released = _impl_.base_;
  _impl_.base_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::CBaseUserCmdPB* PROTOBUF_NULLABLE CSGOUserCmdPB::unsafe_arena_release_base() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:CSGOUserCmdPB.base)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::CBaseUserCmdPB* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::CBaseUserCmdPB* PROTOBUF_NONNULL CSGOUserCmdPB::_internal_mutable_base() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.base_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::CBaseUserCmdPB>(GetArena());
    _impl_.base_ = reinterpret_cast<::CBaseUserCmdPB*>(p);
  }
  return _impl_.base_;
}
inline ::CBaseUserCmdPB* PROTOBUF_NONNULL CSGOUserCmdPB::mutable_base()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::CBaseUserCmdPB* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:CSGOUserCmdPB.base)
  return _msg;
}
inline void CSGOUserCmdPB::set_allocated_base(::CBaseUserCmdPB* PROTOBUF_NULLABLE value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.base_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::Message*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.base_ = reinterpret_cast<::CBaseUserCmdPB*>(value);
  // @@protoc_insertion_point(field_set_allocated:CSGOUserCmdPB.base)
}

// repeated .CSGOInputHistoryEntryPB input_history = 2;
inline int CSGOUserCmdPB::_internal_input_history_size() const {
  return _internal_input_history().size();
}
inline int CSGOUserCmdPB::input_history_size() const {
  return _internal_input_history_size();
}
inline void CSGOUserCmdPB::clear_input_history() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.input_history_.Clear();
}
inline ::CSGOInputHistoryEntryPB* PROTOBUF_NONNULL CSGOUserCmdPB::mutable_input_history(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:CSGOUserCmdPB.input_history)
  return _internal_mutable_input_history()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::CSGOInputHistoryEntryPB>* PROTOBUF_NONNULL CSGOUserCmdPB::mutable_input_history()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:CSGOUserCmdPB.input_history)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_input_history();
}
inline const ::CSGOInputHistoryEntryPB& CSGOUserCmdPB::input_history(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:CSGOUserCmdPB.input_history)
  return _internal_input_history().Get(index);
}
inline ::CSGOInputHistoryEntryPB* PROTOBUF_NONNULL CSGOUserCmdPB::add_input_history()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::CSGOInputHistoryEntryPB* _add = _internal_mutable_input_history()->Add();
  // @@protoc_insertion_point(field_add:CSGOUserCmdPB.input_history)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::CSGOInputHistoryEntryPB>& CSGOUserCmdPB::input_history() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:CSGOUserCmdPB.input_history)
  return _internal_input_history();
}
inline const ::google::protobuf::RepeatedPtrField<::CSGOInputHistoryEntryPB>&
CSGOUserCmdPB::_internal_input_history() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.input_history_;
}
inline ::google::protobuf::RepeatedPtrField<::CSGOInputHistoryEntryPB>* PROTOBUF_NONNULL
CSGOUserCmdPB::_internal_mutable_input_history() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.input_history_;
}

// optional int32 attack1_start_history_index = 6 [default = -1];
inline bool CSGOUserCmdPB::has_attack1_start_history_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void CSGOUserCmdPB::clear_attack1_start_history_index() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.attack1_start_history_index_ = -1;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t CSGOUserCmdPB::attack1_start_history_index() const {
  // @@protoc_insertion_point(field_get:CSGOUserCmdPB.attack1_start_history_index)
  return _internal_attack1_start_history_index();
}
inline void CSGOUserCmdPB::set_attack1_start_history_index(::int32_t value) {
  _internal_set_attack1_start_history_index(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:CSGOUserCmdPB.attack1_start_history_index)
}
inline ::int32_t CSGOUserCmdPB::_internal_attack1_start_history_index() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.attack1_start_history_index_;
}
inline void CSGOUserCmdPB::_internal_set_attack1_start_history_index(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.attack1_start_history_index_ = value;
}

// optional int32 attack2_start_history_index = 7 [default = -1];
inline bool CSGOUserCmdPB::has_attack2_start_history_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void CSGOUserCmdPB::clear_attack2_start_history_index() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.attack2_start_history_index_ = -1;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t CSGOUserCmdPB::attack2_start_history_index() const {
  // @@protoc_insertion_point(field_get:CSGOUserCmdPB.attack2_start_history_index)
  return _internal_attack2_start_history_index();
}
inline void CSGOUserCmdPB::set_attack2_start_history_index(::int32_t value) {
  _internal_set_attack2_start_history_index(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:CSGOUserCmdPB.attack2_start_history_index)
}
inline ::int32_t CSGOUserCmdPB::_internal_attack2_start_history_index() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.attack2_start_history_index_;
}
inline void CSGOUserCmdPB::_internal_set_attack2_start_history_index(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.attack2_start_history_index_ = value;
}

// optional int32 attack3_start_history_index = 8 [default = -1];
inline bool CSGOUserCmdPB::has_attack3_start_history_index() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void CSGOUserCmdPB::clear_attack3_start_history_index() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.attack3_start_history_index_ = -1;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t CSGOUserCmdPB::attack3_start_history_index() const {
  // @@protoc_insertion_point(field_get:CSGOUserCmdPB.attack3_start_history_index)
  return _internal_attack3_start_history_index();
}
inline void CSGOUserCmdPB::set_attack3_start_history_index(::int32_t value) {
  _internal_set_attack3_start_history_index(value);
  _impl_._has_bits_[0] |= 0x00000008u;
  // @@protoc_insertion_point(field_set:CSGOUserCmdPB.attack3_start_history_index)
}
inline ::int32_t CSGOUserCmdPB::_internal_attack3_start_history_index() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.attack3_start_history_index_;
}
inline void CSGOUserCmdPB::_internal_set_attack3_start_history_index(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.attack3_start_history_index_ = value;
}

// optional bool left_hand_desired = 9 [default = false];
inline bool CSGOUserCmdPB::has_left_hand_desired() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void CSGOUserCmdPB::clear_left_hand_desired() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.left_hand_desired_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool CSGOUserCmdPB::left_hand_desired() const {
  // @@protoc_insertion_point(field_get:CSGOUserCmdPB.left_hand_desired)
  return _internal_left_hand_desired();
}
inline void CSGOUserCmdPB::set_left_hand_desired(bool value) {
  _internal_set_left_hand_desired(value);
  _impl_._has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_set:CSGOUserCmdPB.left_hand_desired)
}
inline bool CSGOUserCmdPB::_internal_left_hand_desired() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.left_hand_desired_;
}
inline void CSGOUserCmdPB::_internal_set_left_hand_desired(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.left_hand_desired_ = value;
}

// optional bool is_predicting_damage = 10 [default = false];
inline bool CSGOUserCmdPB::has_is_predicting_damage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void CSGOUserCmdPB::clear_is_predicting_damage() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_predicting_damage_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool CSGOUserCmdPB::is_predicting_damage() const {
  // @@protoc_insertion_point(field_get:CSGOUserCmdPB.is_predicting_damage)
  return _internal_is_predicting_damage();
}
inline void CSGOUserCmdPB::set_is_predicting_damage(bool value) {
  _internal_set_is_predicting_damage(value);
  _impl_._has_bits_[0] |= 0x00000004u;
  // @@protoc_insertion_point(field_set:CSGOUserCmdPB.is_predicting_damage)
}
inline bool CSGOUserCmdPB::_internal_is_predicting_damage() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_predicting_damage_;
}
inline void CSGOUserCmdPB::_internal_set_is_predicting_damage(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_predicting_damage_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // cs_5fusercmd_2eproto_2epb_2eh

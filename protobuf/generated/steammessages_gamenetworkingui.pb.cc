// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: steammessages_gamenetworkingui.proto
// Protobuf C++ Version: 6.30.0-rc1

#include "steammessages_gamenetworkingui.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
template <typename>
PROTOBUF_CONSTEXPR CGameNetworkingUI_GlobalState::CGameNetworkingUI_GlobalState(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(CGameNetworkingUI_GlobalState_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct CGameNetworkingUI_GlobalStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGameNetworkingUI_GlobalStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGameNetworkingUI_GlobalStateDefaultTypeInternal() {}
  union {
    CGameNetworkingUI_GlobalState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGameNetworkingUI_GlobalStateDefaultTypeInternal _CGameNetworkingUI_GlobalState_default_instance_;

inline constexpr CGameNetworkingUI_ConnectionSummary::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        sdrpop_local_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        sdrpop_remote_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        transport_kind_{0u},
        ping_ms_{0u},
        packet_loss_{0},
        ping_default_internet_route_{0u},
        ip_was_shared_{false},
        connection_state_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR CGameNetworkingUI_ConnectionSummary::CGameNetworkingUI_ConnectionSummary(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CGameNetworkingUI_ConnectionSummary_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CGameNetworkingUI_ConnectionSummaryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGameNetworkingUI_ConnectionSummaryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGameNetworkingUI_ConnectionSummaryDefaultTypeInternal() {}
  union {
    CGameNetworkingUI_ConnectionSummary _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGameNetworkingUI_ConnectionSummaryDefaultTypeInternal _CGameNetworkingUI_ConnectionSummary_default_instance_;

inline constexpr CGameNetworkingUI_AppSummary::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        main_cxn_{nullptr},
        appid_{0u},
        ip_was_shared_with_friend_{false},
        ip_was_shared_with_nonfriend_{false},
        active_connections_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR CGameNetworkingUI_AppSummary::CGameNetworkingUI_AppSummary(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CGameNetworkingUI_AppSummary_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CGameNetworkingUI_AppSummaryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGameNetworkingUI_AppSummaryDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGameNetworkingUI_AppSummaryDefaultTypeInternal() {}
  union {
    CGameNetworkingUI_AppSummary _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGameNetworkingUI_AppSummaryDefaultTypeInternal _CGameNetworkingUI_AppSummary_default_instance_;

inline constexpr CGameNetworkingUI_ConnectionState::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        connection_key_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        identity_local_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        identity_remote_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        close_message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        status_loc_token_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        sdrpopid_local_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        sdrpopid_remote_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        address_remote_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        p2p_routing_{nullptr},
        e2e_quality_local_{nullptr},
        e2e_quality_remote_{nullptr},
        front_quality_local_{nullptr},
        front_quality_remote_{nullptr},
        appid_{0u},
        connection_id_local_{0u},
        connection_state_{0u},
        start_time_{0u},
        close_time_{0u},
        close_reason_{0u},
        transport_kind_{0u},
        ping_interior_{0u},
        ping_remote_front_{0u},
        ping_default_internet_route_{0u},
        e2e_quality_remote_instantaneous_time_{::uint64_t{0u}},
        e2e_quality_remote_lifetime_time_{::uint64_t{0u}},
        front_quality_remote_instantaneous_time_{::uint64_t{0u}},
        front_quality_remote_lifetime_time_{::uint64_t{0u}} {}

template <typename>
PROTOBUF_CONSTEXPR CGameNetworkingUI_ConnectionState::CGameNetworkingUI_ConnectionState(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CGameNetworkingUI_ConnectionState_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CGameNetworkingUI_ConnectionStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGameNetworkingUI_ConnectionStateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGameNetworkingUI_ConnectionStateDefaultTypeInternal() {}
  union {
    CGameNetworkingUI_ConnectionState _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGameNetworkingUI_ConnectionStateDefaultTypeInternal _CGameNetworkingUI_ConnectionState_default_instance_;

inline constexpr CGameNetworkingUI_Message::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : connection_state_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR CGameNetworkingUI_Message::CGameNetworkingUI_Message(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(CGameNetworkingUI_Message_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CGameNetworkingUI_MessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CGameNetworkingUI_MessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CGameNetworkingUI_MessageDefaultTypeInternal() {}
  union {
    CGameNetworkingUI_Message _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CGameNetworkingUI_MessageDefaultTypeInternal _CGameNetworkingUI_Message_default_instance_;
static constexpr const ::_pb::EnumDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_enum_descriptors_steammessages_5fgamenetworkingui_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor *PROTOBUF_NONNULL *PROTOBUF_NULLABLE
    file_level_service_descriptors_steammessages_5fgamenetworkingui_2eproto = nullptr;
const ::uint32_t
    TableStruct_steammessages_5fgamenetworkingui_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_GlobalState, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, _impl_.connection_key_),
        PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, _impl_.appid_),
        PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, _impl_.connection_id_local_),
        PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, _impl_.identity_local_),
        PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, _impl_.identity_remote_),
        PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, _impl_.connection_state_),
        PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, _impl_.start_time_),
        PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, _impl_.close_time_),
        PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, _impl_.close_reason_),
        PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, _impl_.close_message_),
        PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, _impl_.status_loc_token_),
        PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, _impl_.transport_kind_),
        PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, _impl_.sdrpopid_local_),
        PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, _impl_.sdrpopid_remote_),
        PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, _impl_.address_remote_),
        PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, _impl_.p2p_routing_),
        PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, _impl_.ping_interior_),
        PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, _impl_.ping_remote_front_),
        PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, _impl_.ping_default_internet_route_),
        PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, _impl_.e2e_quality_local_),
        PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, _impl_.e2e_quality_remote_),
        PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, _impl_.e2e_quality_remote_instantaneous_time_),
        PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, _impl_.e2e_quality_remote_lifetime_time_),
        PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, _impl_.front_quality_local_),
        PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, _impl_.front_quality_remote_),
        PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, _impl_.front_quality_remote_instantaneous_time_),
        PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionState, _impl_.front_quality_remote_lifetime_time_),
        0,
        13,
        14,
        1,
        2,
        15,
        16,
        17,
        18,
        3,
        4,
        19,
        5,
        6,
        7,
        8,
        20,
        21,
        22,
        9,
        10,
        23,
        24,
        11,
        12,
        25,
        26,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_Message, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_Message, _impl_.connection_state_),
        PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionSummary, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionSummary, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionSummary, _impl_.transport_kind_),
        PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionSummary, _impl_.connection_state_),
        PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionSummary, _impl_.sdrpop_local_),
        PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionSummary, _impl_.sdrpop_remote_),
        PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionSummary, _impl_.ping_ms_),
        PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionSummary, _impl_.packet_loss_),
        PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionSummary, _impl_.ping_default_internet_route_),
        PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_ConnectionSummary, _impl_.ip_was_shared_),
        2,
        7,
        0,
        1,
        3,
        4,
        5,
        6,
        PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_AppSummary, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_AppSummary, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_AppSummary, _impl_.appid_),
        PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_AppSummary, _impl_.ip_was_shared_with_friend_),
        PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_AppSummary, _impl_.ip_was_shared_with_nonfriend_),
        PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_AppSummary, _impl_.active_connections_),
        PROTOBUF_FIELD_OFFSET(::CGameNetworkingUI_AppSummary, _impl_.main_cxn_),
        1,
        2,
        3,
        4,
        0,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::CGameNetworkingUI_GlobalState)},
        {8, 43, -1, sizeof(::CGameNetworkingUI_ConnectionState)},
        {70, -1, -1, sizeof(::CGameNetworkingUI_Message)},
        {79, 95, -1, sizeof(::CGameNetworkingUI_ConnectionSummary)},
        {103, 116, -1, sizeof(::CGameNetworkingUI_AppSummary)},
};
static const ::_pb::Message* PROTOBUF_NONNULL const file_default_instances[] = {
    &::_CGameNetworkingUI_GlobalState_default_instance_._instance,
    &::_CGameNetworkingUI_ConnectionState_default_instance_._instance,
    &::_CGameNetworkingUI_Message_default_instance_._instance,
    &::_CGameNetworkingUI_ConnectionSummary_default_instance_._instance,
    &::_CGameNetworkingUI_AppSummary_default_instance_._instance,
};
const char descriptor_table_protodef_steammessages_5fgamenetworkingui_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n$steammessages_gamenetworkingui.proto\032%"
    "steamnetworkingsockets_messages.proto\032 s"
    "teamdatagram_messages_sdr.proto\"\037\n\035CGame"
    "NetworkingUI_GlobalState\"\317\007\n!CGameNetwor"
    "kingUI_ConnectionState\022\026\n\016connection_key"
    "\030\001 \001(\t\022\r\n\005appid\030\002 \001(\r\022\033\n\023connection_id_l"
    "ocal\030\003 \001(\007\022\026\n\016identity_local\030\004 \001(\t\022\027\n\017id"
    "entity_remote\030\005 \001(\t\022\030\n\020connection_state\030"
    "\n \001(\r\022\022\n\nstart_time\030\014 \001(\r\022\022\n\nclose_time\030"
    "\r \001(\r\022\024\n\014close_reason\030\016 \001(\r\022\025\n\rclose_mes"
    "sage\030\017 \001(\t\022\030\n\020status_loc_token\030\020 \001(\t\022\026\n\016"
    "transport_kind\030\024 \001(\r\022\026\n\016sdrpopid_local\030\025"
    " \001(\t\022\027\n\017sdrpopid_remote\030\026 \001(\t\022\026\n\016address"
    "_remote\030\027 \001(\t\0228\n\013p2p_routing\030\030 \001(\0132#.CMs"
    "gSteamDatagramP2PRoutingSummary\022\025\n\rping_"
    "interior\030\031 \001(\r\022\031\n\021ping_remote_front\030\032 \001("
    "\r\022#\n\033ping_default_internet_route\030\033 \001(\r\022>"
    "\n\021e2e_quality_local\030\036 \001(\0132#.CMsgSteamDat"
    "agramConnectionQuality\022\?\n\022e2e_quality_re"
    "mote\030\037 \001(\0132#.CMsgSteamDatagramConnection"
    "Quality\022-\n%e2e_quality_remote_instantane"
    "ous_time\030  \001(\004\022(\n e2e_quality_remote_lif"
    "etime_time\030! \001(\004\022@\n\023front_quality_local\030"
    "( \001(\0132#.CMsgSteamDatagramConnectionQuali"
    "ty\022A\n\024front_quality_remote\030) \001(\0132#.CMsgS"
    "teamDatagramConnectionQuality\022/\n\'front_q"
    "uality_remote_instantaneous_time\030* \001(\004\022*"
    "\n\"front_quality_remote_lifetime_time\030+ \001"
    "(\004\"Y\n\031CGameNetworkingUI_Message\022<\n\020conne"
    "ction_state\030\001 \003(\0132\".CGameNetworkingUI_Co"
    "nnectionState\"\346\001\n#CGameNetworkingUI_Conn"
    "ectionSummary\022\026\n\016transport_kind\030\001 \001(\r\022\030\n"
    "\020connection_state\030\010 \001(\r\022\024\n\014sdrpop_local\030"
    "\002 \001(\t\022\025\n\rsdrpop_remote\030\003 \001(\t\022\017\n\007ping_ms\030"
    "\004 \001(\r\022\023\n\013packet_loss\030\005 \001(\002\022#\n\033ping_defau"
    "lt_internet_route\030\006 \001(\r\022\025\n\rip_was_shared"
    "\030\007 \001(\010\"\312\001\n\034CGameNetworkingUI_AppSummary\022"
    "\r\n\005appid\030\001 \001(\r\022!\n\031ip_was_shared_with_fri"
    "end\030\n \001(\010\022$\n\034ip_was_shared_with_nonfrien"
    "d\030\013 \001(\010\022\032\n\022active_connections\030\024 \001(\r\0226\n\010m"
    "ain_cxn\030\036 \001(\0132$.CGameNetworkingUI_Connec"
    "tionSummaryB\005H\001\200\001\001"
};
static const ::_pbi::DescriptorTable* PROTOBUF_NONNULL const
    descriptor_table_steammessages_5fgamenetworkingui_2eproto_deps[2] = {
        &::descriptor_table_steamdatagram_5fmessages_5fsdr_2eproto,
        &::descriptor_table_steamnetworkingsockets_5fmessages_2eproto,
};
static ::absl::once_flag descriptor_table_steammessages_5fgamenetworkingui_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_steammessages_5fgamenetworkingui_2eproto = {
    false,
    false,
    1658,
    descriptor_table_protodef_steammessages_5fgamenetworkingui_2eproto,
    "steammessages_gamenetworkingui.proto",
    &descriptor_table_steammessages_5fgamenetworkingui_2eproto_once,
    descriptor_table_steammessages_5fgamenetworkingui_2eproto_deps,
    2,
    5,
    schemas,
    file_default_instances,
    TableStruct_steammessages_5fgamenetworkingui_2eproto::offsets,
    file_level_enum_descriptors_steammessages_5fgamenetworkingui_2eproto,
    file_level_service_descriptors_steammessages_5fgamenetworkingui_2eproto,
};
// ===================================================================

class CGameNetworkingUI_GlobalState::_Internal {
 public:
};

CGameNetworkingUI_GlobalState::CGameNetworkingUI_GlobalState(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, CGameNetworkingUI_GlobalState_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:CGameNetworkingUI_GlobalState)
}
CGameNetworkingUI_GlobalState::CGameNetworkingUI_GlobalState(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const CGameNetworkingUI_GlobalState& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, CGameNetworkingUI_GlobalState_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CGameNetworkingUI_GlobalState* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:CGameNetworkingUI_GlobalState)
}

inline void* PROTOBUF_NONNULL CGameNetworkingUI_GlobalState::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CGameNetworkingUI_GlobalState(arena);
}
constexpr auto CGameNetworkingUI_GlobalState::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(CGameNetworkingUI_GlobalState),
                                            alignof(CGameNetworkingUI_GlobalState));
}
constexpr auto CGameNetworkingUI_GlobalState::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CGameNetworkingUI_GlobalState_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CGameNetworkingUI_GlobalState::MergeImpl,
          ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<CGameNetworkingUI_GlobalState>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CGameNetworkingUI_GlobalState::SharedDtor,
          ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<CGameNetworkingUI_GlobalState>(), &CGameNetworkingUI_GlobalState::ByteSizeLong,
              &CGameNetworkingUI_GlobalState::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_GlobalState, _impl_._cached_size_),
          false,
      },
      &CGameNetworkingUI_GlobalState::kDescriptorMethods,
      &descriptor_table_steammessages_5fgamenetworkingui_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        CGameNetworkingUI_GlobalState_class_data_ =
            CGameNetworkingUI_GlobalState::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL CGameNetworkingUI_GlobalState::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CGameNetworkingUI_GlobalState_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CGameNetworkingUI_GlobalState_class_data_.tc_table);
  return CGameNetworkingUI_GlobalState_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2>
CGameNetworkingUI_GlobalState::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    CGameNetworkingUI_GlobalState_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CGameNetworkingUI_GlobalState>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, // no field_entries, or aux_entries
  {{
  }},
};







::google::protobuf::Metadata CGameNetworkingUI_GlobalState::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CGameNetworkingUI_ConnectionState::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CGameNetworkingUI_ConnectionState>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_._has_bits_);
};

void CGameNetworkingUI_ConnectionState::clear_p2p_routing() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.p2p_routing_ != nullptr) _impl_.p2p_routing_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void CGameNetworkingUI_ConnectionState::clear_e2e_quality_local() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.e2e_quality_local_ != nullptr) _impl_.e2e_quality_local_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void CGameNetworkingUI_ConnectionState::clear_e2e_quality_remote() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.e2e_quality_remote_ != nullptr) _impl_.e2e_quality_remote_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
void CGameNetworkingUI_ConnectionState::clear_front_quality_local() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.front_quality_local_ != nullptr) _impl_.front_quality_local_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
void CGameNetworkingUI_ConnectionState::clear_front_quality_remote() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.front_quality_remote_ != nullptr) _impl_.front_quality_remote_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
CGameNetworkingUI_ConnectionState::CGameNetworkingUI_ConnectionState(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CGameNetworkingUI_ConnectionState_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameNetworkingUI_ConnectionState)
}
PROTOBUF_NDEBUG_INLINE CGameNetworkingUI_ConnectionState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::CGameNetworkingUI_ConnectionState& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        connection_key_(arena, from.connection_key_),
        identity_local_(arena, from.identity_local_),
        identity_remote_(arena, from.identity_remote_),
        close_message_(arena, from.close_message_),
        status_loc_token_(arena, from.status_loc_token_),
        sdrpopid_local_(arena, from.sdrpopid_local_),
        sdrpopid_remote_(arena, from.sdrpopid_remote_),
        address_remote_(arena, from.address_remote_) {}

CGameNetworkingUI_ConnectionState::CGameNetworkingUI_ConnectionState(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const CGameNetworkingUI_ConnectionState& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CGameNetworkingUI_ConnectionState_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CGameNetworkingUI_ConnectionState* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.p2p_routing_ = ((cached_has_bits & 0x00000100u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.p2p_routing_)
                : nullptr;
  _impl_.e2e_quality_local_ = ((cached_has_bits & 0x00000200u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.e2e_quality_local_)
                : nullptr;
  _impl_.e2e_quality_remote_ = ((cached_has_bits & 0x00000400u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.e2e_quality_remote_)
                : nullptr;
  _impl_.front_quality_local_ = ((cached_has_bits & 0x00000800u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.front_quality_local_)
                : nullptr;
  _impl_.front_quality_remote_ = ((cached_has_bits & 0x00001000u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.front_quality_remote_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, appid_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, appid_),
           offsetof(Impl_, front_quality_remote_lifetime_time_) -
               offsetof(Impl_, appid_) +
               sizeof(Impl_::front_quality_remote_lifetime_time_));

  // @@protoc_insertion_point(copy_constructor:CGameNetworkingUI_ConnectionState)
}
PROTOBUF_NDEBUG_INLINE CGameNetworkingUI_ConnectionState::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        connection_key_(arena),
        identity_local_(arena),
        identity_remote_(arena),
        close_message_(arena),
        status_loc_token_(arena),
        sdrpopid_local_(arena),
        sdrpopid_remote_(arena),
        address_remote_(arena) {}

inline void CGameNetworkingUI_ConnectionState::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, p2p_routing_),
           0,
           offsetof(Impl_, front_quality_remote_lifetime_time_) -
               offsetof(Impl_, p2p_routing_) +
               sizeof(Impl_::front_quality_remote_lifetime_time_));
}
CGameNetworkingUI_ConnectionState::~CGameNetworkingUI_ConnectionState() {
  // @@protoc_insertion_point(destructor:CGameNetworkingUI_ConnectionState)
  SharedDtor(*this);
}
inline void CGameNetworkingUI_ConnectionState::SharedDtor(MessageLite& self) {
  CGameNetworkingUI_ConnectionState& this_ = static_cast<CGameNetworkingUI_ConnectionState&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.connection_key_.Destroy();
  this_._impl_.identity_local_.Destroy();
  this_._impl_.identity_remote_.Destroy();
  this_._impl_.close_message_.Destroy();
  this_._impl_.status_loc_token_.Destroy();
  this_._impl_.sdrpopid_local_.Destroy();
  this_._impl_.sdrpopid_remote_.Destroy();
  this_._impl_.address_remote_.Destroy();
  delete this_._impl_.p2p_routing_;
  delete this_._impl_.e2e_quality_local_;
  delete this_._impl_.e2e_quality_remote_;
  delete this_._impl_.front_quality_local_;
  delete this_._impl_.front_quality_remote_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CGameNetworkingUI_ConnectionState::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CGameNetworkingUI_ConnectionState(arena);
}
constexpr auto CGameNetworkingUI_ConnectionState::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(CGameNetworkingUI_ConnectionState),
                                            alignof(CGameNetworkingUI_ConnectionState));
}
constexpr auto CGameNetworkingUI_ConnectionState::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CGameNetworkingUI_ConnectionState_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CGameNetworkingUI_ConnectionState::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CGameNetworkingUI_ConnectionState>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CGameNetworkingUI_ConnectionState::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CGameNetworkingUI_ConnectionState>(), &CGameNetworkingUI_ConnectionState::ByteSizeLong,
              &CGameNetworkingUI_ConnectionState::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_._cached_size_),
          false,
      },
      &CGameNetworkingUI_ConnectionState::kDescriptorMethods,
      &descriptor_table_steammessages_5fgamenetworkingui_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        CGameNetworkingUI_ConnectionState_class_data_ =
            CGameNetworkingUI_ConnectionState::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL CGameNetworkingUI_ConnectionState::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CGameNetworkingUI_ConnectionState_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CGameNetworkingUI_ConnectionState_class_data_.tc_table);
  return CGameNetworkingUI_ConnectionState_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 27, 5, 181, 7>
CGameNetworkingUI_ConnectionState::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_._has_bits_),
    0, // no _extensions_
    43, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    403113440,  // skipmap
    offsetof(decltype(_table_), field_entries),
    27,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    CGameNetworkingUI_ConnectionState_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CGameNetworkingUI_ConnectionState>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional string connection_key = 1;
    {::_pbi::TcParser::FastSS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.connection_key_)}},
    // optional uint32 appid = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CGameNetworkingUI_ConnectionState, _impl_.appid_), 13>(),
     {16, 13, 0, PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.appid_)}},
    // optional fixed32 connection_id_local = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 14, 0, PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.connection_id_local_)}},
    // optional string identity_local = 4;
    {::_pbi::TcParser::FastSS1,
     {34, 1, 0, PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.identity_local_)}},
    // optional string identity_remote = 5;
    {::_pbi::TcParser::FastSS1,
     {42, 2, 0, PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.identity_remote_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional uint32 connection_state = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CGameNetworkingUI_ConnectionState, _impl_.connection_state_), 15>(),
     {80, 15, 0, PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.connection_state_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional uint32 start_time = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CGameNetworkingUI_ConnectionState, _impl_.start_time_), 16>(),
     {96, 16, 0, PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.start_time_)}},
    // optional uint32 close_time = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CGameNetworkingUI_ConnectionState, _impl_.close_time_), 17>(),
     {104, 17, 0, PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.close_time_)}},
    // optional uint32 close_reason = 14;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CGameNetworkingUI_ConnectionState, _impl_.close_reason_), 18>(),
     {112, 18, 0, PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.close_reason_)}},
    // optional string close_message = 15;
    {::_pbi::TcParser::FastSS1,
     {122, 3, 0, PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.close_message_)}},
    // optional string status_loc_token = 16;
    {::_pbi::TcParser::FastSS2,
     {386, 4, 0, PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.status_loc_token_)}},
    // optional uint64 e2e_quality_remote_lifetime_time = 33;
    {::_pbi::TcParser::FastV64S2,
     {648, 24, 0, PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.e2e_quality_remote_lifetime_time_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional uint32 transport_kind = 20;
    {::_pbi::TcParser::FastV32S2,
     {416, 19, 0, PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.transport_kind_)}},
    // optional string sdrpopid_local = 21;
    {::_pbi::TcParser::FastSS2,
     {426, 5, 0, PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.sdrpopid_local_)}},
    // optional string sdrpopid_remote = 22;
    {::_pbi::TcParser::FastSS2,
     {434, 6, 0, PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.sdrpopid_remote_)}},
    // optional string address_remote = 23;
    {::_pbi::TcParser::FastSS2,
     {442, 7, 0, PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.address_remote_)}},
    // optional .CMsgSteamDatagramP2PRoutingSummary p2p_routing = 24;
    {::_pbi::TcParser::FastMtS2,
     {450, 8, 0, PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.p2p_routing_)}},
    // optional uint32 ping_interior = 25;
    {::_pbi::TcParser::FastV32S2,
     {456, 20, 0, PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.ping_interior_)}},
    // optional uint32 ping_remote_front = 26;
    {::_pbi::TcParser::FastV32S2,
     {464, 21, 0, PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.ping_remote_front_)}},
    // optional uint32 ping_default_internet_route = 27;
    {::_pbi::TcParser::FastV32S2,
     {472, 22, 0, PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.ping_default_internet_route_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional .CMsgSteamDatagramConnectionQuality e2e_quality_local = 30;
    {::_pbi::TcParser::FastMtS2,
     {498, 9, 1, PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.e2e_quality_local_)}},
    // optional .CMsgSteamDatagramConnectionQuality e2e_quality_remote = 31;
    {::_pbi::TcParser::FastMtS2,
     {506, 10, 2, PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.e2e_quality_remote_)}},
  }}, {{
    33, 0, 1,
    63614, 22,
    65535, 65535
  }}, {{
    // optional string connection_key = 1;
    {PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.connection_key_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional uint32 appid = 2;
    {PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.appid_), _Internal::kHasBitsOffset + 13, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional fixed32 connection_id_local = 3;
    {PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.connection_id_local_), _Internal::kHasBitsOffset + 14, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFixed32)},
    // optional string identity_local = 4;
    {PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.identity_local_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional string identity_remote = 5;
    {PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.identity_remote_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional uint32 connection_state = 10;
    {PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.connection_state_), _Internal::kHasBitsOffset + 15, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 start_time = 12;
    {PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.start_time_), _Internal::kHasBitsOffset + 16, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 close_time = 13;
    {PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.close_time_), _Internal::kHasBitsOffset + 17, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 close_reason = 14;
    {PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.close_reason_), _Internal::kHasBitsOffset + 18, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional string close_message = 15;
    {PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.close_message_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional string status_loc_token = 16;
    {PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.status_loc_token_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional uint32 transport_kind = 20;
    {PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.transport_kind_), _Internal::kHasBitsOffset + 19, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional string sdrpopid_local = 21;
    {PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.sdrpopid_local_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional string sdrpopid_remote = 22;
    {PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.sdrpopid_remote_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional string address_remote = 23;
    {PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.address_remote_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional .CMsgSteamDatagramP2PRoutingSummary p2p_routing = 24;
    {PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.p2p_routing_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional uint32 ping_interior = 25;
    {PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.ping_interior_), _Internal::kHasBitsOffset + 20, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 ping_remote_front = 26;
    {PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.ping_remote_front_), _Internal::kHasBitsOffset + 21, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 ping_default_internet_route = 27;
    {PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.ping_default_internet_route_), _Internal::kHasBitsOffset + 22, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional .CMsgSteamDatagramConnectionQuality e2e_quality_local = 30;
    {PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.e2e_quality_local_), _Internal::kHasBitsOffset + 9, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .CMsgSteamDatagramConnectionQuality e2e_quality_remote = 31;
    {PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.e2e_quality_remote_), _Internal::kHasBitsOffset + 10, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional uint64 e2e_quality_remote_instantaneous_time = 32;
    {PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.e2e_quality_remote_instantaneous_time_), _Internal::kHasBitsOffset + 23, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // optional uint64 e2e_quality_remote_lifetime_time = 33;
    {PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.e2e_quality_remote_lifetime_time_), _Internal::kHasBitsOffset + 24, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // optional .CMsgSteamDatagramConnectionQuality front_quality_local = 40;
    {PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.front_quality_local_), _Internal::kHasBitsOffset + 11, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .CMsgSteamDatagramConnectionQuality front_quality_remote = 41;
    {PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.front_quality_remote_), _Internal::kHasBitsOffset + 12, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional uint64 front_quality_remote_instantaneous_time = 42;
    {PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.front_quality_remote_instantaneous_time_), _Internal::kHasBitsOffset + 25, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
    // optional uint64 front_quality_remote_lifetime_time = 43;
    {PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.front_quality_remote_lifetime_time_), _Internal::kHasBitsOffset + 26, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt64)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::CMsgSteamDatagramP2PRoutingSummary>()},
      {::_pbi::TcParser::GetTable<::CMsgSteamDatagramConnectionQuality>()},
      {::_pbi::TcParser::GetTable<::CMsgSteamDatagramConnectionQuality>()},
      {::_pbi::TcParser::GetTable<::CMsgSteamDatagramConnectionQuality>()},
      {::_pbi::TcParser::GetTable<::CMsgSteamDatagramConnectionQuality>()},
  }},
  {{
    "\41\16\0\0\16\17\0\0\0\0\15\20\0\16\17\16\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "CGameNetworkingUI_ConnectionState"
    "connection_key"
    "identity_local"
    "identity_remote"
    "close_message"
    "status_loc_token"
    "sdrpopid_local"
    "sdrpopid_remote"
    "address_remote"
  }},
};
PROTOBUF_NOINLINE void CGameNetworkingUI_ConnectionState::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameNetworkingUI_ConnectionState)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.connection_key_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.identity_local_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _impl_.identity_remote_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _impl_.close_message_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _impl_.status_loc_token_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      _impl_.sdrpopid_local_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      _impl_.sdrpopid_remote_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      _impl_.address_remote_.ClearNonDefaultToEmpty();
    }
  }
  if ((cached_has_bits & 0x00001f00u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      ABSL_DCHECK(_impl_.p2p_routing_ != nullptr);
      _impl_.p2p_routing_->Clear();
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      ABSL_DCHECK(_impl_.e2e_quality_local_ != nullptr);
      _impl_.e2e_quality_local_->Clear();
    }
    if ((cached_has_bits & 0x00000400u) != 0) {
      ABSL_DCHECK(_impl_.e2e_quality_remote_ != nullptr);
      _impl_.e2e_quality_remote_->Clear();
    }
    if ((cached_has_bits & 0x00000800u) != 0) {
      ABSL_DCHECK(_impl_.front_quality_local_ != nullptr);
      _impl_.front_quality_local_->Clear();
    }
    if ((cached_has_bits & 0x00001000u) != 0) {
      ABSL_DCHECK(_impl_.front_quality_remote_ != nullptr);
      _impl_.front_quality_remote_->Clear();
    }
  }
  if ((cached_has_bits & 0x0000e000u) != 0) {
    ::memset(&_impl_.appid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.connection_state_) -
        reinterpret_cast<char*>(&_impl_.appid_)) + sizeof(_impl_.connection_state_));
  }
  if ((cached_has_bits & 0x00ff0000u) != 0) {
    ::memset(&_impl_.start_time_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.e2e_quality_remote_instantaneous_time_) -
        reinterpret_cast<char*>(&_impl_.start_time_)) + sizeof(_impl_.e2e_quality_remote_instantaneous_time_));
  }
  if ((cached_has_bits & 0x07000000u) != 0) {
    ::memset(&_impl_.e2e_quality_remote_lifetime_time_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.front_quality_remote_lifetime_time_) -
        reinterpret_cast<char*>(&_impl_.e2e_quality_remote_lifetime_time_)) + sizeof(_impl_.front_quality_remote_lifetime_time_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CGameNetworkingUI_ConnectionState::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CGameNetworkingUI_ConnectionState& this_ = static_cast<const CGameNetworkingUI_ConnectionState&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CGameNetworkingUI_ConnectionState::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CGameNetworkingUI_ConnectionState& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:CGameNetworkingUI_ConnectionState)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional string connection_key = 1;
  if ((cached_has_bits & 0x00000001u) != 0) {
    const std::string& _s = this_._internal_connection_key();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CGameNetworkingUI_ConnectionState.connection_key");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional uint32 appid = 2;
  if ((cached_has_bits & 0x00002000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this_._internal_appid(), target);
  }

  // optional fixed32 connection_id_local = 3;
  if ((cached_has_bits & 0x00004000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(
        3, this_._internal_connection_id_local(), target);
  }

  // optional string identity_local = 4;
  if ((cached_has_bits & 0x00000002u) != 0) {
    const std::string& _s = this_._internal_identity_local();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CGameNetworkingUI_ConnectionState.identity_local");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // optional string identity_remote = 5;
  if ((cached_has_bits & 0x00000004u) != 0) {
    const std::string& _s = this_._internal_identity_remote();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CGameNetworkingUI_ConnectionState.identity_remote");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // optional uint32 connection_state = 10;
  if ((cached_has_bits & 0x00008000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        10, this_._internal_connection_state(), target);
  }

  // optional uint32 start_time = 12;
  if ((cached_has_bits & 0x00010000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        12, this_._internal_start_time(), target);
  }

  // optional uint32 close_time = 13;
  if ((cached_has_bits & 0x00020000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        13, this_._internal_close_time(), target);
  }

  // optional uint32 close_reason = 14;
  if ((cached_has_bits & 0x00040000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        14, this_._internal_close_reason(), target);
  }

  // optional string close_message = 15;
  if ((cached_has_bits & 0x00000008u) != 0) {
    const std::string& _s = this_._internal_close_message();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CGameNetworkingUI_ConnectionState.close_message");
    target = stream->WriteStringMaybeAliased(15, _s, target);
  }

  // optional string status_loc_token = 16;
  if ((cached_has_bits & 0x00000010u) != 0) {
    const std::string& _s = this_._internal_status_loc_token();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CGameNetworkingUI_ConnectionState.status_loc_token");
    target = stream->WriteStringMaybeAliased(16, _s, target);
  }

  // optional uint32 transport_kind = 20;
  if ((cached_has_bits & 0x00080000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        20, this_._internal_transport_kind(), target);
  }

  // optional string sdrpopid_local = 21;
  if ((cached_has_bits & 0x00000020u) != 0) {
    const std::string& _s = this_._internal_sdrpopid_local();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CGameNetworkingUI_ConnectionState.sdrpopid_local");
    target = stream->WriteStringMaybeAliased(21, _s, target);
  }

  // optional string sdrpopid_remote = 22;
  if ((cached_has_bits & 0x00000040u) != 0) {
    const std::string& _s = this_._internal_sdrpopid_remote();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CGameNetworkingUI_ConnectionState.sdrpopid_remote");
    target = stream->WriteStringMaybeAliased(22, _s, target);
  }

  // optional string address_remote = 23;
  if ((cached_has_bits & 0x00000080u) != 0) {
    const std::string& _s = this_._internal_address_remote();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CGameNetworkingUI_ConnectionState.address_remote");
    target = stream->WriteStringMaybeAliased(23, _s, target);
  }

  // optional .CMsgSteamDatagramP2PRoutingSummary p2p_routing = 24;
  if ((cached_has_bits & 0x00000100u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        24, *this_._impl_.p2p_routing_, this_._impl_.p2p_routing_->GetCachedSize(), target,
        stream);
  }

  // optional uint32 ping_interior = 25;
  if ((cached_has_bits & 0x00100000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        25, this_._internal_ping_interior(), target);
  }

  // optional uint32 ping_remote_front = 26;
  if ((cached_has_bits & 0x00200000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        26, this_._internal_ping_remote_front(), target);
  }

  // optional uint32 ping_default_internet_route = 27;
  if ((cached_has_bits & 0x00400000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        27, this_._internal_ping_default_internet_route(), target);
  }

  // optional .CMsgSteamDatagramConnectionQuality e2e_quality_local = 30;
  if ((cached_has_bits & 0x00000200u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        30, *this_._impl_.e2e_quality_local_, this_._impl_.e2e_quality_local_->GetCachedSize(), target,
        stream);
  }

  // optional .CMsgSteamDatagramConnectionQuality e2e_quality_remote = 31;
  if ((cached_has_bits & 0x00000400u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        31, *this_._impl_.e2e_quality_remote_, this_._impl_.e2e_quality_remote_->GetCachedSize(), target,
        stream);
  }

  // optional uint64 e2e_quality_remote_instantaneous_time = 32;
  if ((cached_has_bits & 0x00800000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        32, this_._internal_e2e_quality_remote_instantaneous_time(), target);
  }

  // optional uint64 e2e_quality_remote_lifetime_time = 33;
  if ((cached_has_bits & 0x01000000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        33, this_._internal_e2e_quality_remote_lifetime_time(), target);
  }

  // optional .CMsgSteamDatagramConnectionQuality front_quality_local = 40;
  if ((cached_has_bits & 0x00000800u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        40, *this_._impl_.front_quality_local_, this_._impl_.front_quality_local_->GetCachedSize(), target,
        stream);
  }

  // optional .CMsgSteamDatagramConnectionQuality front_quality_remote = 41;
  if ((cached_has_bits & 0x00001000u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        41, *this_._impl_.front_quality_remote_, this_._impl_.front_quality_remote_->GetCachedSize(), target,
        stream);
  }

  // optional uint64 front_quality_remote_instantaneous_time = 42;
  if ((cached_has_bits & 0x02000000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        42, this_._internal_front_quality_remote_instantaneous_time(), target);
  }

  // optional uint64 front_quality_remote_lifetime_time = 43;
  if ((cached_has_bits & 0x04000000u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
        43, this_._internal_front_quality_remote_lifetime_time(), target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameNetworkingUI_ConnectionState)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CGameNetworkingUI_ConnectionState::ByteSizeLong(const MessageLite& base) {
  const CGameNetworkingUI_ConnectionState& this_ = static_cast<const CGameNetworkingUI_ConnectionState&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t CGameNetworkingUI_ConnectionState::ByteSizeLong() const {
  const CGameNetworkingUI_ConnectionState& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:CGameNetworkingUI_ConnectionState)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += static_cast<bool>(0x00004000u & cached_has_bits) * 5;
  if ((cached_has_bits & 0x000000ffu) != 0) {
    // optional string connection_key = 1;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_connection_key());
    }
    // optional string identity_local = 4;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_identity_local());
    }
    // optional string identity_remote = 5;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_identity_remote());
    }
    // optional string close_message = 15;
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_close_message());
    }
    // optional string status_loc_token = 16;
    if ((cached_has_bits & 0x00000010u) != 0) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_status_loc_token());
    }
    // optional string sdrpopid_local = 21;
    if ((cached_has_bits & 0x00000020u) != 0) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_sdrpopid_local());
    }
    // optional string sdrpopid_remote = 22;
    if ((cached_has_bits & 0x00000040u) != 0) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_sdrpopid_remote());
    }
    // optional string address_remote = 23;
    if ((cached_has_bits & 0x00000080u) != 0) {
      total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_address_remote());
    }
  }
  if ((cached_has_bits & 0x0000bf00u) != 0) {
    // optional .CMsgSteamDatagramP2PRoutingSummary p2p_routing = 24;
    if ((cached_has_bits & 0x00000100u) != 0) {
      total_size += 2 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.p2p_routing_);
    }
    // optional .CMsgSteamDatagramConnectionQuality e2e_quality_local = 30;
    if ((cached_has_bits & 0x00000200u) != 0) {
      total_size += 2 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.e2e_quality_local_);
    }
    // optional .CMsgSteamDatagramConnectionQuality e2e_quality_remote = 31;
    if ((cached_has_bits & 0x00000400u) != 0) {
      total_size += 2 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.e2e_quality_remote_);
    }
    // optional .CMsgSteamDatagramConnectionQuality front_quality_local = 40;
    if ((cached_has_bits & 0x00000800u) != 0) {
      total_size += 2 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.front_quality_local_);
    }
    // optional .CMsgSteamDatagramConnectionQuality front_quality_remote = 41;
    if ((cached_has_bits & 0x00001000u) != 0) {
      total_size += 2 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.front_quality_remote_);
    }
    // optional uint32 appid = 2;
    if ((cached_has_bits & 0x00002000u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_appid());
    }
    // optional uint32 connection_state = 10;
    if ((cached_has_bits & 0x00008000u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_connection_state());
    }
  }
  if ((cached_has_bits & 0x00ff0000u) != 0) {
    // optional uint32 start_time = 12;
    if ((cached_has_bits & 0x00010000u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_start_time());
    }
    // optional uint32 close_time = 13;
    if ((cached_has_bits & 0x00020000u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_close_time());
    }
    // optional uint32 close_reason = 14;
    if ((cached_has_bits & 0x00040000u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_close_reason());
    }
    // optional uint32 transport_kind = 20;
    if ((cached_has_bits & 0x00080000u) != 0) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this_._internal_transport_kind());
    }
    // optional uint32 ping_interior = 25;
    if ((cached_has_bits & 0x00100000u) != 0) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this_._internal_ping_interior());
    }
    // optional uint32 ping_remote_front = 26;
    if ((cached_has_bits & 0x00200000u) != 0) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this_._internal_ping_remote_front());
    }
    // optional uint32 ping_default_internet_route = 27;
    if ((cached_has_bits & 0x00400000u) != 0) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this_._internal_ping_default_internet_route());
    }
    // optional uint64 e2e_quality_remote_instantaneous_time = 32;
    if ((cached_has_bits & 0x00800000u) != 0) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt64Size(
                                      this_._internal_e2e_quality_remote_instantaneous_time());
    }
  }
  if ((cached_has_bits & 0x07000000u) != 0) {
    // optional uint64 e2e_quality_remote_lifetime_time = 33;
    if ((cached_has_bits & 0x01000000u) != 0) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt64Size(
                                      this_._internal_e2e_quality_remote_lifetime_time());
    }
    // optional uint64 front_quality_remote_instantaneous_time = 42;
    if ((cached_has_bits & 0x02000000u) != 0) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt64Size(
                                      this_._internal_front_quality_remote_instantaneous_time());
    }
    // optional uint64 front_quality_remote_lifetime_time = 43;
    if ((cached_has_bits & 0x04000000u) != 0) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt64Size(
                                      this_._internal_front_quality_remote_lifetime_time());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void CGameNetworkingUI_ConnectionState::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CGameNetworkingUI_ConnectionState*>(&to_msg);
  auto& from = static_cast<const CGameNetworkingUI_ConnectionState&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:CGameNetworkingUI_ConnectionState)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_internal_set_connection_key(from._internal_connection_key());
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_internal_set_identity_local(from._internal_identity_local());
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_internal_set_identity_remote(from._internal_identity_remote());
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _this->_internal_set_close_message(from._internal_close_message());
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _this->_internal_set_status_loc_token(from._internal_status_loc_token());
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      _this->_internal_set_sdrpopid_local(from._internal_sdrpopid_local());
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      _this->_internal_set_sdrpopid_remote(from._internal_sdrpopid_remote());
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      _this->_internal_set_address_remote(from._internal_address_remote());
    }
  }
  if ((cached_has_bits & 0x0000ff00u) != 0) {
    if ((cached_has_bits & 0x00000100u) != 0) {
      ABSL_DCHECK(from._impl_.p2p_routing_ != nullptr);
      if (_this->_impl_.p2p_routing_ == nullptr) {
        _this->_impl_.p2p_routing_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.p2p_routing_);
      } else {
        _this->_impl_.p2p_routing_->MergeFrom(*from._impl_.p2p_routing_);
      }
    }
    if ((cached_has_bits & 0x00000200u) != 0) {
      ABSL_DCHECK(from._impl_.e2e_quality_local_ != nullptr);
      if (_this->_impl_.e2e_quality_local_ == nullptr) {
        _this->_impl_.e2e_quality_local_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.e2e_quality_local_);
      } else {
        _this->_impl_.e2e_quality_local_->MergeFrom(*from._impl_.e2e_quality_local_);
      }
    }
    if ((cached_has_bits & 0x00000400u) != 0) {
      ABSL_DCHECK(from._impl_.e2e_quality_remote_ != nullptr);
      if (_this->_impl_.e2e_quality_remote_ == nullptr) {
        _this->_impl_.e2e_quality_remote_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.e2e_quality_remote_);
      } else {
        _this->_impl_.e2e_quality_remote_->MergeFrom(*from._impl_.e2e_quality_remote_);
      }
    }
    if ((cached_has_bits & 0x00000800u) != 0) {
      ABSL_DCHECK(from._impl_.front_quality_local_ != nullptr);
      if (_this->_impl_.front_quality_local_ == nullptr) {
        _this->_impl_.front_quality_local_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.front_quality_local_);
      } else {
        _this->_impl_.front_quality_local_->MergeFrom(*from._impl_.front_quality_local_);
      }
    }
    if ((cached_has_bits & 0x00001000u) != 0) {
      ABSL_DCHECK(from._impl_.front_quality_remote_ != nullptr);
      if (_this->_impl_.front_quality_remote_ == nullptr) {
        _this->_impl_.front_quality_remote_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.front_quality_remote_);
      } else {
        _this->_impl_.front_quality_remote_->MergeFrom(*from._impl_.front_quality_remote_);
      }
    }
    if ((cached_has_bits & 0x00002000u) != 0) {
      _this->_impl_.appid_ = from._impl_.appid_;
    }
    if ((cached_has_bits & 0x00004000u) != 0) {
      _this->_impl_.connection_id_local_ = from._impl_.connection_id_local_;
    }
    if ((cached_has_bits & 0x00008000u) != 0) {
      _this->_impl_.connection_state_ = from._impl_.connection_state_;
    }
  }
  if ((cached_has_bits & 0x00ff0000u) != 0) {
    if ((cached_has_bits & 0x00010000u) != 0) {
      _this->_impl_.start_time_ = from._impl_.start_time_;
    }
    if ((cached_has_bits & 0x00020000u) != 0) {
      _this->_impl_.close_time_ = from._impl_.close_time_;
    }
    if ((cached_has_bits & 0x00040000u) != 0) {
      _this->_impl_.close_reason_ = from._impl_.close_reason_;
    }
    if ((cached_has_bits & 0x00080000u) != 0) {
      _this->_impl_.transport_kind_ = from._impl_.transport_kind_;
    }
    if ((cached_has_bits & 0x00100000u) != 0) {
      _this->_impl_.ping_interior_ = from._impl_.ping_interior_;
    }
    if ((cached_has_bits & 0x00200000u) != 0) {
      _this->_impl_.ping_remote_front_ = from._impl_.ping_remote_front_;
    }
    if ((cached_has_bits & 0x00400000u) != 0) {
      _this->_impl_.ping_default_internet_route_ = from._impl_.ping_default_internet_route_;
    }
    if ((cached_has_bits & 0x00800000u) != 0) {
      _this->_impl_.e2e_quality_remote_instantaneous_time_ = from._impl_.e2e_quality_remote_instantaneous_time_;
    }
  }
  if ((cached_has_bits & 0x07000000u) != 0) {
    if ((cached_has_bits & 0x01000000u) != 0) {
      _this->_impl_.e2e_quality_remote_lifetime_time_ = from._impl_.e2e_quality_remote_lifetime_time_;
    }
    if ((cached_has_bits & 0x02000000u) != 0) {
      _this->_impl_.front_quality_remote_instantaneous_time_ = from._impl_.front_quality_remote_instantaneous_time_;
    }
    if ((cached_has_bits & 0x04000000u) != 0) {
      _this->_impl_.front_quality_remote_lifetime_time_ = from._impl_.front_quality_remote_lifetime_time_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CGameNetworkingUI_ConnectionState::CopyFrom(const CGameNetworkingUI_ConnectionState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameNetworkingUI_ConnectionState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CGameNetworkingUI_ConnectionState::InternalSwap(CGameNetworkingUI_ConnectionState* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.connection_key_, &other->_impl_.connection_key_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.identity_local_, &other->_impl_.identity_local_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.identity_remote_, &other->_impl_.identity_remote_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.close_message_, &other->_impl_.close_message_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.status_loc_token_, &other->_impl_.status_loc_token_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sdrpopid_local_, &other->_impl_.sdrpopid_local_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sdrpopid_remote_, &other->_impl_.sdrpopid_remote_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.address_remote_, &other->_impl_.address_remote_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.front_quality_remote_lifetime_time_)
      + sizeof(CGameNetworkingUI_ConnectionState::_impl_.front_quality_remote_lifetime_time_)
      - PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionState, _impl_.p2p_routing_)>(
          reinterpret_cast<char*>(&_impl_.p2p_routing_),
          reinterpret_cast<char*>(&other->_impl_.p2p_routing_));
}

::google::protobuf::Metadata CGameNetworkingUI_ConnectionState::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CGameNetworkingUI_Message::_Internal {
 public:
};

CGameNetworkingUI_Message::CGameNetworkingUI_Message(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CGameNetworkingUI_Message_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameNetworkingUI_Message)
}
PROTOBUF_NDEBUG_INLINE CGameNetworkingUI_Message::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::CGameNetworkingUI_Message& from_msg)
      : connection_state_{visibility, arena, from.connection_state_},
        _cached_size_{0} {}

CGameNetworkingUI_Message::CGameNetworkingUI_Message(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const CGameNetworkingUI_Message& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CGameNetworkingUI_Message_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CGameNetworkingUI_Message* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:CGameNetworkingUI_Message)
}
PROTOBUF_NDEBUG_INLINE CGameNetworkingUI_Message::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : connection_state_{visibility, arena},
        _cached_size_{0} {}

inline void CGameNetworkingUI_Message::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
CGameNetworkingUI_Message::~CGameNetworkingUI_Message() {
  // @@protoc_insertion_point(destructor:CGameNetworkingUI_Message)
  SharedDtor(*this);
}
inline void CGameNetworkingUI_Message::SharedDtor(MessageLite& self) {
  CGameNetworkingUI_Message& this_ = static_cast<CGameNetworkingUI_Message&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CGameNetworkingUI_Message::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CGameNetworkingUI_Message(arena);
}
constexpr auto CGameNetworkingUI_Message::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_Message, _impl_.connection_state_) +
          decltype(CGameNetworkingUI_Message::_impl_.connection_state_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(CGameNetworkingUI_Message), alignof(CGameNetworkingUI_Message), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&CGameNetworkingUI_Message::PlacementNew_,
                                 sizeof(CGameNetworkingUI_Message),
                                 alignof(CGameNetworkingUI_Message));
  }
}
constexpr auto CGameNetworkingUI_Message::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CGameNetworkingUI_Message_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CGameNetworkingUI_Message::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CGameNetworkingUI_Message>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CGameNetworkingUI_Message::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CGameNetworkingUI_Message>(), &CGameNetworkingUI_Message::ByteSizeLong,
              &CGameNetworkingUI_Message::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_Message, _impl_._cached_size_),
          false,
      },
      &CGameNetworkingUI_Message::kDescriptorMethods,
      &descriptor_table_steammessages_5fgamenetworkingui_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        CGameNetworkingUI_Message_class_data_ =
            CGameNetworkingUI_Message::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL CGameNetworkingUI_Message::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CGameNetworkingUI_Message_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CGameNetworkingUI_Message_class_data_.tc_table);
  return CGameNetworkingUI_Message_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2>
CGameNetworkingUI_Message::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    CGameNetworkingUI_Message_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CGameNetworkingUI_Message>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .CGameNetworkingUI_ConnectionState connection_state = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_Message, _impl_.connection_state_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .CGameNetworkingUI_ConnectionState connection_state = 1;
    {PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_Message, _impl_.connection_state_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::CGameNetworkingUI_ConnectionState>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void CGameNetworkingUI_Message::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameNetworkingUI_Message)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.connection_state_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CGameNetworkingUI_Message::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CGameNetworkingUI_Message& this_ = static_cast<const CGameNetworkingUI_Message&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CGameNetworkingUI_Message::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CGameNetworkingUI_Message& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:CGameNetworkingUI_Message)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // repeated .CGameNetworkingUI_ConnectionState connection_state = 1;
  for (unsigned i = 0, n = static_cast<unsigned>(
                           this_._internal_connection_state_size());
       i < n; i++) {
    const auto& repfield = this_._internal_connection_state().Get(i);
    target =
        ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
            1, repfield, repfield.GetCachedSize(),
            target, stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameNetworkingUI_Message)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CGameNetworkingUI_Message::ByteSizeLong(const MessageLite& base) {
  const CGameNetworkingUI_Message& this_ = static_cast<const CGameNetworkingUI_Message&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t CGameNetworkingUI_Message::ByteSizeLong() const {
  const CGameNetworkingUI_Message& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:CGameNetworkingUI_Message)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
   {
    // repeated .CGameNetworkingUI_ConnectionState connection_state = 1;
    {
      total_size += 1UL * this_._internal_connection_state_size();
      for (const auto& msg : this_._internal_connection_state()) {
        total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
      }
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void CGameNetworkingUI_Message::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CGameNetworkingUI_Message*>(&to_msg);
  auto& from = static_cast<const CGameNetworkingUI_Message&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CGameNetworkingUI_Message)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_connection_state()->MergeFrom(
      from._internal_connection_state());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CGameNetworkingUI_Message::CopyFrom(const CGameNetworkingUI_Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameNetworkingUI_Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CGameNetworkingUI_Message::InternalSwap(CGameNetworkingUI_Message* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.connection_state_.InternalSwap(&other->_impl_.connection_state_);
}

::google::protobuf::Metadata CGameNetworkingUI_Message::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CGameNetworkingUI_ConnectionSummary::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CGameNetworkingUI_ConnectionSummary>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionSummary, _impl_._has_bits_);
};

CGameNetworkingUI_ConnectionSummary::CGameNetworkingUI_ConnectionSummary(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CGameNetworkingUI_ConnectionSummary_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameNetworkingUI_ConnectionSummary)
}
PROTOBUF_NDEBUG_INLINE CGameNetworkingUI_ConnectionSummary::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::CGameNetworkingUI_ConnectionSummary& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        sdrpop_local_(arena, from.sdrpop_local_),
        sdrpop_remote_(arena, from.sdrpop_remote_) {}

CGameNetworkingUI_ConnectionSummary::CGameNetworkingUI_ConnectionSummary(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const CGameNetworkingUI_ConnectionSummary& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CGameNetworkingUI_ConnectionSummary_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CGameNetworkingUI_ConnectionSummary* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, transport_kind_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, transport_kind_),
           offsetof(Impl_, connection_state_) -
               offsetof(Impl_, transport_kind_) +
               sizeof(Impl_::connection_state_));

  // @@protoc_insertion_point(copy_constructor:CGameNetworkingUI_ConnectionSummary)
}
PROTOBUF_NDEBUG_INLINE CGameNetworkingUI_ConnectionSummary::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0},
        sdrpop_local_(arena),
        sdrpop_remote_(arena) {}

inline void CGameNetworkingUI_ConnectionSummary::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, transport_kind_),
           0,
           offsetof(Impl_, connection_state_) -
               offsetof(Impl_, transport_kind_) +
               sizeof(Impl_::connection_state_));
}
CGameNetworkingUI_ConnectionSummary::~CGameNetworkingUI_ConnectionSummary() {
  // @@protoc_insertion_point(destructor:CGameNetworkingUI_ConnectionSummary)
  SharedDtor(*this);
}
inline void CGameNetworkingUI_ConnectionSummary::SharedDtor(MessageLite& self) {
  CGameNetworkingUI_ConnectionSummary& this_ = static_cast<CGameNetworkingUI_ConnectionSummary&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.sdrpop_local_.Destroy();
  this_._impl_.sdrpop_remote_.Destroy();
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CGameNetworkingUI_ConnectionSummary::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CGameNetworkingUI_ConnectionSummary(arena);
}
constexpr auto CGameNetworkingUI_ConnectionSummary::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(CGameNetworkingUI_ConnectionSummary),
                                            alignof(CGameNetworkingUI_ConnectionSummary));
}
constexpr auto CGameNetworkingUI_ConnectionSummary::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CGameNetworkingUI_ConnectionSummary_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CGameNetworkingUI_ConnectionSummary::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CGameNetworkingUI_ConnectionSummary>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CGameNetworkingUI_ConnectionSummary::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CGameNetworkingUI_ConnectionSummary>(), &CGameNetworkingUI_ConnectionSummary::ByteSizeLong,
              &CGameNetworkingUI_ConnectionSummary::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionSummary, _impl_._cached_size_),
          false,
      },
      &CGameNetworkingUI_ConnectionSummary::kDescriptorMethods,
      &descriptor_table_steammessages_5fgamenetworkingui_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        CGameNetworkingUI_ConnectionSummary_class_data_ =
            CGameNetworkingUI_ConnectionSummary::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL CGameNetworkingUI_ConnectionSummary::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CGameNetworkingUI_ConnectionSummary_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CGameNetworkingUI_ConnectionSummary_class_data_.tc_table);
  return CGameNetworkingUI_ConnectionSummary_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 0, 77, 2>
CGameNetworkingUI_ConnectionSummary::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionSummary, _impl_._has_bits_),
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    CGameNetworkingUI_ConnectionSummary_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CGameNetworkingUI_ConnectionSummary>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional uint32 connection_state = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CGameNetworkingUI_ConnectionSummary, _impl_.connection_state_), 7>(),
     {64, 7, 0, PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionSummary, _impl_.connection_state_)}},
    // optional uint32 transport_kind = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CGameNetworkingUI_ConnectionSummary, _impl_.transport_kind_), 2>(),
     {8, 2, 0, PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionSummary, _impl_.transport_kind_)}},
    // optional string sdrpop_local = 2;
    {::_pbi::TcParser::FastSS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionSummary, _impl_.sdrpop_local_)}},
    // optional string sdrpop_remote = 3;
    {::_pbi::TcParser::FastSS1,
     {26, 1, 0, PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionSummary, _impl_.sdrpop_remote_)}},
    // optional uint32 ping_ms = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CGameNetworkingUI_ConnectionSummary, _impl_.ping_ms_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionSummary, _impl_.ping_ms_)}},
    // optional float packet_loss = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 4, 0, PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionSummary, _impl_.packet_loss_)}},
    // optional uint32 ping_default_internet_route = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CGameNetworkingUI_ConnectionSummary, _impl_.ping_default_internet_route_), 5>(),
     {48, 5, 0, PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionSummary, _impl_.ping_default_internet_route_)}},
    // optional bool ip_was_shared = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CGameNetworkingUI_ConnectionSummary, _impl_.ip_was_shared_), 6>(),
     {56, 6, 0, PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionSummary, _impl_.ip_was_shared_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional uint32 transport_kind = 1;
    {PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionSummary, _impl_.transport_kind_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional string sdrpop_local = 2;
    {PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionSummary, _impl_.sdrpop_local_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional string sdrpop_remote = 3;
    {PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionSummary, _impl_.sdrpop_remote_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional uint32 ping_ms = 4;
    {PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionSummary, _impl_.ping_ms_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional float packet_loss = 5;
    {PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionSummary, _impl_.packet_loss_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional uint32 ping_default_internet_route = 6;
    {PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionSummary, _impl_.ping_default_internet_route_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional bool ip_was_shared = 7;
    {PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionSummary, _impl_.ip_was_shared_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional uint32 connection_state = 8;
    {PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionSummary, _impl_.connection_state_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
    "\43\0\14\15\0\0\0\0\0\0\0\0\0\0\0\0"
    "CGameNetworkingUI_ConnectionSummary"
    "sdrpop_local"
    "sdrpop_remote"
  }},
};
PROTOBUF_NOINLINE void CGameNetworkingUI_ConnectionSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameNetworkingUI_ConnectionSummary)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000003u) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _impl_.sdrpop_local_.ClearNonDefaultToEmpty();
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _impl_.sdrpop_remote_.ClearNonDefaultToEmpty();
    }
  }
  if ((cached_has_bits & 0x000000fcu) != 0) {
    ::memset(&_impl_.transport_kind_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.connection_state_) -
        reinterpret_cast<char*>(&_impl_.transport_kind_)) + sizeof(_impl_.connection_state_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CGameNetworkingUI_ConnectionSummary::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CGameNetworkingUI_ConnectionSummary& this_ = static_cast<const CGameNetworkingUI_ConnectionSummary&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CGameNetworkingUI_ConnectionSummary::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CGameNetworkingUI_ConnectionSummary& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:CGameNetworkingUI_ConnectionSummary)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional uint32 transport_kind = 1;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this_._internal_transport_kind(), target);
  }

  // optional string sdrpop_local = 2;
  if ((cached_has_bits & 0x00000001u) != 0) {
    const std::string& _s = this_._internal_sdrpop_local();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CGameNetworkingUI_ConnectionSummary.sdrpop_local");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional string sdrpop_remote = 3;
  if ((cached_has_bits & 0x00000002u) != 0) {
    const std::string& _s = this_._internal_sdrpop_remote();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "CGameNetworkingUI_ConnectionSummary.sdrpop_remote");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // optional uint32 ping_ms = 4;
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this_._internal_ping_ms(), target);
  }

  // optional float packet_loss = 5;
  if ((cached_has_bits & 0x00000010u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        5, this_._internal_packet_loss(), target);
  }

  // optional uint32 ping_default_internet_route = 6;
  if ((cached_has_bits & 0x00000020u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this_._internal_ping_default_internet_route(), target);
  }

  // optional bool ip_was_shared = 7;
  if ((cached_has_bits & 0x00000040u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        7, this_._internal_ip_was_shared(), target);
  }

  // optional uint32 connection_state = 8;
  if ((cached_has_bits & 0x00000080u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        8, this_._internal_connection_state(), target);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameNetworkingUI_ConnectionSummary)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CGameNetworkingUI_ConnectionSummary::ByteSizeLong(const MessageLite& base) {
  const CGameNetworkingUI_ConnectionSummary& this_ = static_cast<const CGameNetworkingUI_ConnectionSummary&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t CGameNetworkingUI_ConnectionSummary::ByteSizeLong() const {
  const CGameNetworkingUI_ConnectionSummary& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:CGameNetworkingUI_ConnectionSummary)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += static_cast<bool>(0x00000010u & cached_has_bits) * 5;
  total_size += static_cast<bool>(0x00000040u & cached_has_bits) * 2;
  if ((cached_has_bits & 0x000000afu) != 0) {
    // optional string sdrpop_local = 2;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_sdrpop_local());
    }
    // optional string sdrpop_remote = 3;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this_._internal_sdrpop_remote());
    }
    // optional uint32 transport_kind = 1;
    if ((cached_has_bits & 0x00000004u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_transport_kind());
    }
    // optional uint32 ping_ms = 4;
    if ((cached_has_bits & 0x00000008u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_ping_ms());
    }
    // optional uint32 ping_default_internet_route = 6;
    if ((cached_has_bits & 0x00000020u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_ping_default_internet_route());
    }
    // optional uint32 connection_state = 8;
    if ((cached_has_bits & 0x00000080u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_connection_state());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void CGameNetworkingUI_ConnectionSummary::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CGameNetworkingUI_ConnectionSummary*>(&to_msg);
  auto& from = static_cast<const CGameNetworkingUI_ConnectionSummary&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:CGameNetworkingUI_ConnectionSummary)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x000000ffu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      _this->_internal_set_sdrpop_local(from._internal_sdrpop_local());
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_internal_set_sdrpop_remote(from._internal_sdrpop_remote());
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_impl_.transport_kind_ = from._impl_.transport_kind_;
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _this->_impl_.ping_ms_ = from._impl_.ping_ms_;
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _this->_impl_.packet_loss_ = from._impl_.packet_loss_;
    }
    if ((cached_has_bits & 0x00000020u) != 0) {
      _this->_impl_.ping_default_internet_route_ = from._impl_.ping_default_internet_route_;
    }
    if ((cached_has_bits & 0x00000040u) != 0) {
      _this->_impl_.ip_was_shared_ = from._impl_.ip_was_shared_;
    }
    if ((cached_has_bits & 0x00000080u) != 0) {
      _this->_impl_.connection_state_ = from._impl_.connection_state_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CGameNetworkingUI_ConnectionSummary::CopyFrom(const CGameNetworkingUI_ConnectionSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameNetworkingUI_ConnectionSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CGameNetworkingUI_ConnectionSummary::InternalSwap(CGameNetworkingUI_ConnectionSummary* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sdrpop_local_, &other->_impl_.sdrpop_local_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sdrpop_remote_, &other->_impl_.sdrpop_remote_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionSummary, _impl_.connection_state_)
      + sizeof(CGameNetworkingUI_ConnectionSummary::_impl_.connection_state_)
      - PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_ConnectionSummary, _impl_.transport_kind_)>(
          reinterpret_cast<char*>(&_impl_.transport_kind_),
          reinterpret_cast<char*>(&other->_impl_.transport_kind_));
}

::google::protobuf::Metadata CGameNetworkingUI_ConnectionSummary::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CGameNetworkingUI_AppSummary::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CGameNetworkingUI_AppSummary>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_AppSummary, _impl_._has_bits_);
};

CGameNetworkingUI_AppSummary::CGameNetworkingUI_AppSummary(::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CGameNetworkingUI_AppSummary_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:CGameNetworkingUI_AppSummary)
}
PROTOBUF_NDEBUG_INLINE CGameNetworkingUI_AppSummary::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena, const Impl_& from,
    const ::CGameNetworkingUI_AppSummary& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

CGameNetworkingUI_AppSummary::CGameNetworkingUI_AppSummary(
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena,
    const CGameNetworkingUI_AppSummary& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, CGameNetworkingUI_AppSummary_class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CGameNetworkingUI_AppSummary* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.main_cxn_ = ((cached_has_bits & 0x00000001u) != 0)
                ? ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.main_cxn_)
                : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, appid_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, appid_),
           offsetof(Impl_, active_connections_) -
               offsetof(Impl_, appid_) +
               sizeof(Impl_::active_connections_));

  // @@protoc_insertion_point(copy_constructor:CGameNetworkingUI_AppSummary)
}
PROTOBUF_NDEBUG_INLINE CGameNetworkingUI_AppSummary::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena)
      : _cached_size_{0} {}

inline void CGameNetworkingUI_AppSummary::SharedCtor(::_pb::Arena* PROTOBUF_NULLABLE arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, main_cxn_),
           0,
           offsetof(Impl_, active_connections_) -
               offsetof(Impl_, main_cxn_) +
               sizeof(Impl_::active_connections_));
}
CGameNetworkingUI_AppSummary::~CGameNetworkingUI_AppSummary() {
  // @@protoc_insertion_point(destructor:CGameNetworkingUI_AppSummary)
  SharedDtor(*this);
}
inline void CGameNetworkingUI_AppSummary::SharedDtor(MessageLite& self) {
  CGameNetworkingUI_AppSummary& this_ = static_cast<CGameNetworkingUI_AppSummary&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.main_cxn_;
  this_._impl_.~Impl_();
}

inline void* PROTOBUF_NONNULL CGameNetworkingUI_AppSummary::PlacementNew_(
    const void* PROTOBUF_NONNULL, void* PROTOBUF_NONNULL mem,
    ::google::protobuf::Arena* PROTOBUF_NULLABLE arena) {
  return ::new (mem) CGameNetworkingUI_AppSummary(arena);
}
constexpr auto CGameNetworkingUI_AppSummary::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(CGameNetworkingUI_AppSummary),
                                            alignof(CGameNetworkingUI_AppSummary));
}
constexpr auto CGameNetworkingUI_AppSummary::InternalGenerateClassData_() {
  return ::google::protobuf::internal::ClassDataFull{
      ::google::protobuf::internal::ClassData{
          &_CGameNetworkingUI_AppSummary_default_instance_._instance,
          &_table_.header,
          nullptr,  // OnDemandRegisterArenaDtor
          nullptr,  // IsInitialized
          &CGameNetworkingUI_AppSummary::MergeImpl,
          ::google::protobuf::Message::GetNewImpl<CGameNetworkingUI_AppSummary>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
          &CGameNetworkingUI_AppSummary::SharedDtor,
          ::google::protobuf::Message::GetClearImpl<CGameNetworkingUI_AppSummary>(), &CGameNetworkingUI_AppSummary::ByteSizeLong,
              &CGameNetworkingUI_AppSummary::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
          PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_AppSummary, _impl_._cached_size_),
          false,
      },
      &CGameNetworkingUI_AppSummary::kDescriptorMethods,
      &descriptor_table_steammessages_5fgamenetworkingui_2eproto,
      nullptr,  // tracker
  };
}

PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 const ::google::protobuf::internal::ClassDataFull
        CGameNetworkingUI_AppSummary_class_data_ =
            CGameNetworkingUI_AppSummary::InternalGenerateClassData_();

const ::google::protobuf::internal::ClassData* PROTOBUF_NONNULL CGameNetworkingUI_AppSummary::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&CGameNetworkingUI_AppSummary_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(CGameNetworkingUI_AppSummary_class_data_.tc_table);
  return CGameNetworkingUI_AppSummary_class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 1, 0, 2>
CGameNetworkingUI_AppSummary::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_AppSummary, _impl_._has_bits_),
    0, // no _extensions_
    30, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    3757570558,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    CGameNetworkingUI_AppSummary_class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::CGameNetworkingUI_AppSummary>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional uint32 appid = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CGameNetworkingUI_AppSummary, _impl_.appid_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_AppSummary, _impl_.appid_)}},
    // optional bool ip_was_shared_with_friend = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CGameNetworkingUI_AppSummary, _impl_.ip_was_shared_with_friend_), 2>(),
     {80, 2, 0, PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_AppSummary, _impl_.ip_was_shared_with_friend_)}},
    // optional bool ip_was_shared_with_nonfriend = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(CGameNetworkingUI_AppSummary, _impl_.ip_was_shared_with_nonfriend_), 3>(),
     {88, 3, 0, PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_AppSummary, _impl_.ip_was_shared_with_nonfriend_)}},
    // optional uint32 active_connections = 20;
    {::_pbi::TcParser::FastV32S2,
     {416, 4, 0, PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_AppSummary, _impl_.active_connections_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // optional .CGameNetworkingUI_ConnectionSummary main_cxn = 30;
    {::_pbi::TcParser::FastMtS2,
     {498, 0, 0, PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_AppSummary, _impl_.main_cxn_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional uint32 appid = 1;
    {PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_AppSummary, _impl_.appid_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional bool ip_was_shared_with_friend = 10;
    {PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_AppSummary, _impl_.ip_was_shared_with_friend_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional bool ip_was_shared_with_nonfriend = 11;
    {PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_AppSummary, _impl_.ip_was_shared_with_nonfriend_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
    // optional uint32 active_connections = 20;
    {PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_AppSummary, _impl_.active_connections_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional .CGameNetworkingUI_ConnectionSummary main_cxn = 30;
    {PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_AppSummary, _impl_.main_cxn_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }},
  {{
      {::_pbi::TcParser::GetTable<::CGameNetworkingUI_ConnectionSummary>()},
  }},
  {{
  }},
};
PROTOBUF_NOINLINE void CGameNetworkingUI_AppSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:CGameNetworkingUI_AppSummary)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if ((cached_has_bits & 0x00000001u) != 0) {
    ABSL_DCHECK(_impl_.main_cxn_ != nullptr);
    _impl_.main_cxn_->Clear();
  }
  if ((cached_has_bits & 0x0000001eu) != 0) {
    ::memset(&_impl_.appid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.active_connections_) -
        reinterpret_cast<char*>(&_impl_.appid_)) + sizeof(_impl_.active_connections_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::uint8_t* PROTOBUF_NONNULL CGameNetworkingUI_AppSummary::_InternalSerialize(
    const ::google::protobuf::MessageLite& base, ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) {
  const CGameNetworkingUI_AppSummary& this_ = static_cast<const CGameNetworkingUI_AppSummary&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::uint8_t* PROTOBUF_NONNULL CGameNetworkingUI_AppSummary::_InternalSerialize(
    ::uint8_t* PROTOBUF_NONNULL target,
    ::google::protobuf::io::EpsCopyOutputStream* PROTOBUF_NONNULL stream) const {
  const CGameNetworkingUI_AppSummary& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(serialize_to_array_start:CGameNetworkingUI_AppSummary)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = this_._impl_._has_bits_[0];
  // optional uint32 appid = 1;
  if ((cached_has_bits & 0x00000002u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this_._internal_appid(), target);
  }

  // optional bool ip_was_shared_with_friend = 10;
  if ((cached_has_bits & 0x00000004u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        10, this_._internal_ip_was_shared_with_friend(), target);
  }

  // optional bool ip_was_shared_with_nonfriend = 11;
  if ((cached_has_bits & 0x00000008u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        11, this_._internal_ip_was_shared_with_nonfriend(), target);
  }

  // optional uint32 active_connections = 20;
  if ((cached_has_bits & 0x00000010u) != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        20, this_._internal_active_connections(), target);
  }

  // optional .CGameNetworkingUI_ConnectionSummary main_cxn = 30;
  if ((cached_has_bits & 0x00000001u) != 0) {
    target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
        30, *this_._impl_.main_cxn_, this_._impl_.main_cxn_->GetCachedSize(), target,
        stream);
  }

  if (ABSL_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CGameNetworkingUI_AppSummary)
  return target;
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
::size_t CGameNetworkingUI_AppSummary::ByteSizeLong(const MessageLite& base) {
  const CGameNetworkingUI_AppSummary& this_ = static_cast<const CGameNetworkingUI_AppSummary&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
::size_t CGameNetworkingUI_AppSummary::ByteSizeLong() const {
  const CGameNetworkingUI_AppSummary& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(message_byte_size_start:CGameNetworkingUI_AppSummary)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void)cached_has_bits;

  ::_pbi::Prefetch5LinesFrom7Lines(&this_);
  cached_has_bits = this_._impl_._has_bits_[0];
  total_size += ::absl::popcount(0x0000000cu & cached_has_bits) * 2;
  if ((cached_has_bits & 0x00000013u) != 0) {
    // optional .CGameNetworkingUI_ConnectionSummary main_cxn = 30;
    if ((cached_has_bits & 0x00000001u) != 0) {
      total_size += 2 +
                    ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.main_cxn_);
    }
    // optional uint32 appid = 1;
    if ((cached_has_bits & 0x00000002u) != 0) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this_._internal_appid());
    }
    // optional uint32 active_connections = 20;
    if ((cached_has_bits & 0x00000010u) != 0) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this_._internal_active_connections());
    }
  }
  return this_.MaybeComputeUnknownFieldsSize(total_size,
                                             &this_._impl_._cached_size_);
}

void CGameNetworkingUI_AppSummary::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CGameNetworkingUI_AppSummary*>(&to_msg);
  auto& from = static_cast<const CGameNetworkingUI_AppSummary&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:CGameNetworkingUI_AppSummary)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if ((cached_has_bits & 0x0000001fu) != 0) {
    if ((cached_has_bits & 0x00000001u) != 0) {
      ABSL_DCHECK(from._impl_.main_cxn_ != nullptr);
      if (_this->_impl_.main_cxn_ == nullptr) {
        _this->_impl_.main_cxn_ = ::google::protobuf::Message::CopyConstruct(arena, *from._impl_.main_cxn_);
      } else {
        _this->_impl_.main_cxn_->MergeFrom(*from._impl_.main_cxn_);
      }
    }
    if ((cached_has_bits & 0x00000002u) != 0) {
      _this->_impl_.appid_ = from._impl_.appid_;
    }
    if ((cached_has_bits & 0x00000004u) != 0) {
      _this->_impl_.ip_was_shared_with_friend_ = from._impl_.ip_was_shared_with_friend_;
    }
    if ((cached_has_bits & 0x00000008u) != 0) {
      _this->_impl_.ip_was_shared_with_nonfriend_ = from._impl_.ip_was_shared_with_nonfriend_;
    }
    if ((cached_has_bits & 0x00000010u) != 0) {
      _this->_impl_.active_connections_ = from._impl_.active_connections_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CGameNetworkingUI_AppSummary::CopyFrom(const CGameNetworkingUI_AppSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CGameNetworkingUI_AppSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CGameNetworkingUI_AppSummary::InternalSwap(CGameNetworkingUI_AppSummary* PROTOBUF_RESTRICT PROTOBUF_NONNULL other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_AppSummary, _impl_.active_connections_)
      + sizeof(CGameNetworkingUI_AppSummary::_impl_.active_connections_)
      - PROTOBUF_FIELD_OFFSET(CGameNetworkingUI_AppSummary, _impl_.main_cxn_)>(
          reinterpret_cast<char*>(&_impl_.main_cxn_),
          reinterpret_cast<char*>(&other->_impl_.main_cxn_));
}

::google::protobuf::Metadata CGameNetworkingUI_AppSummary::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ [[maybe_unused]] =
        (::_pbi::AddDescriptors(&descriptor_table_steammessages_5fgamenetworkingui_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
